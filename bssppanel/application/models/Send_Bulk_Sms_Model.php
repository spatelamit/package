<?php
//error_reporting(0);
if (!defined('BASEPATH'))
    exit('No direct script access allowed');

Class Send_Bulk_Sms_Model extends CI_Model {

    // Class Constructor
    function __construct() {
        parent::__construct();
        date_default_timezone_set('Asia/Kolkata');
        $this->load->library('csv_reader');
        $this->load->library('csvreader');
         $this->load->library('excel');
        $this->load->model('Utility_Model', 'utility_model');
        $this->load->model('Sms_Model', 'sms_model');
    }
 
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//    
    // Send SMS (Normal & Scheduled)
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Send SMS
    function sendMessage($user_id = 0) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        // Get User Details
        $this->benchmark->mark('Start_Time');
        $this->benchmark->mark('A');
        $result_user = $this->sms_model->getUserSettings($user_id);


        if ($result_user) {
            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $prtodnd_balance = $result_user->prtodnd_balance;
            $stock_balance = $result_user->stock_balance;
            $number_allowed = $result_user->number_allowed;
            $p_sender_id_option = $result_user->p_sender_id_option;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $dnd_check = $result_user->dnd_check;
            $pro_user_group_id = $result_user->pro_user_group_id;
            $tr_user_group_id = $result_user->tr_user_group_id;

            $prtodnd_user_group_id = $result_user->prtodnd_route;
            $stock_user_group_id = $result_user->stock_route;
            $premium_dnd_check = $result_user->premium_dnd_check;
            $stock_dnd_check = $result_user->stock_dnd_check;
            $admin_approval_status = $result_user->pricing_approval;


            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $pr_fake_sent = $result_user->pr_fake_sent;
            $tr_fake_sent = $result_user->tr_fake_sent;
            $spacial_deliver_pr_ratio = $result_user->spacial_deliver_pr_ratio;
            $spacial_deliver_tr_ratio = $result_user->spacial_deliver_tr_ratio;

            // Check Account Type
            $admin_id = $result_user->admin_id;
            $ref_user_id = $result_user->ref_user_id;
            $check_demo_user = $result_user->check_demo_user;
            $utype = $result_user->utype;
            // Get Form Values
            $this->benchmark->mark('B');
            $campaign_name = $this->input->post('campaign_name');
            $route = $this->input->post('route');
            $from = $this->input->post('sender');
            $message_type = $this->input->post('message_type');
            $message = $this->input->post('message');
            $upload_attach_file = $this->input->post('upload_attach_file');
            $attach_array = array();
            $attach_array = explode('|', $upload_attach_file);

            if (!preg_match('/^[\w\s?]+$/si', $message) && $message_type!=2) // '/[^a-z\d]/i' should also work.
            {
              return 113;
            }
            $signature = ""; 
            if ($this->input->post('check_signature')) {
                $signature = $this->input->post('signature');
                $message.=" " . $signature;
            }
            
             $attach_sms = "";
//            if ($this->input->post('upload_attach_file')) {
//                $attach_sms = $this->input->post('upload_attach_file');
//                $attach_url = $this->sms_model->googleUrlShortner($attach_array[0]);
//                $message.=" " . $attach_url;
//    
//            }
            
            if ($this->input->post('upload_attach_file')) {
                $attach_sms = $this->input->post('upload_attach_file');
                $message.=" " . $attach_array[0];
            }
            
            $length = strlen(utf8_decode($message));
            $actual = str_replace(' ', '', $message);
            $actual_credit = strlen($actual);
            // Calculate Credits
            $charset = "ASCII";
            $coding = 0;
            $total_credits = 0;
            $result_credits = $this->sms_model->getSMSCredits($message_type, $length, $message);
            if ($result_credits) {
                $charset = $result_credits['charset'];
                $coding = $result_credits['coding'];
                $total_credits = $result_credits['credits'];
            }
            if ($total_credits) {
                $mobile_numbers = $this->input->post('mobile_numbers');
                // Flash Message
                $flash_message = 0;
                $mclass = null;
                $alt_dcs = 0;
                if ($this->input->post('flash_message')) {
                    $flash_message = $this->input->post('flash_message');
                    $result_flash = $this->sms_model->getFlashMessage($flash_message);
                    if ($result_flash) {
                        $mclass = $result_flash['mclass'];
                        //$alt_dcs = $result_flash['alt_dcs'];
                    }
                }

                $mobile_array = array();
                $result_array = array();
                // Mobile Numbers
                $temp_file_name = date('dmYhis') . "-" . $user_id;
                $config['file_name'] = $temp_file_name;
                $config['upload_path'] = './Temp_CSV_Files/';
                $config['allowed_types'] = '*';
                $this->load->library('upload', $config);
                if ($mobile_numbers != "" && !$this->upload->do_upload()) {
                    $output = preg_replace('!\s+!', ' ', $mobile_numbers);
                    $output = preg_replace('!\s+!', ',', $output);
                    $result_array = explode(',', $output);
                    $result_array = array_diff($result_array, array(''));
                } elseif ($mobile_numbers == "" && $this->upload->do_upload('mobiles')) {
                    $uploaded_file = explode('.', $_FILES['mobiles']['name']);
                    $extension = $uploaded_file[1];
                    if ($extension == 'csv' || $extension == 'xls' || $extension == 'xlsx') {
                        
                        if($extension == 'csv'){
                            $myfile = "./Temp_CSV_Files/" . $temp_file_name . ".csv";
                            $mobile_array = $this->csv_reader->parse_file($myfile, false);
                            //print_r($mobile_array);
                        }elseif($extension == 'xlsx' || $extension == 'xls'){
                                    
                                    $path = "./Temp_CSV_Files/" . $temp_file_name . ".xls";
                                    
                                    $excel = PHPExcel_IOFactory::load($path);
                                
                                    $sheet = $excel->getActiveSheet()->toArray(null,true,true,false);
                                     
                                    $arrayCount = count($sheet); 
                                                 for($i=0;$i<$arrayCount;$i++)
                                                 {                   
                                                     $mobile_array[]= $sheet[$i][0];
                                                 }
                                    // print_r($mobile_array); die; 
                        }
                        $result_array = array_unique($mobile_array);
                    } else {
                        // Only Upload CSV, XLXS, XLS Files
                        return 107;
                    }
                } elseif ($mobile_numbers != "" && !$this->upload->do_upload()) {
                    $result_array = explode(',', $mobile_numbers);
                }
                $landline_array = array();
                // Check Mobile Numbers Validation
                $this->benchmark->mark('C');
                // $flag = 0;
                $new_array = array();
                if (sizeof($result_array)) {
                    foreach ($result_array as $mobile) {
                        if (strlen($mobile) == 10) {
                            if (substr($mobile, 0, 1) > 5) {
                                $new_array[] = "91" . $mobile;
                            } else {
                                $landline_array[] = "91" . $mobile;
                            }
                        } elseif (strlen($mobile) == 12) {
                            if (substr($mobile, 0, 1) > 5) {
                                $new_array[] = $mobile;
                            } else {
                                $landline_array[] = $mobile;
                            }
                        } elseif (strlen($mobile)) {
                            $new_array[] = $mobile;
                        } else {
                            
                        }
                    }
                }

                $spacial_deliver_fake = 0;

                // Some Mobile Numbers are invalid!
                //  if ($flag > 0) {
                //   return "104";
                //} else {
                // Get Contacts From Groups
                $select_contact_array = array();
                if ($this->input->post('check_group')) {
                    $selected_groups_array = $this->input->post('check_group');
                    if (sizeof($selected_groups_array)) {
                        $result_contacts = $this->sms_model->getGroupsContacts($user_id);
                        if ($result_contacts) {
                            foreach ($result_contacts as $row_contact) {
                                $contact_groups_array = explode(',', $row_contact['contact_group_ids']);
                                $array_intersect = array_intersect($selected_groups_array, $contact_groups_array);
                                if (sizeof($array_intersect)) {
                                    if (strlen($row_contact['mobile_number']) == 10) {
                                        $select_contact_array[] = "91" . $row_contact['mobile_number'];
                                    } elseif (strlen($row_contact['mobile_number']) == 12) {
                                        $select_contact_array[] = $row_contact['mobile_number'];
                                    }
                                }
                            }
                        }
                    }
                }
                // Final Result Array For Mobile Numbers
                $result_array = array_unique(array_merge($new_array, $select_contact_array));
                // Total Submitted
                $total_messages = sizeof($result_array) + sizeof($landline_array);
                $actual_balance_required = $total_messages * $total_credits;
                // Wrong Numbers
                $this->benchmark->mark('D');
                $reject_list_array = array();
                if (sizeof($result_array)) {
                    foreach ($result_array as $mobile) {
                        // if (substr($mobile, 0, 2) != 91) {
                        //      $reject_list_array[] = $mobile;
                        //  }
                    }
                }
                // Final Result Array For Mobile Numbers
                $result_array = array_diff($result_array, $reject_list_array);

                // DLR Mask (All Type of Delivery Reports)
                $dlr_mask = "31";

                // Check Black List Sender Id & Keywrods
                $this->benchmark->mark('E');
                // Check Black List Sender Id
                $black_sender = $this->sms_model->checkBlackSenderIds($from);
                // Get Black Listed Keywrods
                $black_keyword_array = array();
                $result_black_keywords = $this->sms_model->getBlackKeywords();

                if ($result_black_keywords) {
                    foreach ($result_black_keywords as $row_bkeyword) {
                        $bkeyword = preg_replace('/\s+/', ' ', urldecode($row_bkeyword['black_keyword']));
                        $bkeyword_array = explode(' ', $bkeyword);
                        $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                    }
                }
                $black_keyword_array = array_map('strtolower', $black_keyword_array);
                $black_keyword_array = array_filter($black_keyword_array);
                $message_array = explode(' ', preg_replace('/\s+/', ' ', $message));
                $message_array = array_map('strtolower', $message_array);
                $result_message_array = array_intersect($black_keyword_array, $message_array);

                // Get Black Lists & Remove Black List Numbers
                $this->benchmark->mark('F');
                $bresult_array = array();
                $black_list_array = array();
                $result_black_list = $this->sms_model->getBlackLists();
                if ($result_black_list) {
                    $black_list_array = $result_black_list;
                    $bresult_array = array_intersect($result_array, $black_list_array);
                    $result_array = array_diff($result_array, $black_list_array);
                }

                // Check Account Type (Demo | Active)
                if ($check_demo_user) {
                    if ($admin_id) {
                        $result_info = $this->sms_model->getDefaultSettings();
                        if ($result_info) {
                            if ($result_info->demo_sender != "")
                                $from = $result_info->demo_sender;
                            else
                                $from = "BLKSMS";
                            if ($result_info->demo_message != "")
                                $message = $result_info->demo_message;
                        }
                    } elseif ($ref_user_id) {
                        $result_info = $this->sms_model->getUserSettings($ref_user_id);
                        if ($result_info) {
                            if ($result_info->demo_sender != "")
                                $from = $result_info->demo_sender;
                            else
                                $from = "BLKSMS";
                            if ($result_info->demo_message != "")
                                $message = $result_info->demo_message;
                        }
                    }
                }
                $add_white_list = 1;
                // URL Encoding
                $message = urlencode($message);
                //white list number insert into database (start 50 numbers)
                $sizeofcampaign = sizeof($result_array);

                if ($sizeofcampaign < 10) {

                    $add_white_list = $this->user_data_model->insertWhiteList($result_array, $user_id);
                }

                $approval_status = 1;
                $remainNumberOfSMS = 0;
                $pricing_error = 0;
                // check pricing for message approval
                $pricing_array = array();
                $pricing_array = $this->user_data_model->checkPricing($user_id);
                if ($pricing_array) {
                    $txn_id = $pricing_array[0]['txn_log_id'];
                    $pricing = $pricing_array[0]['txn_price'];
                    $tax_status = $pricing_array[0]['tax_status'];
                    $numberOfSMS = $pricing_array[0]['no_of_send_sms'];


                    if ($admin_approval_status == 0) {
                        if ($tax_status == 1) {
                            if ($pricing < .035) {
                                if ($numberOfSMS == 0) {
                                    $approval_status = 0;
                                } else {
                                    if ($numberOfSMS < $actual_balance_required) {
                                        $approval_status = 0;
                                    } else {
                                        $approval_status = 1;
                                        $remainNumberOfSMS = $numberOfSMS - $actual_balance_required;
                                        $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
                                    }
                                }
                            } else {
                                $approval_status = 1;
                            }
                        } elseif ($tax_status == 0) {
                            if ($pricing < .05) {
                                if ($numberOfSMS == 0) {
                                    $approval_status = 0;
                                } else {
                                    if ($numberOfSMS < $actual_balance_required) {
                                        $approval_status = 0;
                                    } else {
                                        $approval_status = 1;
                                        $remainNumberOfSMS = $numberOfSMS - $actual_balance_required;
                                        $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
                                    }
                                }
                            } else {
                                $approval_status = 1;
                            }
                        }
                    }
                }
                $pricing_error = 0;
                if ($approval_status == 0) {
                    $pricing_error = 420;
                }

                // Check Result Array
                if (sizeof($result_array) || sizeof($reject_list_array) || sizeof($bresult_array) || $add_white_list) {
                    $new_campaign_uid = 0;
                    $xml = "";
                    // Promotional SMS
                    // Promotional SMS
                    $balance_status = 1;
                    if ($route == "A" || $route == "C" || $route == "D") {
                        $updated_key_balance;
                        if ($route == 'A' && $pr_sms_balance < $actual_balance_required) {
                            $balance_status = 0;
                        }
                        if ($route == 'C' && $stock_balance < $actual_balance_required) {
                            $balance_status = 0;
                        }
                        if ($route == 'D' && $prtodnd_balance < $actual_balance_required) {
                            $balance_status = 0;
                        }

                        $reseller_key_balance_status = 1;
                        $most_parent_id_reseller_status = 0;
                        // Check Available Balance And Send Number of Message
                        if ($balance_status == 0) {
                            $reason = "Insufficient Promotional Balance";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "101";
                        } else {

                            //special reseller

                            $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                            $mostParentID = $verifySpecialReseller->most_parent_id;
                            $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                            if ($mostParentID != 0) {
                                $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                                $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                            }

                            if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                                //check Special PR balance
                                if ($spacial_reseller_status) {
                                    $special_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                                    $special_pr_balance = $special_balance->special_pr_balance;
                                    $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                    $special_stock_credits = $special_balance->stock_credits;
                                } else {
                                    $special_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                                    $special_pr_balance = $special_balance->special_pr_balance;
                                    $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                    $special_stock_credits = $special_balance->stock_credits;
                                }

                                if ($route == 'A' && $special_pr_balance < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                }
                                if ($route == 'C' && $special_stock_credits < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                }
                                if ($route == 'D' && $special_prtodnd_credits < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                }

                                /*   if ($special_pr_balance < $actual_balance_required) {
                                  $reseller_key_balance_status = 0;
                                  } else {

                                  $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                  $reseller_key_balance_status = 1;
                                  } */
                                if ($reseller_key_balance_status == 0) {
                                    $reseller_key_balance_status = 0;
                                } else {
                                    if ($route == 'A') {
                                        $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                        $reseller_key_balance_status = 1;
                                    }
                                    if ($route == 'C') {
                                        $updated_key_balance = $special_stock_credits - $actual_balance_required;
                                        $reseller_key_balance_status = 1;
                                    }
                                    if ($route == 'D') {
                                        $updated_key_balance = $special_prtodnd_credits - $actual_balance_required;
                                        $reseller_key_balance_status = 1;
                                    }

                                    // $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                    // $reseller_key_balance_status = 1;
                                }
                            }

                            // Promotional SMS (User Group)                            
                            if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id) {

                                if ($route == 'A') {
                                    $user_smsc_id = $result_user->pr_smsc;
                                    $pro_user_group_id = $pro_user_group_id;
                                }
                                if ($route == 'D') {
                                    $user_smsc_id = $result_user->prtodnd_smsc;
                                    $pro_user_group_id = $prtodnd_user_group_id;
                                }
                                if ($route == 'C') {
                                    $user_smsc_id = $result_user->stock_smsc;
                                    $pro_user_group_id = $stock_user_group_id;
                                }


                                //check pr approve sender ids  
                                $check_pr_approve_sender_id = $this->sms_model->prApproveSenderId($sender_id_type, $sender_id_length, $from);
                                if ($check_pr_approve_sender_id) {

                                    $pro_user_group_id = $check_pr_approve_sender_id->route;
                                    $this->db->select('smsc_id');
                                    $this->db->from('user_groups');
                                    $this->db->where('user_group_id', $pro_user_group_id);
                                    $query = $this->db->get();

                                    $user_smsc_id = $query->row('smsc_id');
                                }





                                // $user_smsc_id = $result_user->pr_smsc;
                                // If XML
                                $is_xml = 0;
                                $authentication = "";
                                $xml_url = "";
                                if ($user_smsc_id == 'XML') {
                                    $result_setting = $this->sms_model->getDefaultSettings();
                                    $authentication = $result_setting->xml_route_authkey;
                                    $xml_url = $result_setting->xml_route_url;
                                    $is_xml = 1;
                                }
                                // Check Sender Id (Open/Close)
                                if ($p_sender_id_option == 0) {
                                    $from = "BLKSMS"; //random_string('numeric', 6);
                                }
                                // Insert Campaign
                                $request_by = "By Panel";
                                $campaign_uid = strtolower(random_string('alnum', 24));
                                $submit_date = date("Y-m-d H:i:s");
                                // Deduct SMS Balance
                                $deduct_balance = 0;
                                // If Message Content Blocked By Admin
                                if (sizeof($result_message_array) || $black_sender) {
                                    $check_keyword = 0;
                                    $check_sender = 0;
                                    if (sizeof($result_message_array)) {
                                        $check_keyword = 1;
                                    }
                                    if ($black_sender) {
                                        $check_sender = 1;
                                    }
                                    $check_black_listed = $check_keyword . "|" . $check_sender;
                                    $campaign_status = 2;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $pro_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'black_listed' => $check_black_listed,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers

                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;

                                                $data_black[] = $temp_black_array;

                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }
                                        //insert land line number 
                                        if (sizeof($landline_array)) {
                                            $data_landline = array();
                                            foreach ($landline_array as $landline_number) {
                                                $temp_landline_array = array();
                                                $status = 48;
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_landline_array['user_group_id'] = $pro_user_group_id;
                                                $temp_landline_array['campaign_id'] = $campaign_id;
                                                $temp_landline_array['user_id'] = $user_id;
                                                $temp_landline_array['msg_id'] = $msg_id;
                                                $temp_landline_array['message'] = $message;
                                                $temp_landline_array['msg_length'] = $length;
                                                $temp_landline_array['mobile_no'] = $landline_number;
                                                $temp_landline_array['status'] = $status;
                                                $temp_landline_array['submit_date'] = $subdate;
                                                $temp_landline_array['temporary_status'] = $temporary_status;
                                                $temp_landline_array['default_route'] = $user_smsc_id;
                                                $temp_landline_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_landline_array['actual_credit'] = $actual_credit;
                                                $data_landline[] = $temp_landline_array;
                                                unset($temp_landline_array);
                                            }
                                            if (sizeof($data_landline)) {
                                                $res_landline = $this->db->insert_batch('sent_sms', $data_landline);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        // Insert Rejected List Numbers
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        if ($route == "A" && $dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "A" && $dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "C" && $stock_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "C" && $stock_dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "D" && $premium_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "D" && $premium_dnd_check == 1) {
                                            $dnd_check = 0;
                                        }




                                        // Insert Remaining Numbers
                                        if (sizeof($result_array)) {
                                            // DND Allowed
                                            if ($dnd_check) {
                                                $ssms_data = array();
                                                foreach ($result_array as $ndnd_number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    // Sent SMS
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;

                                                    unset($ssms_temp_array);
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            } else {
                                                // Custom DND Numbers
                                                $dnd_array = array();

                                                $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                                if ($result_dnd) {
                                                    $dnd_array = $result_dnd;
                                                    $dnd_array_size = sizeof($dnd_array);
                                                }

                                                // Non-DND Numbers
                                                $ndnd_result = array_diff($result_array, $dnd_array);

                                                // DND Numbers
                                                // $dnd_result = array_intersect($result_array, $dnd_array);
                                                if (sizeof($dnd_array)) {
                                                    $data_dnd = array();
                                                    foreach ($dnd_array as $dnd_number) {
                                                        $temp_dnd_array = array();
                                                        $status = "DND";
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_dnd_array['campaign_id'] = $campaign_id;
                                                        $temp_dnd_array['user_id'] = $user_id;
                                                        $temp_dnd_array['msg_id'] = $msg_id;
                                                        $temp_dnd_array['message'] = $message;
                                                        $temp_dnd_array['msg_length'] = $length;
                                                        $temp_dnd_array['mobile_no'] = $dnd_number;
                                                        $temp_dnd_array['status'] = $status;
                                                        $temp_dnd_array['submit_date'] = $subdate;
                                                        $temp_dnd_array['temporary_status'] = $temporary_status;
                                                        $temp_dnd_array['default_route'] = $user_smsc_id;
                                                        $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_dnd_array['actual_credit'] = $actual_credit;
                                                        $data_dnd[] = $temp_dnd_array;

                                                        unset($temp_dnd_array);
                                                    }
                                                    if (sizeof($data_dnd)) {
                                                        $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                        //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                    }
                                                }

                                                // Non-DND Numbers
                                                if (sizeof($ndnd_result)) {
                                                    $ssms_data = array();
                                                    foreach ($ndnd_result as $ndnd_number) {
                                                        $ssms_temp_array = array();
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $message;
                                                        $ssms_temp_array['msg_length'] = $length;
                                                        $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['default_route'] = $user_smsc_id;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_temp_array['actual_credit'] = $actual_credit;
                                                        $ssms_data[] = $ssms_temp_array;

                                                        unset($ssms_temp_array);
                                                    }
                                                    if (sizeof($ssms_data)) {
                                                        $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                        //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    $campaign_status = 1;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $pro_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        //insert land line number 
                                        if (sizeof($landline_array)) {
                                            $data_landline = array();
                                            foreach ($landline_array as $landline_number) {
                                                $temp_landline_array = array();
                                                $status = 48;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $deduct_balance++;
                                                $temporary_status = 1;

                                                $temp_landline_array['user_group_id'] = $pro_user_group_id;
                                                $temp_landline_array['campaign_id'] = $campaign_id;
                                                $temp_landline_array['user_id'] = $user_id;
                                                $temp_landline_array['msg_id'] = $msg_id;
                                                $temp_landline_array['message'] = $message;
                                                $temp_landline_array['msg_length'] = $length;
                                                $temp_landline_array['mobile_no'] = $landline_number;
                                                $temp_landline_array['status'] = $status;
                                                $temp_landline_array['submit_date'] = $subdate;
                                                $temp_landline_array['temporary_status'] = $temporary_status;
                                                $temp_landline_array['default_route'] = $user_smsc_id;
                                                $temp_landline_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_landline_array['actual_credit'] = $actual_credit;
                                                $data_landline[] = $temp_landline_array;
                                                unset($temp_landline_array);
                                            }
                                            if (sizeof($data_landline)) {
                                                $res_landline = $this->db->insert_batch('sent_sms', $data_landline);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }


                                        // Insert Rejected List Numbers
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        if ($route == "A" && $dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "A" && $dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "C" && $stock_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "C" && $stock_dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "D" && $premium_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "D" && $premium_dnd_check == 1) {
                                            $dnd_check = 0;
                                        }

                                        // Insert Remaining Numbers
                                        if (sizeof($result_array)) {
                                            // DND Allowed
                                            if ($dnd_check) {
                                                // Get White Lists
                                                $white_list_array = array();
                                                $result_white_list = $this->sms_model->getWhiteLists();
                                                if ($result_white_list) {
                                                    $white_list_array = $result_white_list;
                                                }
                                                // Apply Ratio (Fake Delivered And Failed)
                                                if (sizeof($result_array) > 100) {
                                                    $result_array1 = array_diff($result_array, $white_list_array);
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    // Apply User Ratio
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    //apply spacial ratio 
                                                    $spacial_deliver_fake = 0;
                                                    if ($spacial_deliver_pr_ratio) {
                                                        $spacial_fake_ratio = (sizeof($result_array1) * $spacial_deliver_pr_ratio) / 100;
                                                        $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                    }
                                                    if ($spacial_deliver_fake) {
                                                        $new_size = sizeof($result_array1);
                                                        $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                        $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fake_sent = ($new_own_ratio * $pr_fake_sent) / 100;
                                                        $u_fake_sent = ROUND($user_fake_sent);
                                                        //$user_fail = ($new_own_ratio * $pr_user_fail_ratio) / 100;
                                                        //$u_fail = ROUND($user_fail);
                                                    } else {

                                                        $user_fake = (sizeof($result_array1) * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fail = (sizeof($result_array1) * $pr_user_fail_ratio) / 100;
                                                        $u_fail = ROUND($user_fail);
                                                        $user_fake_sent = (sizeof($result_array1) * $pr_fake_sent) / 100;
                                                        $u_fake_sent = ROUND($user_fake_sent);
                                                    }
//add both ratio                                   
                                                    if ($spacial_deliver_fake) {
                                                        $u_fake = $u_fake + $spacial_deliver_fake;
                                                    }


                                                    // Get Fake Delivered Number
                                                    if ($pr_user_fake_ratio) {
                                                        if ($u_fake) {
                                                            $data_fake = array();
                                                            $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                            $result_array1 = array_diff($result_array1, $fake_d_array);
                                                            foreach ($fake_d_array as $fake_number) {
                                                                $temp_fake_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 2;

                                                                $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_fake_array['campaign_id'] = $campaign_id;
                                                                $temp_fake_array['user_id'] = $user_id;
                                                                $temp_fake_array['msg_id'] = $msg_id;
                                                                $temp_fake_array['message'] = $message;
                                                                $temp_fake_array['msg_length'] = $length;
                                                                $temp_fake_array['mobile_no'] = $fake_number;
                                                                $temp_fake_array['status'] = $status;
                                                                $temp_fake_array['submit_date'] = $subdate;
                                                                $temp_fake_array['temporary_status'] = $temporary_status;
                                                                $temp_fake_array['default_route'] = $user_smsc_id;
                                                                $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_fake_array['actual_credit'] = $actual_credit;
                                                                $data_fake[] = $temp_fake_array;
                                                                unset($temp_fake_array);
                                                            }
                                                            if (sizeof($data_fake)) {
                                                                $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                            }
                                                        }
                                                    }

                                                    // Get Fake Failed Number
                                                    if ($pr_user_fail_ratio) {
                                                        if ($u_fail) {
                                                            $data_failed = array();
                                                            $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                            $result_array1 = array_diff($result_array1, $fake_f_array);
                                                            foreach ($fake_f_array as $failed_number) {
                                                                $temp_failed_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 3;

                                                                $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_failed_array['campaign_id'] = $campaign_id;
                                                                $temp_failed_array['user_id'] = $user_id;
                                                                $temp_failed_array['msg_id'] = $msg_id;
                                                                $temp_failed_array['message'] = $message;
                                                                $temp_failed_array['msg_length'] = $length;
                                                                $temp_failed_array['mobile_no'] = $failed_number;
                                                                $temp_failed_array['status'] = $status;
                                                                $temp_failed_array['submit_date'] = $subdate;
                                                                $temp_failed_array['temporary_status'] = $temporary_status;
                                                                $temp_failed_array['default_route'] = $user_smsc_id;
                                                                $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_failed_array['actual_credit'] = $actual_credit;
                                                                $data_failed[] = $temp_failed_array;
                                                                unset($temp_failed_array);
                                                            }
                                                            if (sizeof($data_failed)) {
                                                                $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }
                                                    }


                                                    // Get Fake sent Number
                                                    if ($pr_fake_sent) {
                                                        if ($u_fake_sent) {
                                                            $data_failed = array();
                                                            $fake_s_array = $this->sms_model->getRandomArray($result_array1, $u_fake_sent);
                                                            $result_array1 = array_diff($result_array1, $fake_s_array);
                                                            foreach ($fake_s_array as $fake_sent_number) {
                                                                $temp_sent_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "3";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 4;

                                                                $temp_sent_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_sent_array['campaign_id'] = $campaign_id;
                                                                $temp_sent_array['user_id'] = $user_id;
                                                                $temp_sent_array['msg_id'] = $msg_id;
                                                                $temp_sent_array['message'] = $message;
                                                                $temp_sent_array['msg_length'] = $length;
                                                                $temp_sent_array['mobile_no'] = $fake_sent_number;
                                                                $temp_sent_array['status'] = $status;
                                                                $temp_sent_array['submit_date'] = $subdate;
                                                                $temp_sent_array['temporary_status'] = $temporary_status;
                                                                $temp_sent_array['default_route'] = $user_smsc_id;
                                                                $temp_sent_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_sent_array['actual_credit'] = $actual_credit;
                                                                $data_fake_sent[] = $temp_sent_array;
                                                                unset($temp_sent_array);
                                                            }
                                                            if (sizeof($data_fake_sent)) {
                                                                $res_sent = $this->db->insert_batch('sent_sms', $data_fake_sent);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }
                                                    }
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//

                                                    $result = array_intersect($result_array, $white_list_array);
                                                    $result_array = array_merge($result_array1, $result);
                                                }

                                                // Send SMS                                              
                                                if (sizeof($result_array)) {
                                                    // If No SMSC Route Available
                                                    if ($user_smsc_id == 'XML') {
                                                        // Prepare XML
                                                        // Check Message Type
                                                        if ($message_type == 2) {
                                                            $unicode = 1;
                                                        } elseif ($message_type == 1) {
                                                            $unicode = 0;
                                                        }
                                                        $ssms_data = array();

                                                        $xml .= "<MESSAGE>";
                                                        $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                        $xml .= "<SENDER>$from</SENDER>";
                                                        $xml .= "<ROUTE>default</ROUTE>";
                                                        $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                        $xml .= "<FLASH>$flash_message</FLASH>";
                                                        $xml .= "<UNICODE>$unicode</UNICODE>";
                                                        $xml .= "<SMS TEXT='$message'>";
                                                        foreach ($result_array as $ndnd_number) {
                                                            $ssms_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            // Sent SMS
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);
                                                            // Add Numbers Into XML
                                                            $xml .= "<ADDRESS TO='$ndnd_number'></ADDRESS>";
                                                        }
                                                        $xml .= "</SMS>";
                                                        $xml .= "</MESSAGE>";
                                                        if (sizeof($ssms_data)) {
                                                            $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                            if ($reseller_key_balance_status) {
                                                                //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                                $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                            }
                                                        }
                                                    } else {
                                                        $ssms_data = array();
                                                        $sqlbox_data = array();
                                                        $loop = 0;
                                                        foreach ($result_array as $ndnd_number) {
                                                            $ssms_temp_array = array();
                                                            $sqlbox_temp_array = array();

                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;

                                                            // Sent SMS
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;

                                                            unset($ssms_temp_array);

                                                            $momt = "MT";
                                                            $sms_type = 2;
                                                            $dlr_url = $campaign_id;
                                                            // SQLBox Send SMS
                                                            $sqlbox_temp_array['momt'] = $momt;
                                                            $sqlbox_temp_array['sender'] = $from;
                                                            $sqlbox_temp_array['receiver'] = $ndnd_number;
                                                            $sqlbox_temp_array['msgdata'] = $message;
                                                            $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                            $sqlbox_temp_array['id'] = $campaign_id;
                                                            $sqlbox_temp_array['sms_type'] = $sms_type;
                                                            $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                            $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                            $sqlbox_temp_array['mclass'] = $mclass;
                                                            $sqlbox_temp_array['coding'] = $coding;
                                                            $sqlbox_temp_array['charset'] = $charset;
                                                            $sqlbox_data[] = $sqlbox_temp_array;
                                                            unset($sqlbox_temp_array);
                                                            $loop++;
                                                        }
                                                        if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                            $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                        }
                                                        if (sizeof($ssms_data)) {
                                                            $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                            //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                        }
                                                    }
                                                }
                                            } else {
                                                // Get White Lists
                                                $white_list_array = array();
                                                $result_white_list = $this->sms_model->getWhiteLists();
                                                if ($result_white_list) {
                                                    $white_list_array = $result_white_list;
                                                }
                                                // Custom DND Numbers
                                                $dnd_array = array();
                                                $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                                if ($result_dnd) {
                                                    $dnd_array = $result_dnd;
                                                    $dnd_array_size = sizeof($dnd_array);
                                                }

                                                // Non-DND Numbers
                                                $ndnd_result = array_diff($result_array, $dnd_array);

                                                // DND Numbers
                                                //$dnd_result = array_intersect($result_array, $dnd_array);

                                                if (sizeof($dnd_array)) {
                                                    $data_dnd = array();
                                                    foreach ($dnd_array as $dnd_number) {
                                                        $temp_dnd_array = array();
                                                        $deduct_balance++;
                                                        $status = "DND";
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_dnd_array['campaign_id'] = $campaign_id;
                                                        $temp_dnd_array['user_id'] = $user_id;
                                                        $temp_dnd_array['msg_id'] = $msg_id;
                                                        $temp_dnd_array['message'] = $message;
                                                        $temp_dnd_array['msg_length'] = $length;
                                                        $temp_dnd_array['mobile_no'] = $dnd_number;
                                                        $temp_dnd_array['status'] = $status;
                                                        $temp_dnd_array['submit_date'] = $subdate;
                                                        $temp_dnd_array['temporary_status'] = $temporary_status;
                                                        $temp_dnd_array['default_route'] = $user_smsc_id;
                                                        $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_dnd_array['actual_credit'] = $actual_credit;
                                                        $data_dnd[] = $temp_dnd_array;

                                                        unset($temp_dnd_array);
                                                    }
                                                    if (sizeof($data_dnd)) {
                                                        $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                        //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                    }
                                                }

                                                // Apply Ratio (Fake Delivered And Failed)
                                                if (sizeof($ndnd_result) > 100) {
                                                    // Get White List Numbers From User Request
                                                    $ndnd_result1 = array_diff($ndnd_result, $white_list_array);
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    // Apply User Ratio
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    //apply spacial ratio 
                                                    if ($spacial_deliver_pr_ratio) {
                                                        $spacial_fake_ratio = (sizeof($ndnd_result1) * $spacial_deliver_pr_ratio) / 100;
                                                        $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                    }


                                                    if ($spacial_deliver_fake) {
                                                        $new_size = sizeof($ndnd_result1);
                                                        $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                        $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fake_sent = ($new_own_ratio * $pr_fake_sent) / 100;
                                                        $u_fake_sent = ROUND($user_fake_sent);

                                                        //$user_fail = ($new_size * $pr_user_fail_ratio) / 100;
                                                        //$u_fail = ROUND($user_fail);
                                                    } else {

                                                        $user_fake = (sizeof($ndnd_result1) * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fail = (sizeof($ndnd_result1) * $pr_user_fail_ratio) / 100;
                                                        $u_fail = ROUND($user_fail);
                                                        $user_fake_sent = (sizeof($ndnd_result1) * $pr_fake_sent) / 100;
                                                        $u_fake_sent = ROUND($user_fake_sent);
                                                    }

                                                    //add both ratio
                                                    if ($spacial_deliver_fake) {
                                                        $u_fake = $u_fake + $spacial_deliver_fake;
                                                    }


                                                    // Get Fake Delivered Number
                                                    if ($pr_user_fake_ratio) {
                                                        if ($u_fake) {
                                                            $data_fake = array();
                                                            $fake_d_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fake);
                                                            $ndnd_result1 = array_diff($ndnd_result1, $fake_d_array);
                                                            foreach ($fake_d_array as $fake_number) {
                                                                $temp_fake_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 2;

                                                                $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_fake_array ['campaign_id'] = $campaign_id;
                                                                $temp_fake_array['user_id'] = $user_id;
                                                                $temp_fake_array['msg_id'] = $msg_id;
                                                                $temp_fake_array['message'] = $message;
                                                                $temp_fake_array['msg_length'] = $length;
                                                                $temp_fake_array['mobile_no'] = $fake_number;
                                                                $temp_fake_array['status'] = $status;
                                                                $temp_fake_array['submit_date'] = $subdate;
                                                                $temp_fake_array ['temporary_status'] = $temporary_status;
                                                                $temp_fake_array['default_route'] = $user_smsc_id;
                                                                $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_fake_array['actual_credit'] = $actual_credit;
                                                                $data_fake[] = $temp_fake_array;
                                                                unset($temp_fake_array);
                                                            }
                                                            if (sizeof($data_fake)) {
                                                                $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                            }
                                                        }
                                                    }

                                                    // Get Fake Failed Number
                                                    if ($pr_user_fail_ratio) {
                                                        if ($u_fail) {
                                                            $data_failed = array();
                                                            $fake_f_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fail);
                                                            $ndnd_result1 = array_diff($ndnd_result1, $fake_f_array);
                                                            foreach ($fake_f_array as $failed_number) {
                                                                $temp_failed_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 3;

                                                                $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_failed_array['campaign_id'] = $campaign_id;
                                                                $temp_failed_array['user_id'] = $user_id;
                                                                $temp_failed_array['msg_id'] = $msg_id;
                                                                $temp_failed_array['message'] = $message;
                                                                $temp_failed_array['msg_length'] = $length;
                                                                $temp_failed_array['mobile_no'] = $failed_number;
                                                                $temp_failed_array['status'] = $status;
                                                                $temp_failed_array ['submit_date'] = $subdate;
                                                                $temp_failed_array ['temporary_status'] = $temporary_status;
                                                                $temp_failed_array['default_route'] = $user_smsc_id;
                                                                $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_failed_array['actual_credit'] = $actual_credit;
                                                                $data_failed[] = $temp_failed_array;
                                                                unset($temp_failed_array);
                                                            }
                                                            if (sizeof($data_failed)) {
                                                                $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }
                                                    }

                                                    // Get Fake sent Number
                                                    if ($pr_fake_sent) {
                                                        if ($u_fake_sent) {
                                                            $data_fake_sent = array();
                                                            $fake_s_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fake_sent);
                                                            $ndnd_result1 = array_diff($ndnd_result1, $fake_s_array);
                                                            foreach ($fake_s_array as $fake_sent_number) {
                                                                $temp_sent_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "3";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 4;

                                                                $temp_sent_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_sent_array['campaign_id'] = $campaign_id;
                                                                $temp_sent_array['user_id'] = $user_id;
                                                                $temp_sent_array['msg_id'] = $msg_id;
                                                                $temp_sent_array['message'] = $message;
                                                                $temp_sent_array['msg_length'] = $length;
                                                                $temp_sent_array['mobile_no'] = $fake_sent_number;
                                                                $temp_sent_array['status'] = $status;
                                                                $temp_sent_array['submit_date'] = $subdate;
                                                                $temp_sent_array['temporary_status'] = $temporary_status;
                                                                $temp_sent_array['default_route'] = $user_smsc_id;
                                                                $temp_sent_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_sent_array['actual_credit'] = $actual_credit;
                                                                $data_fake_sent[] = $temp_sent_array;
                                                                unset($temp_sent_array);
                                                            }
                                                            if (sizeof($data_fake_sent)) {
                                                                $res_sent = $this->db->insert_batch('sent_sms', $data_fake_sent);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }
                                                    }
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    $result = array_intersect($ndnd_result, $white_list_array);
                                                    $ndnd_result = array_merge($ndnd_result1, $result);
                                                }
                                                // Send SMS
                                                if (sizeof($ndnd_result)) {

                                                    // If No SMSC Route Available
                                                    if ($user_smsc_id == 'XML') {
                                                        // Prepare XML
                                                        // Check Message Type
                                                        if ($message_type == 2) {
                                                            $unicode = 1;
                                                        } elseif ($message_type == 1) {
                                                            $unicode = 0;
                                                        }
                                                        $ssms_data = array();
                                                        $xml .= "<MESSAGE>";
                                                        $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                        $xml .= "<SENDER>$from</SENDER>";
                                                        $xml .= "<ROUTE>default</ROUTE>";
                                                        $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                        $xml .= "<FLASH>$flash_message</FLASH>";
                                                        $xml .= "<UNICODE>$unicode</UNICODE>";
                                                        $xml .= "<SMS TEXT='$message'>";
                                                        foreach ($ndnd_result as $ndnd_number) {
                                                            $ssms_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            // Sent SMS
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);
                                                            // Add Numbers Into XML
                                                            $xml .= "<ADDRESS TO='$ndnd_number'></ADDRESS>";
                                                        }
                                                        $xml .= "</SMS>";
                                                        $xml .= "</MESSAGE>";
                                                        if (sizeof($ssms_data)) {
                                                            $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                            //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                            if ($reseller_key_balance_status) {
                                                                $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                            }
                                                        }
                                                    } else {
                                                        $ssms_data = array();
                                                        $sqlbox_data = array();
                                                        $loop = 0;
                                                        foreach ($ndnd_result as $ndnd_number) {
                                                            $ssms_temp_array = array();
                                                            $sqlbox_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            // Sent SMS
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;

                                                            unset($ssms_temp_array);

                                                            $momt = "MT";
                                                            $sms_type = 2;
                                                            $dlr_url = $campaign_id;
                                                            //$alt_dcs = 1;
                                                            // SQLBox Send SMS
                                                            $sqlbox_temp_array['momt'] = $momt;
                                                            $sqlbox_temp_array['sender'] = $from;
                                                            $sqlbox_temp_array['receiver'] = $ndnd_number;
                                                            $sqlbox_temp_array['msgdata'] = $message;
                                                            $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                            $sqlbox_temp_array['id'] = $campaign_id;
                                                            $sqlbox_temp_array['sms_type'] = $sms_type;
                                                            $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                            $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                            $sqlbox_temp_array['mclass'] = $mclass;
                                                            $sqlbox_temp_array['coding'] = $coding;
                                                            //$sqlbox_temp_array['alt_dcs'] = $alt_dcs;
                                                            $sqlbox_temp_array['charset'] = $charset;
                                                            $sqlbox_data[] = $sqlbox_temp_array;
                                                            unset($sqlbox_temp_array);
                                                            $loop++;
                                                        }
                                                        if (sizeof($ssms_data)) {
                                                            $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                            //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                        }
                                                        if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                            $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                // $spacial_deliver_fake = 0;
                                //update spacial balance 
                                if ($reseller_key_balance_status) {
                                    $cal = $spacial_deliver_fake * $total_credits;
                                    $updated_key_balance = $updated_key_balance + $cal;
                                    $updated_key_balance = $updated_key_balance + ($dnd_array_size * $total_credits);
                                } else {
                                    if ($route == 'A') {
                                        $updated_key_balance = $special_pr_balance;
                                    }
                                    if ($route == 'C') {
                                        $updated_key_balance = $special_stock_credits;
                                    }
                                    if ($route == 'D') {
                                        $updated_key_balance = $special_prtodnd_credits;
                                    }

                                    //  $updated_key_balance = $special_pr_balance;
                                }

                                // Update User Balance

                                $balance_type = "PR";
                                if ($route == 'A') {
                                    $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                    $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                }
                                if ($route == 'C') {
                                    $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                    $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                }
                                if ($route == 'D') {
                                    $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                    $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                }



                                //  $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                // Total Deduction
                                $this->benchmark->mark('End_Time');
                                $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                $total_deduction = $deduct_balance * $total_credits;
                                $total_deduction = $total_deduction - ($dnd_array_size * $total_credits);
                                $data = array(
                                    'total_deducted' => $total_deduction,
                                    'actual_message' => $deduct_balance,
                                    'campaign_status' => $campaign_status,
                                    'total_time' => $total_time
                                );
                                if ($new_campaign_uid) {
                                    $data['campaign_uid'] = $new_campaign_uid;
                                }
                                $this->db->where('campaign_id', $campaign_id);
                                $this->db->update('campaigns', $data);

                                unset($ndnd_result);
                                unset($black_list_array);
                                unset($reject_list_array);
                                unset($white_list_array);
                                unset($dnd_array);
                                unset($ssms_data);

                                return "1";
                            } else {
                                $reason = "Promotional route is not assigned to user";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "102";
                            }
                        }
                    } elseif ($route == "B") {
                        $reseller_key_balance_status = 1;
                        $most_parent_id_reseller_status = 0;
                        // Check Available Balance And Send Number of Message
                        if ($tr_sms_balance < $actual_balance_required) {
                            $reason = "Insufficient Transactional Balance";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "101";
                        } else {
                            $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                            $mostParentID = $verifySpecialReseller->most_parent_id;
                            $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                            if ($mostParentID != 0) {
                                $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                                $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                            }

                            if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                                //check Special PR balance
                                if ($spacial_reseller_status) {
                                    $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                                } else {
                                    $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                                }

                                if ($special_tr_balance < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                } else {

                                    $updated_key_balance = $special_tr_balance - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }
                            }

                            // Transactional SMS (User Group)
                            if ($tr_user_group_id) {

                                // Alloted SMSC
                                $user_smsc_id = $result_user->tr_smsc;

                                //check vodafone approve sender ids  
                                $check_approve_sender_id = $this->sms_model->checkApproveSenderId($sender_id_type, $sender_id_length, $from);
                                if ($check_approve_sender_id) {

                                    $tr_user_group_id = $check_approve_sender_id->route;
                                    $this->db->select('smsc_id');
                                    $this->db->from('user_groups');
                                    $this->db->where('user_group_id', $tr_user_group_id);
                                    $query = $this->db->get();

                                    $user_smsc_id = $query->row('smsc_id');
                                }
                                /*
                                  //change routing according to number of sms in campaning.
                                  if ($total_messages > 100) {

                                  $tr_user_group_id = 33;
                                  $this->db->select('smsc_id');
                                  $this->db->from('user_groups');
                                  $this->db->where('user_group_id', $tr_user_group_id);
                                  $query = $this->db->get();

                                  $user_smsc_id = $query->row('smsc_id');

                                  }
                                 */

                                // If XML
                                $is_xml = 0;
                                $authentication = "";
                                $xml_url = "";

                                if ($user_smsc_id == 'XML') {
                                    $result_setting = $this->sms_model->getDefaultSettings();

                                    $authentication = $result_setting->xml_route_authkey;
                                    $xml_url = $result_setting->xml_route_url;
                                    $is_xml = 1;
                                }
                                // Check Numeric/Alphabetic/Alphanumeric Type
                                $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                                if ($check_sender_id) {
                                    $reason = "Invalid Sender Id";
                                    $log_by = "By Panel";
                                    $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                    return "Error: Please check your Sender ID!";
                                }

                                // Insert Campaign
                                $request_by = "By Panel";
                                $campaign_uid = strtolower(random_string('alnum', 24));
                                $total_messages = sizeof($result_array) + sizeof($bresult_array) + sizeof($landline_array);
                                $submit_date = date("Y-m-d H:i:s");

                                // Check Campaign
                                $this->benchmark->mark('G');
                                // Deduct SMS Balance
                                $deduct_balance = 0;
                                // If Message Content Blocked By Admin
                                if (sizeof($result_message_array) || $black_sender) {
                                    $check_keyword = 0;
                                    $check_sender = 0;
                                    if (sizeof($result_message_array)) {
                                        $check_keyword = 1;
                                    }
                                    if ($black_sender) {
                                        $check_sender = 1;
                                    }
                                    $check_black_listed = $check_keyword . "|" . $check_sender;
                                    $campaign_status = 2;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $tr_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'black_listed' => $check_black_listed,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $tr_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }


                                        //insert land line number 
                                        if (sizeof($landline_array)) {
                                            $data_landline = array();
                                            foreach ($landline_array as $landline_number) {
                                                $temp_landline_array = array();
                                                $status = 48;
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_landline_array['user_group_id'] = $tr_user_group_id;
                                                $temp_landline_array['campaign_id'] = $campaign_id;
                                                $temp_landline_array['user_id'] = $user_id;
                                                $temp_landline_array['msg_id'] = $msg_id;
                                                $temp_landline_array['message'] = $message;
                                                $temp_landline_array['msg_length'] = $length;
                                                $temp_landline_array['mobile_no'] = $landline_number;
                                                $temp_landline_array['status'] = $status;
                                                $temp_landline_array['submit_date'] = $subdate;
                                                $temp_landline_array['temporary_status'] = $temporary_status;
                                                $temp_landline_array['default_route'] = $user_smsc_id;
                                                $temp_landline_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_landline_array['actual_credit'] = $actual_credit;
                                                $data_landline[] = $temp_landline_array;
                                                unset($temp_landline_array);
                                            }
                                            if (sizeof($data_landline)) {
                                                $res_landline = $this->db->insert_batch('sent_sms', $data_landline);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }


                                        // Insert Rejected List Numbers
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        // Insert Remaining Numbers
                                        if (sizeof($result_array)) {
                                            // Check Sender Id
                                            $sender_condition = 0;
                                            if ($t_sender_id_option) { // Open
                                                $sender_condition = 1;
                                            } else {
                                                $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                                if ($result_sender_id) {
                                                    $sender_condition = 1;
                                                }
                                            }

                                            // Check Keyword
                                            $keyword_condition = 0;

                                            if ($keyword_option) { // Open
                                                $keyword_condition = 1;
                                            } else {
                                                $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                                if ($result_keyword) {
                                                    $keyword_condition = 1;
                                                }
                                            }


                                            // First Insert Into Database Then Check All Conditions
                                            if (sizeof($result_array)) {
                                                $ssms_data = array();
                                                foreach ($result_array as $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;

                                                    // Sent SMS
                                                    $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            }

                                            // Get Unique Numbers
                                            $total_unique = 0;
                                            $exceed_numbers = 0;
                                            $db_condition = 0;
                                            $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                            if ($result_numbers) {
                                                $total_unique = $result_numbers;
                                                $exceed_numbers = $total_unique - $number_allowed;
                                                if ($total_unique <= $number_allowed) {
                                                    $db_condition = 1;
                                                }
                                            }

                                            if ($reseller_key_balance_status) {
                                                $cal = $spacial_deliver_fake * $total_credits;
                                                $updated_key_balance = $updated_key_balance + $cal;
                                            } else {
                                                $updated_key_balance = $special_tr_balance;
                                            }


                                            // Update User Balance
                                            $balance_type = "TR";
                                            $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                            $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);
                                            //$response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                            // Total Deduction
                                            $this->benchmark->mark('End_Time');
                                            $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                            $data = array(
                                                'total_deducted' => $deduct_balance * $total_credits,
                                                'actual_message' => $deduct_balance,
                                                'sender_status' => $sender_condition,
                                                'keyword_status' => $keyword_condition,
                                                'number_db_status' => $db_condition,
                                                'unique_numbers' => $total_unique,
                                                'exceed_numbers' => $exceed_numbers,
                                                'campaign_status' => $campaign_status,
                                                'total_time' => $total_time
                                            );
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->update('campaigns', $data);
                                            return "1";
                                        }
                                    }
                                } else {
                                    $campaign_status = 1;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $tr_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        $this->benchmark->mark('H');
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $tr_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        //insert land line number 
                                        if (sizeof($landline_array)) {
                                            $data_landline = array();
                                            foreach ($landline_array as $landline_number) {
                                                $temp_landline_array = array();
                                                $status = 48;
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_landline_array['user_group_id'] = $tr_user_group_id;
                                                $temp_landline_array['campaign_id'] = $campaign_id;
                                                $temp_landline_array['user_id'] = $user_id;
                                                $temp_landline_array['msg_id'] = $msg_id;
                                                $temp_landline_array['message'] = $message;
                                                $temp_landline_array['msg_length'] = $length;
                                                $temp_landline_array['mobile_no'] = $landline_number;
                                                $temp_landline_array['status'] = $status;
                                                $temp_landline_array['submit_date'] = $subdate;
                                                $temp_landline_array['temporary_status'] = $temporary_status;
                                                $temp_landline_array['default_route'] = $user_smsc_id;
                                                $temp_landline_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_landline_array['actual_credit'] = $actual_credit;
                                                $data_landline[] = $temp_landline_array;
                                                unset($temp_landline_array);
                                            }
                                            if (sizeof($data_landline)) {
                                                $res_landline = $this->db->insert_batch('sent_sms', $data_landline);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        // Insert Rejected List Numbers
                                        $this->benchmark->mark('I');
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        $this->benchmark->mark('J');
                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            if ($check_demo_user && $tr_sms_balance <= 20) {
                                                $sender_condition = 1;
                                            } else {
                                                $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                                if ($result_sender_id) {
                                                    $sender_condition = 1;
                                                }
                                            }
                                        }

                                        // Check Keyword

                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            if ($check_demo_user && $tr_sms_balance <= 20) {
                                                $keyword_condition = 1;
                                            } else {
                                                $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                                if ($result_keyword) {
                                                    $keyword_condition = 1;
                                                }
                                            }
                                        }

                                        // First Insert SMS Into Database Then Apply Conditions
                                        $this->benchmark->mark('K');
                                        if (sizeof($result_array)) {
                                            $data1 = array();
                                            foreach ($result_array as $number) {
                                                $temp_array1 = array();
                                                $deduct_balance++;
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $tr_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = $message;
                                                $temp_array1['msg_length'] = $length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_array1['actual_credit'] = $actual_credit;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            }
                                            if (sizeof($data1)) {
                                                $res1 = $this->db->insert_batch('sent_sms', $data1);
                                                //$this->db->insert_batch('voice_msg_dlr', $data1);
                                            }
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }
                                        $this->benchmark->mark('L');

                                        // IF SENDER ID APPROVED, KEYWORD APPROVED AND DATABASE NOT EXCEED MORE THAN GIVEN LIMIT
                                        if ($sender_condition && $keyword_condition && $db_condition) {
                                            $sms_status = array('DND', 'Blocked', 'Rejected', '48');
                                            $this->db->select('mobile_no, message, status');
                                            $this->db->from('sent_sms');
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->where_not_in('status', $sms_status);
                                            $query = $this->db->get();
                                            if ($query->num_rows() > 0) {
                                                $result_array = array();
                                                $result_msg_array = array();
                                                foreach ($query->result() as $row) {
                                                    $result_array[] = $row->mobile_no;
                                                    $result_msg_array[] = $row->message;
                                                }
                                                // Get White Lists
                                                $white_list_array = array();
                                                $result_white_list = $this->sms_model->getWhiteLists();
                                                if ($result_white_list) {
                                                    $white_list_array = $result_white_list;
                                                }
                                                // Apply Ratio (Fake Delivered And Failed)
                                                if (sizeof($result_array) > 100) {
                                                    // Get white listed numbers from user request
                                                    $result_array1 = array_diff($result_array, $white_list_array);
                                                    $this->benchmark->mark('M');

                                                    //apply spacial ratio 
                                                    if ($spacial_deliver_tr_ratio) {
                                                        $spacial_fake_ratio = (sizeof($result_array1) * $spacial_deliver_tr_ratio) / 100;
                                                        $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                    }


                                                    if ($spacial_deliver_fake) {
                                                        $new_size = sizeof($result_array1);
                                                        $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                        $user_fake = ($new_own_ratio * $user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fake_sent = ($new_own_ratio * $tr_fake_sent) / 100;
                                                        $u_fake_sent = ROUND($user_fake_sent);
                                                        //$user_fail = ($new_size * $pr_user_fail_ratio) / 100;
                                                        //$u_fail = ROUND($user_fail);
                                                    } else {

                                                        $user_fake = (sizeof($result_array1) * $user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fail = (sizeof($result_array1) * $user_fail_ratio) / 100;
                                                        $u_fail = ROUND($user_fail);
                                                        $user_fake_sent = (sizeof($result_array1) * $tr_fake_sent) / 100;
                                                        $u_fake_sent = ROUND($user_fake_sent);
                                                    }
                                                    /*
                                                      // Apply User Ratio
                                                      $user_fake = (sizeof($result_array1) * $user_fake_ratio ) / 100;
                                                      $u_fake = ROUND($user_fake);
                                                      $user_fail = (sizeof($result_array1) * $user_fail_ratio ) / 100;
                                                      $u_fail = ROUND($user_fail);
                                                     */

                                                    if ($spacial_deliver_fake) {
                                                        $u_fake = $u_fake + $spacial_deliver_fake;
                                                    }

                                                    // Get Fake Delivered Number
                                                    if ($user_fake_ratio) {
                                                        if ($u_fake) {
                                                            $data_fake = array();
                                                            $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                            $result_array1 = array_diff($result_array1, $fake_d_array);
                                                            foreach ($fake_d_array as $fake_number) {
                                                                $data = array(
                                                                    'temporary_status' => 2
                                                                );
                                                                $this->db->where('campaign_id', $campaign_id);
                                                                $this->db->where('mobile_no', $fake_number);
                                                                $this->db->update('sent_sms', $data);
                                                            }
                                                        }
                                                    }

                                                    // Get Fake Failed Number
                                                    if ($user_fail_ratio) {
                                                        if ($u_fail) {
                                                            $data_failed = array();
                                                            $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                            $result_array1 = array_diff($result_array1, $fake_f_array);
                                                            foreach ($fake_f_array as $failed_number) {
                                                                $data = array(
                                                                    'temporary_status' => 3
                                                                );
                                                                $this->db->where('campaign_id', $campaign_id);
                                                                $this->db->where('mobile_no', $failed_number);
                                                                $this->db->update('sent_sms', $data);
                                                            }
                                                        }
                                                    }

                                                    // Get Fake sent Number
                                                    if ($tr_fake_sent) {
                                                        if ($u_fake_sent) {
                                                            $data_failed = array();
                                                            $fake_s_array = $this->sms_model->getRandomArray($result_array1, $u_fake_sent);
                                                            $result_array1 = array_diff($result_array1, $fake_s_array);
                                                            foreach ($fake_s_array as $fake_sent_number) {
                                                                $data = array(
                                                                    'temporary_status' => 4,
                                                                    'status' => 3
                                                                );
                                                                $this->db->where('campaign_id', $campaign_id);
                                                                $this->db->where('mobile_no', $fake_sent_number);
                                                                $this->db->update('sent_sms', $data);
                                                            }
                                                        }
                                                    }

                                                    $result = array_intersect($result_array, $white_list_array);
                                                    $result_array = array_merge($result_array1, $result);
                                                }

                                                // If No SMSC Route Available
                                                if ($user_smsc_id == 'XML') {
                                                    if (sizeof($result_array)) {
                                                        // Prepare XML
                                                        // Check Message Type
                                                        if ($message_type == 2) {
                                                            $unicode = 1;
                                                        } elseif ($message_type == 1) {
                                                            $unicode = 0;
                                                        }
                                                        $xml .= "<MESSAGE>";
                                                        $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                        $xml .= "<SENDER>$from</SENDER>";
                                                        $xml .= "<ROUTE>Template</ROUTE>";
                                                        $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                        $xml .= "<FLASH>$flash_message</FLASH>";
                                                        $xml .= "<UNICODE>$unicode</UNICODE>";
                                                        foreach ($result_array as $key => $number) {
                                                            $xml .= "<SMS TEXT='$result_msg_array[$key]'>";
                                                            $xml .= "<ADDRESS TO='$number'></ADDRESS>";
                                                            $xml .= "</SMS>";
                                                        }
                                                        $xml .= "</MESSAGE>";
                                                        if ($reseller_key_balance_status) {
                                                            $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                        }
                                                    }
                                                } else {
                                                    // Insert Data Sent SMS Table To SQLBox Send SMS Table
                                                    $momt = "MT";
                                                    $sms_type = 2;
                                                    $dlr_mask = "31";
                                                    if (sizeof($result_array)) {
                                                        $data_array = array();
                                                        foreach ($result_array as $key => $number) {
                                                            $data_array[] = array(
                                                                'momt' => $momt,
                                                                'sender' => $from,
                                                                'receiver' => $number,
                                                                'msgdata' => $result_msg_array[$key],
                                                                'smsc_id' => $user_smsc_id,
                                                                'id' => $campaign_id,
                                                                'sms_type' => $sms_type,
                                                                'dlr_mask' => $dlr_mask,
                                                                'dlr_url' => $campaign_id,
                                                                'mclass' => $mclass,
                                                                'coding' => $coding,
                                                                'charset' => $charset,
                                                                'alt_dcs' => $alt_dcs
                                                            );
                                                        }
                                                        if (sizeof($data_array) && $reseller_key_balance_status && $approval_status) {
                                                            $res_success = $this->db->insert_batch('sqlbox_send_sms', $data_array);
                                                        }
                                                    }
                                                }

                                                /*
                                                  // Campaign Status
                                                  $data = array(
                                                  'campaign_status' => 1
                                                  );
                                                  $this->db->where('campaign_id', $campaign_id);
                                                  $this->db->update('campaigns', $data);
                                                 */
                                            }
                                            //update spacial balance 
                                            //  $spacial_deliver_fake = 0;
                                            $updated_key_balance;

                                            if ($reseller_key_balance_status) {
                                                $cal = $spacial_deliver_fake * $total_credits;
                                                $updated_key_balance = $updated_key_balance + $cal;
                                            } else {
                                                $updated_key_balance = $special_tr_balance;
                                            }

                                            $balance_type = "TR";
                                            $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                            $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                            //$response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                            // Total Deduction
                                            $this->benchmark->mark('End_Time');
                                            $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                            $data = array(
                                                'total_deducted' => $deduct_balance * $total_credits,
                                                'actual_message' => $deduct_balance,
                                                'sender_status' => $sender_condition,
                                                'keyword_status' => $keyword_condition,
                                                'number_db_status' => $db_condition,
                                                'unique_numbers' => $total_unique,
                                                'exceed_numbers' => $exceed_numbers,
                                                'campaign_status' => $campaign_status,
                                                'total_time' => $total_time
                                            );
                                            if ($new_campaign_uid) {
                                                $data['campaign_uid'] = $new_campaign_uid;
                                            }
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->update('campaigns', $data);
                                            return "1";
                                        } else {

                                            //update spacial balance 
                                            if ($reseller_key_balance_status) {
                                                $cal = $spacial_deliver_fake * $total_credits;
                                                $updated_key_balance = $updated_key_balance + $cal;
                                            } else {
                                                $updated_key_balance = $special_tr_balance;
                                            }


                                            $balance_type = "TR";
                                            $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                            $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);
                                            //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                            // Total Deduction
                                            $this->benchmark->mark('End_Time');
                                            $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                            $data = array(
                                                'total_deducted' => $deduct_balance * $total_credits,
                                                'actual_message' => $deduct_balance,
                                                'campaign_status' => 2,
                                                'sender_status' => $sender_condition,
                                                'keyword_status' => $keyword_condition,
                                                'number_db_status' => $db_condition,
                                                'unique_numbers' => $total_unique,
                                                'exceed_numbers' => $exceed_numbers,
                                                'total_time' => $total_time
                                            );
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->update('campaigns', $data);
                                            /*
                                              echo $a1 = $this->benchmark->elapsed_time('A', 'B');
                                              echo "<br/>";
                                              echo $a2 = $this->benchmark->elapsed_time('B', 'C');
                                              echo "<br/>";
                                              echo $a3 = $this->benchmark->elapsed_time('C', 'D');
                                              echo "<br/>";
                                              echo $a4 = $this->benchmark->elapsed_time('D', 'E');
                                              echo "<br/>";
                                              echo $a5 = $this->benchmark->elapsed_time('E', 'F');
                                              echo "<br/>";
                                              echo $a6 = $this->benchmark->elapsed_time('F', 'G');
                                              echo "<br/>";
                                              echo $a7 = $this->benchmark->elapsed_time('G', 'H');
                                              echo "<br/>";
                                              echo $a8 = $this->benchmark->elapsed_time('H', 'I');
                                              echo "<br/>";
                                              echo $a9 = $this->benchmark->elapsed_time('I', 'J');
                                              echo "<br/>";
                                              echo $a10 = $this->benchmark->elapsed_time('J', 'K');
                                              echo "<br/>";
                                              echo $a11 = $this->benchmark->elapsed_time('K', 'L');
                                              echo "<br/>";
                                              echo $a1 + $a2 + $a3 + $a4 + $a5 + $a6 + $a7 + $a8 + $a9 + $a10 + $a11;
                                              die;
                                             */
                                            return "1";
                                        }
                                    }
                                }
                            } else {
                                $reason = "Transactional route is not assigned to user";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "102";
                            }
                        }
                    }
                } else {
                    return "105";
                }
                // }
            } else {
                return 106;
            }
        } else {
            return 106;
        }
    }

    // Schedule SMS
    function saveScheduleSMS($user_id = 0) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);

        /*  $this->db->select('country_status');
          $this->db->from('users');
          $this->db->where('user_id', $user_id);
          $query = $this->db->get();
          $query1 = $query->row();
          $country_status = $query1->country_status;
         * 
         */

        if ($result_user) {
            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $prtodnd_balance = $result_user->prtodnd_balance;
            $stock_balance = $result_user->stock_balance;
            $prtodnd_user_group_id = $result_user->prtodnd_route;
            $stock_user_group_id = $result_user->stock_route;
            $international_balance = $result_user->international_balance;
            $international_user_group_id = $result_user->international_route;
            $number_allowed = $result_user->number_allowed;
            $p_sender_id_option = $result_user->p_sender_id_option;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $dnd_check = $result_user->dnd_check;
            $premium_dnd_check = $result_user->premium_dnd_check;
            $stock_dnd_check = $result_user->stock_dnd_check;
            $pro_user_group_id = $result_user->pro_user_group_id;
            $tr_user_group_id = $result_user->tr_user_group_id;
            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $spacial_deliver_pr_ratio = $result_user->spacial_deliver_pr_ratio;
            $spacial_deliver_tr_ratio = $result_user->spacial_deliver_tr_ratio;
            $admin_approval_status = $result_user->pricing_approval;
            // Check Account Type
            $admin_id = $result_user->admin_id;
            $ref_user_id = $result_user->ref_user_id;
            $check_demo_user = $result_user->check_demo_user;

            // Post Fields
            $campaign_name = $this->input->post('campaign_name');
            $route = $this->input->post('route');
            if ($this->input->post('sender_id') && $route == "I") {
                $from = $this->input->post('sender_id');
                $message_type = $this->input->post('message_type');
                $message = $this->input->post('message');
            } else {
                $from = $this->input->post('sender');
                $from = preg_replace('/[^A-Za-z\-]/', '', $from);
                $from = str_replace('-', '', $from);
                $message_type = $this->input->post('message_type');
                $message = $this->input->post('message');
                if (strlen($from) < 6) {
                    return "112";
                }
            }

            // $from = $this->input->post('sender');
            //$message_type = $this->input->post('message_type');
            // $message = $this->input->post('message');
            // Calculate Credit
            $total_credits = 0;
            $length = strlen(utf8_decode($message));
            $actual = str_replace(' ', '', $message);
            $actual_credit = strlen($actual);
            // Calculate Credits
            $charset = "ASCII";
            $coding = 0;
            $total_credits = 0;
            $result_credits = $this->sms_model->getSMSCredits($message_type, $length, $message);
            if ($result_credits) {
                $charset = $result_credits['charset'];
                $coding = $result_credits['coding'];
                $total_credits = $result_credits['credits'];
            }
            if ($total_credits) {
                $current_date = date('Y-m-d h:i:00');
                $schedule_time = $this->input->post('schedule_date');
                if ($current_date > $schedule_time) {
                    return 108;
                }
                $mobile_array = array();
                $result_array = array();
                if ($route == "I" && $this->input->post('mobile_numbers_out')) {
                    $mobile_numbers = $this->input->post('mobile_numbers_out');
                } else {
                    $mobile_numbers = $this->input->post('mobile_numbers');
                }

                //$mobile_numbers = $this->input->post('mobile_numbers');
                $mobiles = $this->input->post('mobiles');
                $temp_file_name = date('dmYhis') . "-" . $user_id;
                $config['file_name'] = $temp_file_name;
                $config['upload_path'] = './Temp_CSV_Files/';
                $config['allowed_types'] = '*';
                $this->load->library('upload', $config);
                if ($mobile_numbers != "" && !$this->upload->do_upload()) {
                    $output = preg_replace('!\s+!', ' ', $mobile_numbers);
                    $output = preg_replace('!\s+!', ',', $output);
                    $result_array = explode(',', $output);
                    $result_array = array_diff($result_array, array(''));
                } elseif ($mobile_numbers == "" && $this->upload->do_upload('mobiles')) {
                    $uploaded_file = explode('.', $_FILES['mobiles']['name']);
                    $extension = $uploaded_file[1];
                    if ($extension == 'csv' || $extension == 'xls' || $extension == 'xlsx') {
                        $myfile = "./Temp_CSV_Files/" . $temp_file_name . ".csv";
                        $mobile_array = $this->csv_reader->parse_file($myfile, false);
                        $result_array = array_unique($mobile_array);
                    } else {
                        return 107;
                    }
                } elseif ($mobile_numbers != "" && !$this->upload->do_upload()) {
                    $result_array = explode(',', $mobile_numbers);
                }

                // Check Mobile Numbers
                $flag = 0;
                $new_array = array();


                if ($route == "I") {
                    if (sizeof($result_array)) {
                        foreach ($result_array as $mobile) {
                            $new_array[] = $mobile;
                        }
                    }
                } else {
                    if (sizeof($result_array)) {
                        foreach ($result_array as $mobile) {
                            if (strlen($mobile) == 10) {
                                if (substr($mobile, 0, 1) > 5) {
                                    $new_array[] = "91" . $mobile;
                                } else {
                                    $landline_array[] = "91" . $mobile;
                                }
                            } elseif (strlen($mobile) == 12) {
                                if (substr($mobile, 0, 1) > 5) {
                                    $new_array[] = $mobile;
                                } else {
                                    $landline_array[] = $mobile;
                                }
                            } else {
                                
                            }
                        }
                    }
                }



//                if (sizeof($result_array)) {
//                    foreach ($result_array as $mobile) {
//                        if (strlen($mobile) == 10) {
//                            if (substr($mobile, 0, 1) > 5) {
//                                $new_array[] = "91" . $mobile;
//                            } else {
//                                $landline_array[] = "91" . $mobile;
//                            }
//                        } elseif (strlen($mobile) == 12) {
//                            if (substr($mobile, 0, 1) > 5) {
//                                $new_array[] = $mobile;
//                            } else {
//                                $landline_array[] = $mobile;
//                            }
//                        } else {
//                            
//                        }
//                    }
//                }
                // Some Mobile Numbers are invalid!
                //  if ($flag > 0) {
                //   return "104";
                //} 
                // Get Contacts From Groups
                $select_contact_array = array();
                if ($this->input->post('check_group')) {
                    $selected_groups_array = $this->input->post('check_group');
                    if (sizeof($selected_groups_array)) {
                        $result_contacts = $this->sms_model->getGroupsContacts($user_id);
                        if ($result_contacts) {
                            foreach ($result_contacts as $row_contact) {
                                $contact_groups_array = explode(',', $row_contact['contact_group_ids']);
                                $array_intersect = array_intersect($selected_groups_array, $contact_groups_array);
                                if (sizeof($array_intersect)) {
                                    if (strlen($row_contact['mobile_number']) == 10) {
                                        $select_contact_array[] = "91" . $row_contact['mobile_number'];
                                    } elseif (strlen($row_contact['mobile_number']) == 12) {
                                        $select_contact_array[] = $row_contact['mobile_number'];
                                    }
                                }
                            }
                        }
                    }
                }

                $result_array = array_unique(array_merge($new_array, $select_contact_array));

                // Total Submitted
                $total_messages = sizeof($result_array);
                $actual_balance_required = $total_messages * $total_credits;

                // Wrong Numbers
                $reject_list_array = array();

                if (sizeof($result_array)) {
                    foreach ($result_array as $mobile) {
                        //  if (substr($mobile, 0, 2) != 91) {
                        //     $reject_list_array[] = $mobile;
                        //  }
                    }
                }

                $result_array = array_diff($result_array, $reject_list_array);

                // Check Black List Sender Id
                $black_sender = $this->sms_model->checkBlackSenderIds($from);

                // Get Black Listed Keywrods
                $black_keyword_array = array();
                $result_black_keywords = $this->sms_model->getBlackKeywords();
                if ($result_black_keywords) {
                    foreach ($result_black_keywords as $row_bkeyword) {
                        $bkeyword = preg_replace('/\s+/', ' ', urldecode($row_bkeyword['black_keyword']));
                        $bkeyword_array = explode(' ', $bkeyword);
                        $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                    }
                }
                $black_keyword_array = array_map('strtolower', $black_keyword_array);
                $black_keyword_array = array_filter($black_keyword_array);
                $message_array = explode(' ', preg_replace('/\s+/', ' ', $message));
                $message_array = array_map('strtolower', $message_array);
                $result_message_array = array_intersect($black_keyword_array, $message_array);

                // Get Black Lists & Remove Black List Numbers                                
                $black_list_array = array();
                $bresult_array = array();
                $result_black_list = $this->sms_model->getBlackLists();
                if ($result_black_list) {
                    $black_list_array = $result_black_list;
                    $bresult_array = array_intersect($result_array, $black_list_array);
                    $result_array = array_diff($result_array, $black_list_array);
                }

                // Flash SMS
                $flash_message = 0;
                if ($this->input->post('flash_message')) {
                    $flash_message = $this->input->post('flash_message');
                }

                // Check Account Type (Demo | Active)
                if ($check_demo_user) {
                    if ($admin_id) {
                        $result_info = $this->sms_model->getDefaultSettings();
                        if ($result_info) {
                            if ($result_info->demo_sender != "")
                                $from = $result_info->demo_sender;
                            else
                                $from = "BLKSMS";
                            if ($result_info->demo_message != "")
                                $message = $result_info->demo_message;
                        }
                    } elseif ($ref_user_id) {
                        $result_info = $this->sms_model->getUserSettings($ref_user_id);
                        if ($result_info) {
                            if ($result_info->demo_sender != "")
                                $from = $result_info->demo_sender;
                            else
                                $from = "BLKSMS";
                            if ($result_info->demo_message != "")
                                $message = $result_info->demo_message;
                        }
                    }
                }

                $approval_status = 1;
                $remainNumberOfSMS = 0;
//                // check pricing for message approval
//                $pricing_array = array();
//                $pricing_array = $this->user_data_model->checkPricing($user_id);
//                if ($pricing_array) {
//                    $txn_id = $pricing_array[0]['txn_log_id'];
//                    $pricing = $pricing_array[0]['txn_price'];
//                    $tax_status = $pricing_array[0]['tax_status'];
//                    $numberOfSMS = $pricing_array[0]['no_of_send_sms'];
//
//
//                    if ($admin_approval_status == 0) {
//                        if ($tax_status == 1) {
//                            if ($pricing < .035) {
//                                if ($numberOfSMS == 0) {
//                                    $approval_status = 0;
//                                } else {
//                                    if ($numberOfSMS < $actual_balance_required) {
//                                        $approval_status = 0;
//                                    } else {
//                                        $approval_status = 1;
//                                        $remainNumberOfSMS = $numberOfSMS - $actual_balance_required;
//                                        $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
//                                    }
//                                }
//                            } else {
//                                $approval_status = 1;
//                            }
//                        } elseif ($tax_status == 0) {
//                            if ($pricing < .05) {
//                                if ($numberOfSMS == 0) {
//                                    $approval_status = 0;
//                                } else {
//                                    if ($numberOfSMS < $actual_balance_required) {
//                                        $approval_status = 0;
//                                    } else {
//                                        $approval_status = 1;
//                                        $remainNumberOfSMS = $numberOfSMS - $actual_balance_required;
//                                        $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
//                                    }
//                                }
//                            } else {
//                                $approval_status = 1;
//                            }
//                        }
//                    }
//                }
//                $approval_status;

                $pricing_error = 0;
                if ($approval_status == 0) {
                    $pricing_error = 420;
                }

                // URL Encoding
                $message = urlencode($message);

                if (sizeof($result_array) || sizeof($reject_list_array) || sizeof($bresult_array)) {
                    // Promotional SMS
                    $balance_status = 1;
                    if ($route == "A" || $route == "C" || $route == "D" || $route == "I") {

                        if ($route == 'A' && $pr_sms_balance < $actual_balance_required) {
                            $balance_status = 0;
                        }
                        if ($route == 'C' && $stock_balance < $actual_balance_required) {
                            $balance_status = 0;
                        }
                        if ($route == 'D' && $prtodnd_balance < $actual_balance_required) {
                            $balance_status = 0;
                        }
                        if ($route == 'I' && $international_balance < $actual_balance_required) {
                            $balance_status = 0;
                        }

                        $reseller_key_balance_status = 1;
                        $most_parent_id_reseller_status = 0;
                        // Check Available Balance And Send Number of Message
                        if ($balance_status == 0) {
                            $reason = "Insufficient Promotional Balance";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "101";
                        } else {

                            //special reseller

                            $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                            $mostParentID = $verifySpecialReseller->most_parent_id;
                            $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                            if ($mostParentID != 0) {
                                $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                                $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                            }

                            if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                                //check Special PR balance
                                if ($spacial_reseller_status) {
                                    $special_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                                    $special_pr_balance = $special_balance->special_pr_balance;
                                    $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                    $special_stock_credits = $special_balance->stock_credits;
                                } else {
                                    $special_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                                    $special_pr_balance = $special_balance->special_pr_balance;
                                    $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                    $special_stock_credits = $special_balance->stock_credits;
                                }

                                if ($route == 'A' && $special_pr_balance < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                }
                                if ($route == 'C' && $special_stock_credits < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                }
                                if ($route == 'D' && $special_prtodnd_credits < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                }

                                /*   if ($special_pr_balance < $actual_balance_required) {
                                  $reseller_key_balance_status = 0;
                                  } else {

                                  $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                  $reseller_key_balance_status = 1;
                                  } */
                                if ($reseller_key_balance_status == 0) {
                                    $reseller_key_balance_status = 0;
                                } else {
                                    if ($route == 'A') {
                                        $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                        $reseller_key_balance_status = 1;
                                    }
                                    if ($route == 'C') {
                                        $updated_key_balance = $special_stock_credits - $actual_balance_required;
                                        $reseller_key_balance_status = 1;
                                    }
                                    if ($route == 'D') {
                                        $updated_key_balance = $special_prtodnd_credits - $actual_balance_required;
                                        $reseller_key_balance_status = 1;
                                    }

                                    // $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                    // $reseller_key_balance_status = 1;
                                }
                            }

                            // Promotional SMS (User Group)
                            if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id || $international_user_group_id) {

                                if ($route == 'A') {
                                    $user_smsc_id = $result_user->pr_smsc;
                                    $pro_user_group_id = $pro_user_group_id;
                                }
                                if ($route == 'D') {
                                    $user_smsc_id = $result_user->prtodnd_smsc;
                                    $pro_user_group_id = $prtodnd_user_group_id;
                                }
                                if ($route == 'C') {
                                    $user_smsc_id = $result_user->stock_smsc;
                                    $pro_user_group_id = $stock_user_group_id;
                                }
                                if ($route == 'I') {
                                    $user_smsc_id = $result_user->international_smsc;
                                    $pro_user_group_id = $international_user_group_id;
                                }

                                //  $user_smsc_id = $result_user->pr_smsc;
                                // If XML
                                $is_xml = 0;
                                if ($user_smsc_id == 'XML') {
                                    $is_xml = 1;
                                }
                                // Check Sender Id (Open/Close)
                                if ($p_sender_id_option == 0) {
                                    $from = "BLKSMS"; // random_string('numeric', 6);
                                }

                                // Insert Campaign
                                $request_by = "By Panel";
                                $campaign_uid = strtolower(random_string('alnum', 24));
                                $submit_date = date("Y-m-d H:i:s");

                                // Deduct SMS Balance
                                $deduct_balance = 0;
                                // If Message Content Bloaked By Admin
                                if (sizeof($result_message_array) || $black_sender) {
                                    $check_keyword = 0;
                                    $check_sender = 0;
                                    if (sizeof($result_message_array)) {
                                        $check_keyword = 1;
                                    }
                                    if ($black_sender) {
                                        $check_sender = 1;
                                    }
                                    $check_black_listed = $check_keyword . "|" . $check_sender;
                                    $message_category = 2;
                                    $campaign_status = 2;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $pro_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'message_category' => $message_category,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'schedule_date' => $schedule_time,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'black_listed' => $check_black_listed,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        // Insert Rejected List Numbers
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        if ($route == "A" && $dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "A" && $dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "C" && $stock_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "C" && $stock_dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "D" && $premium_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "D" && $premium_dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "I") {
                                            $dnd_check = 0;
                                        }


                                        // Insert Remaining Numbers
                                        if (sizeof($result_array)) {
                                            // DND Allowed
                                            if ($dnd_check) {
                                                if (sizeof($result_array)) {
                                                    $ssms_data = array();
                                                    foreach ($result_array as $ndnd_number) {
                                                        $ssms_temp_array = array();
                                                        $sqlbox_temp_array = array();
                                                        $count_messages++;
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $message;
                                                        $ssms_temp_array['msg_length'] = $length;
                                                        $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_temp_array['actual_credit'] = $actual_credit;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);
                                                    }
                                                    if (sizeof($ssms_data)) {
                                                        $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                        //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    }
                                                }
                                            } else {
                                                // Custom DND Numbers
                                                $dnd_array = array();

                                                $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                                if ($result_dnd) {
                                                    $dnd_array = $result_dnd;
                                                    $dnd_array_size = sizeof($dnd_array);
                                                }

                                                // Non-DND Numbers
                                                $ndnd_result = array_diff($result_array, $dnd_array);

                                                // DND Numbers
                                                // $dnd_result = array_intersect($result_array, $dnd_array);
                                                if (sizeof($dnd_array)) {
                                                    $data_dnd = array();
                                                    foreach ($dnd_array as $dnd_number) {
                                                        $temp_dnd_array = array();
                                                        $status = "DND";
                                                        $count_messages++;
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_dnd_array['campaign_id'] = $campaign_id;
                                                        $temp_dnd_array['user_id'] = $user_id;
                                                        $temp_dnd_array['msg_id'] = $msg_id;
                                                        $temp_dnd_array['message'] = $message;
                                                        $temp_dnd_array['msg_length'] = $length;
                                                        $temp_dnd_array['mobile_no'] = $dnd_number;
                                                        $temp_dnd_array['status'] = $status;
                                                        $temp_dnd_array['submit_date'] = $subdate;
                                                        $temp_dnd_array['temporary_status'] = $temporary_status;
                                                        $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_dnd_array['actual_credit'] = $actual_credit;
                                                        $data_dnd[] = $temp_dnd_array;
                                                        unset($temp_dnd_array);
                                                    }
                                                    if (sizeof($data_dnd)) {
                                                        $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                        //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                    }
                                                }

                                                // Get White List Numbers From User Request
                                                if (sizeof($ndnd_result)) {
                                                    $ssms_data = array();
                                                    foreach ($ndnd_result as $ndnd_number) {
                                                        $ssms_temp_array = array();
                                                        $count_messages++;
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $message;
                                                        $ssms_temp_array['msg_length'] = $length;
                                                        $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_temp_array['actual_credit'] = $actual_credit;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);
                                                    }
                                                    if (sizeof($ssms_data)) {
                                                        $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                        //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    }
                                                }
                                            }
                                        }



                                        // Update User Balance
                                        /* $balance_type = "PR";
                                          $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                          //   $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                          $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */

                                        //update spacial balance 
                                        if ($reseller_key_balance_status) {
                                            $cal = $spacial_deliver_fake * $total_credits;
                                            $updated_key_balance = $updated_key_balance + $cal;
                                            $updated_key_balance = $updated_key_balance + ($dnd_array_size * $total_credits);
                                        } else {
                                            if ($route == 'A') {
                                                $updated_key_balance = $special_pr_balance;
                                            }
                                            if ($route == 'C') {
                                                $updated_key_balance = $special_stock_credits;
                                            }
                                            if ($route == 'D') {
                                                $updated_key_balance = $special_prtodnd_credits;
                                            }
                                        }
                                        // Update User Balance

                                        $balance_type = "PR";
                                        if ($route == 'A') {
                                            $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }
                                        if ($route == 'C') {
                                            $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }
                                        if ($route == 'D') {
                                            $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }
                                        if ($route == 'I') {
                                            $updated_sms_balance = $international_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                        // Update Actual Message
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $total_deduction = $deduct_balance * $total_credits;
                                        $total_deduction = $total_deduction - ($dnd_array_size * $total_credits);
                                        $data = array(
                                            'total_deducted' => $total_deduction,
                                            'actual_message' => $deduct_balance,
                                            'campaign_status' => $campaign_status,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    $message_category = 2;
                                    $campaign_status = 1;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $pro_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'message_category' => $message_category,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'schedule_date' => $schedule_time,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        // Insert Rejected List Numbers
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        if ($route == "A" && $dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "A" && $dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "C" && $stock_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "C" && $stock_dnd_check == 1) {
                                            $dnd_check = 0;
                                        } else if ($route == "D" && $premium_dnd_check == 0) {
                                            $dnd_check = 1;
                                        } else if ($route == "D" && $premium_dnd_check == 1) {
                                            $dnd_check = 1;
                                        }


                                        // Insert Remaining Numbers
                                        if (sizeof($result_array)) {
                                            // DND Allowed
                                            if ($dnd_check) {
                                                // Get White Lists
                                                $white_list_array = array();
                                                $result_white_list = $this->sms_model->getWhiteLists();
                                                if ($result_white_list) {
                                                    $white_list_array = $result_white_list;
                                                }

                                                // Apply Ratio (Fake Delivered And Failed)
                                                if (sizeof($result_array) > 100) {
                                                    // Get White List Numbers From User Request
                                                    $result_array1 = array_diff($result_array, $white_list_array);
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    // Apply User Ratio
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    $spacial_deliver_fake = 0;
                                                    if ($spacial_deliver_pr_ratio) {
                                                        $spacial_fake_ratio = (sizeof($result_array1) * $spacial_deliver_pr_ratio) / 100;
                                                        $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                    }
                                                    if ($spacial_deliver_fake) {
                                                        $new_size = sizeof($result_array1);
                                                        $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                        $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        //$user_fail = ($new_own_ratio * $pr_user_fail_ratio) / 100;
                                                        //$u_fail = ROUND($user_fail);
                                                    } else {

                                                        $user_fake = (sizeof($result_array1) * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fail = (sizeof($result_array1) * $pr_user_fail_ratio) / 100;
                                                        $u_fail = ROUND($user_fail);
                                                    }
//add both ratio                                   
                                                    if ($spacial_deliver_fake) {
                                                        $u_fake = $u_fake + $spacial_deliver_fake;
                                                    }


                                                    // Get Fake Delivered Number
                                                    if ($pr_user_fake_ratio) {
                                                        if ($u_fake) {
                                                            $data_fake = array();
                                                            $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                            $result_array1 = array_diff($result_array1, $fake_d_array);
                                                            foreach ($fake_d_array as $fake_number) {
                                                                $temp_fake_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");

                                                                $temporary_status = 2;

                                                                $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_fake_array ['campaign_id'] = $campaign_id;
                                                                $temp_fake_array['user_id'] = $user_id;
                                                                $temp_fake_array['msg_id'] = $msg_id;
                                                                $temp_fake_array['message'] = $message;
                                                                $temp_fake_array['msg_length'] = $length;
                                                                $temp_fake_array['mobile_no'] = $fake_number;
                                                                $temp_fake_array['status'] = $status;
                                                                $temp_fake_array['submit_date'] = $subdate;
                                                                $temp_fake_array ['temporary_status'] = $temporary_status;
                                                                $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_fake_array['actual_credit'] = $actual_credit;
                                                                $data_fake[] = $temp_fake_array;
                                                                unset($temp_fake_array);
                                                            }
                                                            if (sizeof($data_fake)) {
                                                                $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                            }
                                                        }
                                                    }

                                                    // Get Fake Failed Number
                                                    if ($pr_user_fail_ratio) {
                                                        if ($u_fail) {
                                                            $data_failed = array();
                                                            $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                            $result_array1 = array_diff($result_array1, $fake_f_array);
                                                            foreach ($fake_f_array as $failed_number) {
                                                                $temp_failed_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 3;

                                                                $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_failed_array['campaign_id'] = $campaign_id;
                                                                $temp_failed_array['user_id'] = $user_id;
                                                                $temp_failed_array['msg_id'] = $msg_id;
                                                                $temp_failed_array['message'] = $message;
                                                                $temp_failed_array['msg_length'] = $length;
                                                                $temp_failed_array['mobile_no'] = $failed_number;
                                                                $temp_failed_array['status'] = $status;
                                                                $temp_failed_array ['submit_date'] = $subdate;
                                                                $temp_failed_array ['temporary_status'] = $temporary_status;
                                                                $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_failed_array['actual_credit'] = $actual_credit;
                                                                $data_failed[] = $temp_failed_array;
                                                                unset($temp_failed_array);
                                                            }
                                                            if (sizeof($data_failed)) {
                                                                $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }
                                                    }
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    $result = array_intersect($result_array, $white_list_array);
                                                    $result_array = array_merge($result_array1, $result);
                                                }

                                                if (sizeof($result_array)) {
                                                    $ssms_data = array();
                                                    foreach ($result_array as $number) {
                                                        $ssms_temp_array = array();
                                                        $sqlbox_temp_array = array();
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $message;
                                                        $ssms_temp_array['msg_length'] = $length;
                                                        $ssms_temp_array['mobile_no'] = $number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_temp_array['actual_credit'] = $actual_credit;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);
                                                    }
                                                    if (sizeof($ssms_data)) {
                                                        $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                        //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    }
                                                }
                                            } else {
                                                // Get White Lists
                                                $white_list_array = array();
                                                $result_white_list = $this->sms_model->getWhiteLists();
                                                if ($result_white_list) {
                                                    $white_list_array = $result_white_list;
                                                }
                                                // Custom DND Numbers
                                                $dnd_array = array();

                                                $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                                if ($result_dnd) {
                                                    $dnd_array = $result_dnd;
                                                    $dnd_array_size = sizeof($dnd_array);
                                                }

                                                // Non-DND Numbers
                                                $ndnd_result = array_diff($result_array, $dnd_array);

                                                // DND Numbers
                                                // $dnd_result = array_intersect($result_array, $dnd_array);



                                                if (sizeof($dnd_array)) {
                                                    $data_dnd = array();
                                                    foreach ($dnd_array as $dnd_number) {
                                                        $temp_dnd_array = array();
                                                        $status = "DND";
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_dnd_array['campaign_id'] = $campaign_id;
                                                        $temp_dnd_array['user_id'] = $user_id;
                                                        $temp_dnd_array['msg_id'] = $msg_id;
                                                        $temp_dnd_array['message'] = $message;
                                                        $temp_dnd_array['msg_length'] = $length;
                                                        $temp_dnd_array['mobile_no'] = $dnd_number;
                                                        $temp_dnd_array['status'] = $status;
                                                        $temp_dnd_array['submit_date'] = $subdate;
                                                        $temp_dnd_array['temporary_status'] = $temporary_status;
                                                        $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_dnd_array['actual_credit'] = $actual_credit;
                                                        $data_dnd[] = $temp_dnd_array;
                                                        unset($temp_dnd_array);
                                                    }
                                                    if (sizeof($data_dnd)) {
                                                        $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                        //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                    }
                                                }

                                                // Apply Ratio (Fake Delivered And Failed)
                                                if (sizeof($ndnd_result) > 100) {
                                                    // Get White List Numbers From User Request
                                                    $ndnd_result1 = array_diff($ndnd_result, $white_list_array);
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    // Apply User Ratio
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    $spacial_deliver_fake = 0;
                                                    if ($spacial_deliver_pr_ratio) {
                                                        $spacial_fake_ratio = (sizeof($ndnd_result1) * $spacial_deliver_pr_ratio) / 100;
                                                        $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                    }
                                                    if ($spacial_deliver_fake) {
                                                        $new_size = sizeof($ndnd_result1);
                                                        $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                        $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        //$user_fail = ($new_own_ratio * $pr_user_fail_ratio) / 100;
                                                        //$u_fail = ROUND($user_fail);
                                                    } else {

                                                        $user_fake = (sizeof($ndnd_result1) * $pr_user_fake_ratio) / 100;
                                                        $u_fake = ROUND($user_fake);
                                                        $user_fail = (sizeof($ndnd_result1) * $pr_user_fail_ratio) / 100;
                                                        $u_fail = ROUND($user_fail);
                                                    }
//add both ratio                                   
                                                    if ($spacial_deliver_fake) {
                                                        $u_fake = $u_fake + $spacial_deliver_fake;
                                                    }


                                                    // Get Fake Delivered Number
                                                    if ($pr_user_fake_ratio) {
                                                        if ($u_fake) {
                                                            $data_fake = array();
                                                            $fake_d_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fake);
                                                            $ndnd_result1 = array_diff($ndnd_result1, $fake_d_array);
                                                            foreach ($fake_d_array as $fake_number) {
                                                                $temp_fake_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 2;
                                                                $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_fake_array ['campaign_id'] = $campaign_id;
                                                                $temp_fake_array['user_id'] = $user_id;
                                                                $temp_fake_array['msg_id'] = $msg_id;
                                                                $temp_fake_array['message'] = $message;
                                                                $temp_fake_array['msg_length'] = $length;
                                                                $temp_fake_array['mobile_no'] = $fake_number;
                                                                $temp_fake_array['status'] = $status;
                                                                $temp_fake_array['submit_date'] = $subdate;
                                                                $temp_fake_array ['temporary_status'] = $temporary_status;
                                                                $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_fake_array['actual_credit'] = $actual_credit;
                                                                $data_fake[] = $temp_fake_array;
                                                                unset($temp_fake_array);
                                                            }
                                                            if (sizeof($data_fake)) {
                                                                $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                            }
                                                        }
                                                    }

                                                    // Get Fake Failed Number
                                                    if ($pr_user_fail_ratio) {
                                                        if ($u_fail) {
                                                            $data_failed = array();
                                                            $fake_f_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fail);
                                                            $ndnd_result1 = array_diff($ndnd_result1, $fake_f_array);
                                                            foreach ($fake_f_array as $failed_number) {
                                                                $temp_failed_array = array();
                                                                $deduct_balance++;
                                                                $msg_id = strtolower(random_string('alnum', 24));
                                                                $status = "31";
                                                                $subdate = date("Y-m-d H:i:s");
                                                                $temporary_status = 3;

                                                                $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                                $temp_failed_array['campaign_id'] = $campaign_id;
                                                                $temp_failed_array['user_id'] = $user_id;
                                                                $temp_failed_array['msg_id'] = $msg_id;
                                                                $temp_failed_array['message'] = $message;
                                                                $temp_failed_array['msg_length'] = $length;
                                                                $temp_failed_array['mobile_no'] = $failed_number;
                                                                $temp_failed_array['status'] = $status;
                                                                $temp_failed_array ['submit_date'] = $subdate;
                                                                $temp_failed_array ['temporary_status'] = $temporary_status;
                                                                $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                                $temp_failed_array['actual_credit'] = $actual_credit;
                                                                $data_failed[] = $temp_failed_array;
                                                                unset($temp_failed_array);
                                                            }
                                                            if (sizeof($data_failed)) {
                                                                $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }
                                                    }
                                                    //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                    $result = array_intersect($ndnd_result, $white_list_array);
                                                    $ndnd_result = array_merge($ndnd_result1, $result);
                                                }
                                                if (sizeof($ndnd_result)) {
                                                    $ssms_data = array();
                                                    foreach ($ndnd_result as $ndnd_number) {
                                                        $ssms_temp_array = array();
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $message;
                                                        $ssms_temp_array['msg_length'] = $length;
                                                        $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_temp_array['actual_credit'] = $actual_credit;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);
                                                    }
                                                    if (sizeof($ssms_data)) {
                                                        $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                        //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    }
                                                }
                                            }
                                        }

                                        /*  // Update User Balance
                                          $balance_type = "PR";
                                          $updated_sms_balance = $pr_sms_balance - ( $deduct_balance * $total_credits );
                                          //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                          $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */

                                        //update spacial balance 

                                        if ($reseller_key_balance_status) {
                                            $cal = $spacial_deliver_fake * $total_credits;
                                            $updated_key_balance = $updated_key_balance + $cal;
                                            $updated_key_balance = $updated_key_balance + ($dnd_array_size * $total_credits);
                                        } else {
                                            if ($route == 'A') {
                                                $updated_key_balance = $special_pr_balance;
                                            }
                                            if ($route == 'C') {
                                                $updated_key_balance = $special_stock_credits;
                                            }
                                            if ($route == 'D') {
                                                $updated_key_balance = $special_prtodnd_credits;
                                            }
                                        }

                                        // Update User Balance

                                        $balance_type = "PR";
                                        if ($route == 'A') {
                                            $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }
                                        if ($route == 'C') {
                                            $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }
                                        if ($route == 'D') {
                                            $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }
                                        if ($route == 'I') {
                                            $updated_sms_balance = $international_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                        }


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                        // Update Actual Message
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $total_deduction = $deduct_balance * $total_credits;
                                        $total_deduction = $total_deduction - ($dnd_array_size * $total_credits);
                                        $data = array(
                                            'total_deducted' => $total_deduction,
                                            'actual_message' => $deduct_balance,
                                            'campaign_status' => $campaign_status,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                }
                            } else {
                                $reason = "Promotional route is not assigned to user";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "102";
                            }
                        }
                        // Transactional SMS
                    } elseif ($route == "B") {

                        $reseller_key_balance_status = 1;
                        $most_parent_id_reseller_status = 0;
                        // Check Available Balance And Send Number of Message
                        if ($tr_sms_balance < $actual_balance_required) {
                            $reason = "Insufficient Transactional Balance";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "101";
                        } else {

                            $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                            $mostParentID = $verifySpecialReseller->most_parent_id;
                            $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                            if ($mostParentID != 0) {
                                $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                                $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                            }

                            if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                                //check Special PR balance
                                if ($spacial_reseller_status) {
                                    $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                                } else {
                                    $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                                }

                                if ($special_tr_balance < $actual_balance_required) {
                                    $reseller_key_balance_status = 0;
                                } else {

                                    $updated_key_balance = $special_tr_balance - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }
                            }

                            // Transactional SMS (User Group)
                            if ($tr_user_group_id) {
                                $user_smsc_id = $result_user->tr_smsc;

                                //check vodafone approve sender ids  
                                $check_approve_sender_id = $this->sms_model->checkApproveSenderId($sender_id_type, $sender_id_length, $from);
                                if ($check_approve_sender_id) {

                                    $tr_user_group_id = $check_approve_sender_id->route;
                                    $this->db->select('smsc_id');
                                    $this->db->from('user_groups');
                                    $this->db->where('user_group_id', $tr_user_group_id);
                                    $query = $this->db->get();

                                    $user_smsc_id = $query->row('smsc_id');
                                }

                                // If XML
                                $is_xml = 0;

                                if ($user_smsc_id == 'XML') {
                                    $is_xml = 1;
                                }
                                // Check Numeric/Alphabetic/Alphanumeric Type
                                $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                                if ($check_sender_id) {
                                    $reason = "Invalid Sender Id";
                                    $log_by = "By Panel";
                                    $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                    return "Error: Please check your Sender ID!";
                                }

                                // Insert Campaign
                                $request_by = "By Panel";
                                $campaign_uid = strtolower(random_string('alnum', 24));
                                //$total_messages = sizeof($result_array) + sizeof($bresult_array);
                                $submit_date = date("Y-m-d H:i:s");

                                // Deduct SMS Balance
                                $deduct_balance = 0;
                                if (sizeof($result_message_array)) {
                                    $message_category = 2;
                                    $campaign_status = 2;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $tr_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'message_category' => $message_category,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'schedule_date' => $schedule_time,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'black_listed' => 1,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $tr_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        // Insert Rejected List Numbers
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        if (sizeof($result_array)) {
                                            // Check Sender Id
                                            $sender_condition = 0;
                                            if ($t_sender_id_option) { // Open
                                                $sender_condition = 1;
                                            } else {
                                                $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                                if ($result_sender_id) {
                                                    $sender_condition = 1;
                                                }
                                            }

                                            // Check Keyword

                                            $keyword_condition = 0;
                                            if ($keyword_option) { // Open
                                                $keyword_condition = 1;
                                            } else {
                                                $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                                if ($result_keyword) {
                                                    $keyword_condition = 1;
                                                }
                                            }

                                            // First Insert Into Database Then Check All Conditions
                                            if (sizeof($result_array)) {
                                                $data1 = array();
                                                foreach ($result_array as $number) {
                                                    $temp_array1 = array();
                                                    $deduct_balance++;
                                                    $status = "31";
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;

                                                    $temp_array1['user_group_id'] = $tr_user_group_id;
                                                    $temp_array1['campaign_id'] = $campaign_id;
                                                    $temp_array1['user_id'] = $user_id;
                                                    $temp_array1['msg_id'] = $msg_id;
                                                    $temp_array1['message'] = $message;
                                                    $temp_array1['msg_length'] = $length;
                                                    $temp_array1['mobile_no'] = $number;
                                                    $temp_array1['status'] = $status;
                                                    $temp_array1['submit_date'] = $subdate;
                                                    $temp_array1['temporary_status'] = $temporary_status;
                                                    $temp_array1['default_route'] = $user_smsc_id;
                                                    $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $temp_array1['actual_credit'] = $actual_credit;
                                                    $data1[] = $temp_array1;
                                                    unset($temp_array1);
                                                }
                                                if (sizeof($data1)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $data1);
                                                    //$this->db->insert_batch('voice_msg_dlr', $data1);
                                                }
                                            }

                                            // Get Unique Numbers
                                            $total_unique = 0;
                                            $exceed_numbers = 0;
                                            $db_condition = 0;
                                            $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                            if ($result_numbers) {
                                                $total_unique = $result_numbers;
                                                $exceed_numbers = $total_unique - $number_allowed;
                                                if ($total_unique <= $number_allowed) {
                                                    $db_condition = 1;
                                                }
                                            }

                                            if ($reseller_key_balance_status) {
                                                $cal = $spacial_deliver_fake * $total_credits;
                                                $updated_key_balance = $updated_key_balance + $cal;
                                            } else {
                                                $updated_key_balance = $special_tr_balance;
                                            }

                                            $balance_type = "TR";
                                            $updated_sms_balance = $tr_sms_balance - ( $deduct_balance * $total_credits );
                                            // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                            /*  $mostParentID = 0;
                                              $spacial_reseller_status = 0;
                                              $most_parent_id_reseller_status = 0;
                                              $updated_key_balance = 0; */


                                            $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                            // Update Actual Message
                                            $this->benchmark->mark('End_Time');
                                            $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                            $data = array(
                                                'total_deducted' => $deduct_balance * $total_credits,
                                                'actual_message' => $deduct_balance,
                                                'sender_status' => $sender_condition,
                                                'keyword_status' => $keyword_condition,
                                                'number_db_status' => $db_condition,
                                                'unique_numbers' => $total_unique,
                                                'exceed_numbers' => $exceed_numbers,
                                                'campaign_status' => $campaign_status,
                                                'total_time' => $total_time
                                            );
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->update('campaigns', $data);
                                            return "1";
                                        }
                                    }
                                } else {
                                    $message_category = 2;
                                    $campaign_status = 2;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $tr_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'message_category' => $message_category,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'schedule_date' => $schedule_time,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $length,
                                        'route' => $route,
                                        'is_xml' => $is_xml,
                                        'reseller_key_balance_status' => $reseller_key_balance_status
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $tr_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }

                                        // Insert Rejected List Numbers
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $deduct_balance++;
                                                $status = "Rejected";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }

                                        if (sizeof($result_array)) {
                                            // Check Sender Id
                                            $sender_condition = 0;
                                            if ($t_sender_id_option) { // Open
                                                $sender_condition = 1;
                                            } else {
                                                if ($check_demo_user && $tr_sms_balance <= 20) {
                                                    $sender_condition = 1;
                                                } else {
                                                    $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                                    if ($result_sender_id) {
                                                        $sender_condition = 1;
                                                    }
                                                }
                                            }

                                            // Check Keyword
                                            $keyword_condition = 0;
                                            if ($keyword_option) { // Open
                                                $keyword_condition = 1;
                                            } else {
                                                if ($check_demo_user && $tr_sms_balance <= 20) {
                                                    $keyword_condition = 1;
                                                } else {
                                                    $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                                    if ($result_keyword) {
                                                        $keyword_condition = 1;
                                                    }
                                                }
                                            }

                                            $data1 = array();
                                            foreach ($result_array as $number) {
                                                $temp_array1 = array();
                                                $deduct_balance++;
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_array1['user_group_id'] = $tr_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = $message;
                                                $temp_array1['msg_length'] = $length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_array1['actual_credit'] = $actual_credit;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            }
                                            if (sizeof($data1)) {
                                                $res1 = $this->db->insert_batch('sent_sms', $data1);
                                                //$this->db->insert_batch('voice_msg_dlr', $data1);
                                            }

                                            // Get Unique Numbers
                                            $total_unique = 0;
                                            $exceed_numbers = 0;
                                            $db_condition = 0;
                                            $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                            if ($result_numbers) {
                                                $total_unique = $result_numbers;
                                                $exceed_numbers = $total_unique - $number_allowed;
                                                if ($total_unique <= $number_allowed) {
                                                    $db_condition = 1;
                                                }
                                            }


                                            if ($reseller_key_balance_status) {
                                                $cal = $spacial_deliver_fake * $total_credits;
                                                $updated_key_balance = $updated_key_balance + $cal;
                                            } else {
                                                $updated_key_balance = $special_tr_balance;
                                            }

                                            $balance_type = "TR";
                                            $updated_sms_balance = $tr_sms_balance - ( $deduct_balance * $total_credits );
                                            //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                            /* $mostParentID = 0;
                                              $spacial_reseller_status = 0;
                                              $most_parent_id_reseller_status = 0;
                                              $updated_key_balance = 0; */


                                            $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                            // Update Actual Message
                                            $this->benchmark->mark('End_Time');
                                            $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                            $data = array(
                                                'total_deducted' => $deduct_balance * $total_credits,
                                                'actual_message' => $deduct_balance,
                                                'sender_status' => $sender_condition,
                                                'keyword_status' => $keyword_condition,
                                                'number_db_status' => $db_condition,
                                                'unique_numbers' => $total_unique,
                                                'exceed_numbers' => $exceed_numbers,
                                                'campaign_status' => $campaign_status,
                                                'total_time' => $total_time
                                            );
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->update('campaigns', $data);
                                            return "1";
                                        }
                                    }
                                }
                            } else {
                                $reason = "Transactional route is not assigned to user";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "102";
                            }
                        }
                    }
                } else {
                    return 105;
                }
            } else {
                return 106;
            }
        } else {

            return 106;
        }
    }

    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//    
    // Notify Users
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Notify Users From SMS
    function notifyUsersBySMS($user_id = 0, $pr_sms_balance = 0, $tr_sms_balance = 0, $auth_key = null) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        $notify_users = $this->input->post('notify_users');
        $contacts = implode(',', $notify_users);
        $route = $this->input->post('route');
        $from = $this->input->post('sender');
        $message = $this->input->post('message');
        // URL Encoding
        $message = urlencode($message);
        if ($contacts != "") {
            $domain_name = $_SERVER['SERVER_NAME'];
            if ($domain_name == 'localhost' || $domain_name == '192.168.1.231') {
                $url = "http://$domain_name/BulkSMSAPP/api/send_http.php/";
            } else {
                $url = "http://sms.bulksmsserviceproviders.com/api/send_http.php/";
            }
            $sms_array = array(
                'authkey' => $auth_key,
                'mobiles' => $contacts,
                'message' => $message,
                'sender' => $from,
                'route' => $route
            );
            if ($this->utility_model->sendSMS($url, $sms_array)) {
                $date = date('d-m-Y h:i:s');
                $data = array(
                    'user_id' => $user_id,
                    'notify_route' => $route,
                    'notify_sender' => $from,
                    'notify_message' => $message,
                    'notify_date' => $date
                );
                $this->db->insert('notify_users', $data);
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    // Notify Users From Email
    function notifyUsersByEmail($user_id = 0, $company_name = null) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        $notify_users = $this->input->post('notify_users');
        $contacts = implode(',', $notify_users);
        $email_address = $this->input->post('email_address');
        $mail_subject = $this->input->post('subject');
        $message = $this->input->post('message');
        // URL Encoding
        if ($contacts != "") {
            $subject = "Notification: $mail_subject";
            $body = $this->utility_model->emailNotification($company_name, $message);
            // Prepare Email Array
            $mail_array = array(
                'from_email' => $email_address,
                'from_name' => $company_name,
                'to_email' => $contacts,
                'subject' => $subject,
                'message' => $body
            );
            if ($this->utility_model->sendEmail($mail_array)) {
                $date = date('d-m-Y h:i:s');
                $data = array(
                    'user_id' => $user_id,
                    'notify_email' => $email_address,
                    'notify_subject' => $subject,
                    'notify_body' => $message,
                    'notify_date' => $date
                );
                $this->db->insert('notify_users', $data);
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//    
    // Custom Or Advance SMS
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Advance Upload CSV
    function advanceUploadCSV($user_id = null) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        $uploaded_file = explode('.', $_FILES['upload_csv']['name']);
        $extension = $uploaded_file[1];
        $array = array();
        if ($extension == 'csv' || $extension == 'xls' || $extension == 'xlsx') {
            $return_array = array();
            $temp_file_name = date('dmYhis') . "-" . $user_id;
            $config['file_name'] = $temp_file_name;
            $config['upload_path'] = './Uploads/';
            $config['allowed_types'] = '*';
            $this->load->library('upload', $config);
            if ($this->upload->do_upload('upload_csv', $temp_file_name)) {
                $line = array();
                $myfile = "./Uploads/" . $temp_file_name . ".csv";
                $filehandle = fopen($myfile, "r");
                $line = explode(',', fgets($filehandle));
                //while (!feof($filehandle)) {
                //$line = explode(',', fgets($filehandle));
                //break;
                //}
                fclose($filehandle);
                $return_array['temp_file_name'] = $temp_file_name . ".csv";
                $return_array['numcols'] = sizeof($line);
                $array[0] = 200;
                $array[1] = $return_array;
                return $array;
            } else {
                $array[0] = 100;
                return $array;
            }
        } else {
            $array[0] = 101;
            return $array;
        }
    }

    // Advance Send SMS
    function advanceSendSMS($user_id = null) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        header('Content-type: text/plain; charset=utf-8');
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);
        if ($result_user) {
            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $prtodnd_balance = $result_user->prtodnd_balance;
            $stock_balance = $result_user->stock_balance;

            $number_allowed = $result_user->number_allowed;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $pro_user_group_id = $result_user->pro_user_group_id;
            $tr_user_group_id = $result_user->tr_user_group_id;
            $prtodnd_user_group_id = $result_user->prtodnd_route;
            $stock_user_group_id = $result_user->stock_route;
            $admin_approval_status = $result_user->pricing_approval;




            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $pr_fake_sent = $result_user->pr_fake_sent;
            $tr_fake_sent = $result_user->tr_fake_sent;
            $spacial_deliver_pr_ratio = $result_user->spacial_deliver_pr_ratio;
            $spacial_deliver_tr_ratio = $result_user->spacial_deliver_tr_ratio;

            $campaign_name = $this->input->post('campaign_name');
            $from = $this->input->post('sender');
            $route = $this->input->post('route');
            $contact_column = $this->input->post('contact_column');
            $message_type = $this->input->post('message_type');
            $message = $this->input->post('message');
            $temp_file_name = $this->input->post('temp_file_name');
            $total_column = $this->input->post('total_column');
            $total_messages = $this->input->post('total_messages');
            $total_credits = $this->input->post('total_credits');

            $flash_message = 0;
            if ($this->input->post('flash_message')) {
                $flash_message = $this->input->post('flash_message');
            }

            $message_array = explode(' ', $message);
            $total_column_array = explode(',', $total_column);

            // Add Signature
            $signature = "";
            if ($this->input->post('check_signature')) {
                $signature = $this->input->post('signature');
            }

            $required_balance = 0;
            // Actual
            $actual_message_array = array();
            $actual_message_length_array = array();
            $actual_result_array = array();
            // Rejected
            $reject_list_array = array();
            $reject_list_msg_array = array();
            $filename = "./Uploads/$temp_file_name";
            $handle = fopen($filename, 'r');
            $i = 0;
            $flag = 0;
            if ($handle) {
                while (($file_data = fgetcsv($handle, 0, ",")) !== FALSE) {
                    $number = $file_data[$contact_column];
                    $number = str_replace('+', '', $number);
                    $number = str_replace('-', '', $number);
                    $number = str_replace(' ', '', $number);
                    if (!is_numeric($number)) {
                        $reason = "Invalid Selected Contact Column";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return 105;
                    } elseif (strlen($number) > 9 && strlen($number) < 13) {
                        $mobile = "";
                        if (strlen($number) == 10) {
                            $mobile = "91" . $number;
                        } elseif (strlen($number) == 12) {
                            $mobile = $number;
                        } else {
                            // return 104;
                        }

                        $new_message = "";
                        foreach ($message_array as $value) {
                            if (in_array($value, $total_column_array)) {
                                $key = array_search($value, $total_column_array);
                                if ($new_message == "") {
                                    $new_message = $file_data[$key];
                                } else {
                                    $new_message = $new_message . " " . $file_data[$key];
                                }
                            } else {
                                if ($new_message == "") {
                                    $new_message = $value;
                                } else {
                                    $new_message = $new_message . " " . $value;
                                }
                            }
                        }
                        if ($signature != "") {
                            $new_message.=" " . $signature;
                        }
                        if ($i == 0) {
                            $message = $new_message;
                        }
                        $credits = 0;
                        $length = strlen(utf8_decode($new_message));
                        //$length = strlen($new_message);
                        if ($message_type == 2) {
                            $coding = 2;
                            if ($length % 70 == 0) {
                                $credits = intval($length / 70);
                            } else {
                                $credits = intval($length / 70) + 1;
                            }
                        } elseif ($message_type == 1) {
                            $coding = 0;
                            if ($length % 160 == 0) {
                                $credits = intval($length / 160);
                            } else {
                                $credits = intval($length / 160) + 1;
                            }
                        }
                        $required_balance+=$credits;
                        if (substr($mobile, 0, 2) != 91) {
                            $reject_list_array[] = $mobile;
                            $reject_list_msg_array[] = $new_message;
                        } else {
                            $actual_message_array[] = $new_message;
                            $actual_message_length_array[] = strlen($new_message);
                            $actual_result_array[] = $mobile;
                        }
                    }
                    $i++;
                }
                fclose($handle);
            }
            //$length = strlen($message);
            $length = strlen(utf8_decode($message));

            // Black Listed Keywords
            $black_keyword_array = array();
            $result_black_keywords = $this->sms_model->getBlackKeywords();
            if ($result_black_keywords) {
                foreach ($result_black_keywords as $row_bkeyword) {
                    $bkeyword = preg_replace('/\s+/', ' ', urldecode($row_bkeyword['black_keyword']));
                    $bkeyword_array = explode(' ', $bkeyword);
                    $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                }
            }
            // Remove Black Listed Keywords
            $black_keyword_array = array_map('strtolower', $black_keyword_array);
            $black_keyword_array = array_filter($black_keyword_array);
            $result_message_array = array();
            foreach ($actual_message_array as $key => $sms) {
                $temp_sms = $sms;
                $temp_array = explode(' ', preg_replace('/\s+/', ' ', $temp_sms));
                $temp_array = array_map('strtolower', $temp_array);
                $temp_array = array_intersect($black_keyword_array, $temp_array);
                $result_message_array = array_merge($result_message_array, $temp_array);
            }

            // Get Black Lists
            $black_list_array = array();
            $result_black_list = $this->sms_model->getBlackLists();
            if ($result_black_list) {
                $black_list_array = $result_black_list;
            }
            // Check Black List Sender Id
            $black_sender = $this->sms_model->checkBlackSenderIds($from);

            // Remove Black List Numbers
            // Check Result Array


            $approval_status = 1;
            $remainNumberOfSMS = 0;
            // check pricing for message approval
//            $pricing_array = array();
//            $pricing_array = $this->user_data_model->checkPricing($user_id);
//            if ($pricing_array) {
//                $txn_id = $pricing_array[0]['txn_log_id'];
//                $pricing = $pricing_array[0]['txn_price'];
//                $tax_status = $pricing_array[0]['tax_status'];
//                $numberOfSMS = $pricing_array[0]['no_of_send_sms'];
//
//
//                if ($admin_approval_status == 0) {
//                    if ($tax_status == 1) {
//                        if ($pricing < .035) {
//                            if ($numberOfSMS == 0) {
//                                $approval_status = 0;
//                            } else {
//                                if ($numberOfSMS < $required_balance) {
//                                    $approval_status = 0;
//                                } else {
//                                    $approval_status = 1;
//                                    $remainNumberOfSMS = $numberOfSMS - $required_balance;
//                                    $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
//                                }
//                            }
//                        } else {
//                            $approval_status = 1;
//                        }
//                    } elseif ($tax_status == 0) {
//                        if ($pricing < .05) {
//                            if ($numberOfSMS == 0) {
//                                $approval_status = 0;
//                            } else {
//                                if ($numberOfSMS < $required_balance) {
//                                    $approval_status = 0;
//                                } else {
//                                    $approval_status = 1;
//                                    $remainNumberOfSMS = $numberOfSMS - $required_balance;
//                                    $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
//                                }
//                            }
//                        } else {
//                            $approval_status = 1;
//                        }
//                    }
//                }
//            }
//            $approval_status;
            $pricing_error = 0;
            if ($approval_status == 0) {
                $pricing_error = 420;
            }




            if (sizeof($actual_result_array) || sizeof($reject_list_array)) {

                $balance_status = 1;

                if ($route == "A" || $route == "C" || $route == "D") {


                    if ($route == 'A' && $pr_sms_balance < $required_balance) {
                        $balance_status = 0;
                    }
                    if ($route == 'C' && $stock_balance < $required_balance) {
                        $balance_status = 0;
                    }
                    if ($route == 'D' && $prtodnd_balance < $required_balance) {
                        $balance_status = 0;
                    }

                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;

                    // Check Available Balance And Send Number of Message
                    if ($balance_status == 0) {
                        $reason = "Insufficient Promotional Balance";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "101";
                    } else {

                        //special reseller

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            } else {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            }

                            if ($route == 'A' && $special_pr_balance < $required_balance) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'C' && $special_stock_credits < $required_balance) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'D' && $special_prtodnd_credits < $required_balance) {
                                $reseller_key_balance_status = 0;
                            }

                            /*   if ($special_pr_balance < $actual_balance_required) {
                              $reseller_key_balance_status = 0;
                              } else {

                              $updated_key_balance = $special_pr_balance - $actual_balance_required;
                              $reseller_key_balance_status = 1;
                              } */
                            if ($reseller_key_balance_status == 0) {
                                $reseller_key_balance_status = 0;
                            } else {
                                if ($route == 'A') {
                                    $updated_key_balance = $special_pr_balance - $required_balance;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'C') {
                                    $updated_key_balance = $special_stock_credits - $required_balance;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'D') {
                                    $updated_key_balance = $special_prtodnd_credits - $required_balance;
                                    $reseller_key_balance_status = 1;
                                }

                                // $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                // $reseller_key_balance_status = 1;
                            }
                        }

                        // Transactional SMS (User Group)
                        if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id) {

                            if ($route == 'A') {
                                $user_smsc_id = $result_user->pr_smsc;
                                $pro_user_group_id = $pro_user_group_id;
                            }
                            if ($route == 'D') {
                                $user_smsc_id = $result_user->prtodnd_smsc;
                                $pro_user_group_id = $prtodnd_user_group_id;
                            }
                            if ($route == 'C') {
                                $user_smsc_id = $result_user->stock_smsc;
                                $pro_user_group_id = $stock_user_group_id;
                            }


                            // Route
                            //  $route = "B";
                            // Alloted SMSC
                            //  $user_smsc_id = $result_user->tr_smsc;
                            // If XML
                            $is_xml = 0;
                            if ($user_smsc_id == 'XML') {
                                $is_xml = 1;
                            }
                            // Check Numeric/Alphabetic/Alphanumeric Type
                            $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                            if ($check_sender_id) {
                                $reason = "Invalid Sender Id";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "Error: Please check your Sender ID!";
                            }

                            // Insert Campaign
                            $request_by = "By Panel";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");
                            $campaign_status = 1;

                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );

                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                        }
                                    }


                                    if ($route == "A" && $dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "A" && $dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "C" && $stock_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "C" && $stock_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "D" && $premium_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "D" && $premium_dnd_check == 1) {
                                        $dnd_check = 0;
                                    }




                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $pro_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $pro_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }

                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                        }

                                        ///updated slot end
                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($p_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }
                                        // Update
                                        if ($reseller_key_balance_status) {
                                            $cal = $spacial_deliver_fake * $total_credits;
                                            $updated_key_balance = $updated_key_balance + $cal;
                                        } else {
                                            if ($route == 'A') {
                                                $updated_key_balance = $special_pr_balance;
                                            }
                                            if ($route == 'C') {
                                                $updated_key_balance = $special_stock_credits;
                                            }
                                            if ($route == 'D') {
                                                $updated_key_balance = $special_prtodnd_credits;
                                            }

                                            //  $updated_key_balance = $special_pr_balance;
                                        }

                                        // Update User Balance

                                        $balance_type = "PR";
                                        if ($route == 'A') {
                                            // $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $pr_sms_balance - $required_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                        }
                                        if ($route == 'D') {
                                            $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                        }


                                        //   $balance_type = "TR";
                                        //   $updated_sms_balance = $tr_sms_balance - $required_balance;

                                        /*   $mostParentID;
                                          $spacial_reseller_status;
                                          $most_parent_id_reseller_status;
                                          $updated_key_balance ; */



                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);

                                        //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            } else {
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );

                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                        }
                                    }
                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $pro_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $pro_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }


                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                        }



                                        $sqlbox_data = array();
                                        foreach ($data1 as $number) {
                                            $sqlbox_temp_array = array();
                                            // SQLBox Send SMS
                                            $sqlbox_temp_array['momt'] = "MT";
                                            $sqlbox_temp_array['sender'] = $from;
                                            $sqlbox_temp_array['receiver'] = $number['mobile_no'];
                                            $sqlbox_temp_array['msgdata'] = $number['message'];
                                            $sqlbox_temp_array['smsc_id'] = $number['default_route'];
                                            $sqlbox_temp_array['id'] = $number['campaign_id'];
                                            $sqlbox_temp_array['sms_type'] = 2;
                                            $sqlbox_temp_array['dlr_mask'] = 31;
                                            $sqlbox_temp_array['coding'] = $coding;
                                            $sqlbox_temp_array['dlr_url'] = $campaign_id;
                                            $sqlbox_data[] = $sqlbox_temp_array;
                                            unset($sqlbox_temp_array);
                                        }

                                        if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                            $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                        }






                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }



                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }



                                        // Update
                                        if ($reseller_key_balance_status) {
                                            $cal = $spacial_deliver_fake * $total_credits;
                                            $updated_key_balance = $updated_key_balance + $cal;
                                        } else {
                                            if ($route == 'A') {
                                                $updated_key_balance = $special_pr_balance;
                                            }
                                            if ($route == 'C') {
                                                $updated_key_balance = $special_stock_credits;
                                            }
                                            if ($route == 'D') {
                                                $updated_key_balance = $special_prtodnd_credits;
                                            }

                                            //  $updated_key_balance = $special_pr_balance;
                                        }

                                        // Update User Balance

                                        $balance_type = "PR";
                                        if ($route == 'A') {
                                            // $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                            $updated_sms_balance = $pr_sms_balance - $required_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                        }
                                        if ($route == 'D') {
                                            $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                        }


                                        // $balance_type = "TR";
                                        // $updated_sms_balance = $tr_sms_balance - $required_balance;

                                        $mostParentID;
                                        $spacial_reseller_status;
                                        $most_parent_id_reseller_status;



                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);


                                        //   $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);

                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            }
                        } else {
                            $reason = "Promotional route is not assigned to user";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "102";
                        }
                    }
                } elseif ($route == "B") {


                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;

                    // Check Available Balance And Send Number of Message
                    if ($tr_sms_balance < $required_balance) {
                        $reason = "Insufficient Transactional Balance";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "101";
                    } else {

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                            } else {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                            }

                            if ($special_tr_balance < $required_balance) {
                                $reseller_key_balance_status = 0;
                            } else {

                                $updated_key_balance = $special_tr_balance - $required_balance;
                                $reseller_key_balance_status = 1;
                            }
                        }

                        // Transactional SMS (User Group)
                        if ($tr_user_group_id) {
                            // Route
                            $route = "B";
                            // Alloted SMSC
                            $user_smsc_id = $result_user->tr_smsc;
                            // If XML
                            $is_xml = 0;
                            if ($user_smsc_id == 'XML') {
                                $is_xml = 1;
                            }
                            // Check Numeric/Alphabetic/Alphanumeric Type
                            $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                            if ($check_sender_id) {
                                $reason = "Invalid Sender Id";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "Error: Please check your Sender ID!";
                            }

                            // Insert Campaign
                            $request_by = "By Panel";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");
                            $campaign_status = 1;

                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );

                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                        }
                                    }

                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $tr_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $tr_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }

                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                        }

                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }
                                        // Update
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - $required_balance;

                                        /*   $mostParentID;
                                          $spacial_reseller_status;
                                          $most_parent_id_reseller_status;
                                          $updated_key_balance ; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);

                                        //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            } else {
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );

                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                        }
                                    }
                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $tr_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $tr_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }


                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                        }



                                        $sqlbox_data = array();
                                        foreach ($data1 as $number) {
                                            $sqlbox_temp_array = array();
                                            // SQLBox Send SMS
                                            $sqlbox_temp_array['momt'] = "MT";
                                            $sqlbox_temp_array['sender'] = $from;
                                            $sqlbox_temp_array['receiver'] = $number['mobile_no'];
                                            $sqlbox_temp_array['msgdata'] = $number['message'];
                                            $sqlbox_temp_array['smsc_id'] = $number['default_route'];
                                            $sqlbox_temp_array['id'] = $number['campaign_id'];
                                            $sqlbox_temp_array['sms_type'] = 2;
                                            $sqlbox_temp_array['dlr_mask'] = 31;
                                            $sqlbox_temp_array['coding'] = $coding;
                                            $sqlbox_temp_array['dlr_url'] = $campaign_id;
                                            $sqlbox_data[] = $sqlbox_temp_array;
                                            unset($sqlbox_temp_array);
                                        }

                                        if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                            $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                        }






                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }



                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }



                                        // Update
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - $required_balance;

                                        /* $mostParentID;
                                          $spacial_reseller_status;
                                          $most_parent_id_reseller_status;
                                          $updated_key_balance ; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);


                                        //   $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);

                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            }
                        } else {
                            $reason = "Transactional route is not assigned to user";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "102";
                        }
                    }
                }
            } else {
                return 105;
            }
        } else {
            return 106;
        }
    }

    // Save Advance Schedule SMS
    function saveAdvanceSchSMS($user_id = null) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        header('Content-type: text/plain; charset=utf-8');
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);
        if ($result_user) {
            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $number_allowed = $result_user->number_allowed;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $tr_user_group_id = $result_user->tr_user_group_id;
            $pro_user_group_id = $result_user->pro_user_group_id;
            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $admin_approval_status = $result_user->pricing_approval;

            $campaign_name = $this->input->post('campaign_name');
            $route = $this->input->post('route');
            $from = $this->input->post('sender');
            $contact_column = $this->input->post('contact_column');
            $message_type = $this->input->post('message_type');
            $message = $this->input->post('message');
            $temp_file_name = $this->input->post('temp_file_name');
            $total_column = $this->input->post('total_column');
            $total_messages = $this->input->post('total_messages');
            $total_credits = $this->input->post('total_credits');
            $current_date = date('Y-m-d h:i:00');
            $schedule_time = $this->input->post('schedule_date');

            if ($current_date > $schedule_time) {
                return 108;
            }
            // Add Signature
            $flash_message = 0;
            if ($this->input->post('flash_message')) {
                $flash_message = $this->input->post('flash_message');
            }

            $message_array = explode(' ', $message);
            $total_column_array = explode(',', $total_column);

            // Add Signature
            $signature = "";
            if ($this->input->post('check_signature')) {
                $signature = $this->input->post('signature');
            }

            $required_balance = 0;
            // Actual
            $actual_message_array = array();
            $actual_message_length_array = array();
            $actual_result_array = array();
            // Rejected
            $reject_list_array = array();
            $reject_list_msg_array = array();
            $filename = "./Uploads/$temp_file_name";
            $handle = fopen($filename, 'r');
            $i = 0;
            if ($handle) {
                while (($file_data = fgetcsv($handle, 0, ",")) !== FALSE) {
                    $number = $file_data[$contact_column];

                    if (!is_numeric($number)) {
                        $reason = "Invalid Selected Contact Column";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);

                        return 105;
                    } else {
                        if (strlen($number) == 10) {
                            $mobile = "91" . $number;
                        } elseif (strlen($number) == 12) {
                            $mobile = $number;
                        } else {
                            return 104;
                        }

                        $new_message = "";
                        foreach ($message_array as $value) {
                            if (in_array($value, $total_column_array)) {
                                $key = array_search($value, $total_column_array);
                                if ($new_message == "") {
                                    $new_message = $file_data[$key];
                                } else {
                                    $new_message = $new_message . " " . $file_data[$key];
                                }
                            } else {
                                if ($new_message == "") {
                                    $new_message = $value;
                                } else {
                                    $new_message = $new_message . " " . $value;
                                }
                            }
                        }
                        $new_message.=" " . $signature;
                        if ($i == 0) {
                            $message = $new_message;
                        }
                        $credits = 0;
                        $length = strlen($new_message);
                        if ($message_type == 2) {
                            if ($length % 70 == 0) {
                                $credits = intval($length / 70);
                            } else {
                                $credits = intval($length / 70) + 1;
                            }
                        } elseif ($message_type == 1) {
                            if ($length % 160 == 0) {
                                $credits = intval($length / 160);
                            } else {
                                $credits = intval($length / 160) + 1;
                            }
                        }
                        $required_balance+=$credits;

                        if (substr($mobile, 0, 2) != 91) {
                            $reject_list_array[] = $mobile;
                            $reject_list_msg_array[] = $new_message;
                        } else {
                            $actual_message_array[] = $new_message;
                            $actual_message_length_array[] = strlen($new_message);
                            $actual_result_array[] = $mobile;
                        }
                    }


                    $i++;
                }
                fclose($handle);
            }
            //$length = strlen($message);
            $length = strlen(utf8_decode($message));

            // Black Listed Keywords
            $black_keyword_array = array();
            $result_black_keywords = $this->sms_model->getBlackKeywords();
            if ($result_black_keywords) {
                foreach ($result_black_keywords as $row_bkeyword) {
                    $bkeyword = preg_replace('/\s+/', ' ', urldecode($row_bkeyword['black_keyword']));
                    $bkeyword_array = explode(' ', $bkeyword);
                    $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                }
            }
            // Remove Black Listed Keywords
            $black_keyword_array = array_map('strtolower', $black_keyword_array);
            $black_keyword_array = array_filter($black_keyword_array);
            $result_message_array = array();
            foreach ($actual_message_array as $key => $sms) {
                $temp_sms = $sms;
                $temp_array = explode(' ', preg_replace('/\s+/', ' ', $temp_sms));
                $temp_array = array_map('strtolower', $temp_array);
                $temp_array = array_intersect($black_keyword_array, $temp_array);
                $result_message_array = array_merge($result_message_array, $temp_array);
                //$temp_sms = $sms;
                //$result_message_array = array_merge($result_message_array, array_intersect($black_keyword_array, array_map('strtolower', explode(' ', preg_replace('/\s+/', ' ', $temp_sms)))));
            }

            // Get Black Lists
            $black_list_array = array();
            $result_black_list = $this->sms_model->getBlackLists();
            if ($result_black_list) {
                $black_list_array = $result_black_list;
            }

            // Check Black List Sender Id
            $black_sender = $this->sms_model->checkBlackSenderIds($from);

            // Check Result Array
            if (sizeof($actual_result_array) || sizeof($reject_list_array)) {

                $reseller_key_balance_status = 1;
                $most_parent_id_reseller_status = 0;


                // Check Available Balance And Send Number of Message
                if ($route == "A") {
                    if ($pr_sms_balance < $required_balance) {
                        $reason = "Insufficient Pramostional Balance";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "101";
                    } else {

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_Pr_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                            } else {
                                $special_Pr_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                            }

                            if ($special_Pr_balance < $required_balance) {
                                $reseller_key_balance_status = 0;
                            } else {

                                $updated_key_balance = $special_Pr_balance - $required_balance;
                                $reseller_key_balance_status = 1;
                            }
                        }




                        // Transactional SMS (User Group)
                        if ($pro_user_group_id) {
                            // Route
                            $route = $this->input->post('route');
                            // Alloted SMSC
                            $user_smsc_id = $result_user->pr_smsc;
                            // If XML
                            $is_xml = 0;
                            if ($user_smsc_id == 'XML') {
                                $is_xml = 1;
                            }

                            // Check Numeric/Alphabetic/Alphanumeric Type
                            $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                            if ($check_sender_id) {
                                $reason = "Invalid Sender Id";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "Error: Please check your Sender ID!";
                            }

                            // Insert Campaign
                            $request_by = "By Panel";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");
                            $campaign_status = 1;
                            $message_category = 2;
                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'message_category' => $message_category,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'schedule_date' => $schedule_time,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );
                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $pro_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $pro_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }
                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                            //$this->db->insert_batch('voice_msg_dlr', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                            //$this->db->insert_batch('voice_msg_dlr', $data2);
                                        }

                                        // Check Sender Id
                                        $sender_condition = 1;


                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }

                                        // Update
                                        $balance_type = "PR";
                                        $updated_sms_balance = $pr_sms_balance - $required_balance;

                                        /*  $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);

                                        // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            } else {
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'message_category' => $message_category,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'schedule_date' => $schedule_time,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );
                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $pro_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $pro_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }
                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                            //$this->db->insert_batch('voice_msg_dlr', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                            //$this->db->insert_batch('voice_msg_dlr', $data2);
                                        }

                                        // Check Sender Id
                                        $sender_condition = 1;

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }
                                        $route = $this->input->post('route');
                                        // Uopdate
                                        $balance_type = "PR";
                                        $updated_sms_balance = $pr_sms_balance - $required_balance;

                                        /*   $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */



                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);

                                        // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            }
                        } else {
                            $reason = "Pramostional route is not assigned to user";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "102";
                        }
                    }
                } elseif ($route == "B") {
                    if ($tr_sms_balance < $required_balance) {
                        $reason = "Insufficient Transactional Balance";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "101";
                    } else {

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                            } else {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                            }

                            if ($special_tr_balance < $required_balance) {
                                $reseller_key_balance_status = 0;
                            } else {

                                $updated_key_balance = $special_tr_balance - $required_balance;
                                $reseller_key_balance_status = 1;
                            }
                        }




                        // Transactional SMS (User Group)
                        if ($tr_user_group_id) {
                            // Route
                            $route = "B";
                            // Alloted SMSC
                            $user_smsc_id = $result_user->tr_smsc;
                            // If XML
                            $is_xml = 0;
                            if ($user_smsc_id == 'XML') {
                                $is_xml = 1;
                            }

                            // Check Numeric/Alphabetic/Alphanumeric Type
                            $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                            if ($check_sender_id) {
                                $reason = "Invalid Sender Id";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "Error: Please check your Sender ID!";
                            }

                            // Insert Campaign
                            $request_by = "By Panel";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");
                            $campaign_status = 2;
                            $message_category = 2;
                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'message_category' => $message_category,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'schedule_date' => $schedule_time,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );
                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $tr_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $tr_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }
                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                            //$this->db->insert_batch('voice_msg_dlr', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                            //$this->db->insert_batch('voice_msg_dlr', $data2);
                                        }

                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }

                                        // Update
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - $required_balance;

                                        /*  $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);

                                        // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            } else {
                                $data_campaign = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'message_category' => $message_category,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'request_by' => $request_by,
                                    'submit_date' => $submit_date,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'schedule_date' => $schedule_time,
                                    'is_xml' => $is_xml,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status
                                );
                                $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Deduct SMS Balance
                                    $deduct_balance = 0;
                                    if (sizeof($actual_result_array)) {
                                        $i = 0;
                                        $data1 = array();
                                        $data2 = array();
                                        foreach ($actual_result_array as $key => $number) {
                                            // Remove Black List Numbers
                                            if (!in_array($number, $black_list_array)) {
                                                $deduct_balance++;
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array1 = array();
                                                $status = "31";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array1['user_group_id'] = $tr_user_group_id;
                                                $temp_array1['campaign_id'] = $campaign_id;
                                                $temp_array1['user_id'] = $user_id;
                                                $temp_array1['msg_id'] = $msg_id;
                                                $temp_array1['message'] = urlencode($new_message);
                                                $temp_array1['msg_length'] = $msg_length;
                                                $temp_array1['mobile_no'] = $number;
                                                $temp_array1['status'] = $status;
                                                $temp_array1['submit_date'] = $subdate;
                                                $temp_array1['temporary_status'] = $temporary_status;
                                                $temp_array1['default_route'] = $user_smsc_id;
                                                $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data1[] = $temp_array1;
                                                unset($temp_array1);
                                            } else {
                                                $new_message = $actual_message_array[$key];
                                                $msg_length = $actual_message_length_array[$key];
                                                $temp_array2 = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $temp_array2['user_group_id'] = $tr_user_group_id;
                                                $temp_array2['campaign_id'] = $campaign_id;
                                                $temp_array2['user_id'] = $user_id;
                                                $temp_array2['msg_id'] = $msg_id;
                                                $temp_array2['message'] = urlencode($new_message);
                                                $temp_array2['msg_length'] = $msg_length;
                                                $temp_array2['mobile_no'] = $number;
                                                $temp_array2['status'] = $status;
                                                $temp_array2['submit_date'] = $subdate;
                                                $temp_array2['temporary_status'] = $temporary_status;
                                                $temp_array2['default_route'] = $user_smsc_id;
                                                $temp_array2['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $data2[] = $temp_array2;
                                                unset($temp_array2);
                                            }
                                        }
                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                            //$this->db->insert_batch('voice_msg_dlr', $data1);
                                        }
                                        if (sizeof($data2)) {
                                            $res2 = $this->db->insert_batch('sent_sms', $data2);
                                            //$this->db->insert_batch('voice_msg_dlr', $data2);
                                        }

                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }

                                        // Uopdate
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - $required_balance;

                                        /*   $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);

                                        // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $required_balance,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    return "100";
                                }
                            }
                        } else {
                            $reason = "Transactional route is not assigned to user";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "102";
                        }
                    }
                }
            } else {
                return 105;
            }
        } else {
            return 106;
        }
    }

    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Send Message From HTTP & XML API
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Send SMS Through HTTP API (Get/Post)
    function sendTestHttpApi($array_users = array()) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        // Extract Post Array
        $user_id = $array_users['user_id'];
        $mobile_numbers = $array_users['mobiles'];
        $message = $array_users['message'];
        $from = $array_users['sender'];
        $route = $array_users['route'];
        $response = $array_users['response'];
        $unicode = $array_users['unicode'];
        $campaign_name = $array_users['campaign'];
        $flash_message = $array_users['flash'];
        $ignorendnc = $array_users['ignorendnc'];
        $schtime = $array_users['schtime'];
        $client_ip_address = $array_users['client_ip_address'];
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);
        if ($result_user) {

            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $number_allowed = $result_user->number_allowed;
            $p_sender_id_option = $result_user->p_sender_id_option;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $dnd_check = $result_user->dnd_check;
            $pro_user_group_id = $result_user->pro_user_group_id;
            $tr_user_group_id = $result_user->tr_user_group_id;
            $prtodnd_balance = $result_user->prtodnd_balance;
            $stock_balance = $result_user->stock_balance;
            $prtodnd_user_group_id = $result_user->prtodnd_route;
            $stock_user_group_id = $result_user->stock_route;
            $international_balance = $result_user->international_balance;
            $international_user_group_id = $result_user->international_route;
            $premium_dnd_check = $result_user->premium_dnd_check;
            $stock_dnd_check = $result_user->stock_dnd_check;
            $admin_approval_status = $result_user->pricing_approval;
            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $pr_fake_sent = $result_user->pr_fake_sent;
            $tr_fake_sent = $result_user->tr_fake_sent;
            $spacial_deliver_pr_ratio = $result_user->spacial_deliver_pr_ratio;
            $spacial_deliver_tr_ratio = $result_user->spacial_deliver_tr_ratio;
            $updated_key_balance;
            $spacial_deliver_fake;
            // Check Account Type
            $admin_id = $result_user->admin_id;
            $ref_user_id = $result_user->ref_user_id;
            $check_demo_user = $result_user->check_demo_user;
            // Check Message is already url encoded or not
            if (urlencode(urldecode($message)) === $message) {
                $message = urldecode($message);
                //$length = strlen($message);
                $length = strlen(utf8_decode($message));
                $actual = str_replace(' ', '', $message);
                $actual_credit = strlen($actual);
            } else {
                $length = strlen(utf8_decode($message));
                $actual = str_replace(' ', '', $message);
                $actual_credit = strlen($actual);
                //$length = strlen($message);
            }
            // Flash SMS
            $mclass = null;
            $alt_dcs = 1;
            $result_flash = $this->sms_model->getFlashMessage($flash_message);
            if ($result_flash) {
                $mclass = $result_flash['mclass'];
                $alt_dcs = $result_flash['alt_dcs'];
            }
            // DLR Mask
            $dlr_mask = "31";
            // Message Encoding
            if ($unicode) {
                $message_type = 2;
            } else {
                $message_type = 1;
            }
            // Calculate Credits
            $charset = "ASCII";
            $coding = 0;
            $total_credits = 0;
            $result_credits = $this->sms_model->getSMSCredits($message_type, $length, $message);
            if ($result_credits) {
                $charset = $result_credits['charset'];
                $coding = $result_credits['coding'];
                $total_credits = $result_credits['credits'];
            }
            // Explode Numbers Into An Array
            $result_array = explode(',', $mobile_numbers);
            // Total Messages
            $total_messages = sizeof($result_array);

            // Wrong Numbers
            $reject_list_array = array();

            if (sizeof($result_array)) {
                foreach ($result_array as $mobile) {
                    //  if (substr($mobile, 0, 2) != 91) {
                    //      $reject_list_array[] = $mobile;
                    //}
                }
            }
            $result_array = array_diff($result_array, $reject_list_array);

            // Check Black List Sender Id
            $black_sender = $this->sms_model->checkBlackSenderIds($from);
            // Get Black Listed Keywrods
            $black_keyword_array = array();
            $result_black_keywords = $this->sms_model->getBlackKeywords();

            if ($result_black_keywords) {
                foreach ($result_black_keywords as $row_bkeyword) {
                    $bkeyword = preg_replace('/\s+/', ' ', urldecode($row_bkeyword['black_keyword']));
                    $bkeyword_array = explode(' ', $bkeyword);
                    $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                }
            }
            $black_keyword_array = array_map('strtolower', $black_keyword_array);
            $black_keyword_array = array_filter($black_keyword_array);
            $result_message_array = array_intersect($black_keyword_array, array_map('strtolower', explode(' ', preg_replace('/\s+/', ' ', $message))));
            // Check Account Type (Demo | Active)
            if ($check_demo_user) {
                if ($admin_id) {
                    $result_info = $this->sms_model->getDefaultSettings();
                    if ($result_info) {
                        if ($result_info->demo_sender != "")
                            $from = $result_info->demo_sender;
                        else
                            $from = "BLKSMS";
                        if ($result_info->demo_message != "")
                            $message = $result_info->demo_message;
                    }
                } elseif ($ref_user_id) {
                    $result_info = $this->sms_model->getUserSettings($ref_user_id);
                    if ($result_info) {
                        if ($result_info->demo_sender != "")
                            $from = $result_info->demo_sender;
                        else
                            $from = "BLKSMS";
                        if ($result_info->demo_message != "")
                            $message = $result_info->demo_message;
                    }
                }
            }
            // Encode Message
            // Check Message is already url encoded or not
            if (urlencode(urldecode($message)) === $message) {
                $message = urlencode($message);
            } else {
                $message = urlencode($message);
            }

            // Get Black Lists & Remove Black List Numbers
            $bresult_array = array();
            $black_list_array = array();
            $result_black_list = $this->sms_model->getBlackLists();
            if ($result_black_list) {
                $black_list_array = $result_black_list;
                $bresult_array = array_intersect($result_array, $black_list_array);
                $result_array = array_diff($result_array, $black_list_array);
            }

            // Actual Balance Required
            $actual_balance_required = $total_messages * $total_credits;


            $approval_status = 1;
            $remainNumberOfSMS = 0;
            $pricing_error = 0;
            // check pricing for message approval
            $pricing_array = array();
//            $pricing_array = $this->user_data_model->checkPricing($user_id);
//            if ($pricing_array) {
//                $txn_id = $pricing_array[0]['txn_log_id'];
//                $pricing = $pricing_array[0]['txn_price'];
//                $tax_status = $pricing_array[0]['tax_status'];
//                $numberOfSMS = $pricing_array[0]['no_of_send_sms'];
//
//
//                if ($admin_approval_status == 0) {
//                    if ($tax_status == 1) {
//                        if ($pricing < .04) {
//                               $approval_status = 0;
//                                  $low_data = array(
//                                    'user_id' => $user_id,
//                                    'pricing'=>$pricing,
//                                );
//                                $this->db->insert('low_pricing_user',$low_data);
//                           
//                        } else {
//                            $approval_status = 1;
//                        }
//                    } elseif ($tax_status == 0) {
//                        if ($pricing < .06) {
//                            
//                                $approval_status = 0;
//                                $low_data = array(
//                                    'user_id' => $user_id,
//                                    'pricing'=>$pricing,
//                                );
//                                $this->db->insert('low_pricing_user',$low_data);
//                            
//                        } else {
//                            $approval_status = 1;
//                        }
//                    }
//                }
//            }
//            $approval_status;
//
//            $pricing_error = 0;
//            if ($approval_status == 0) {
//                $pricing_error = 420;
//            }
            // Check Valid Numbers
            if (sizeof($result_array) || sizeof($reject_list_array) || sizeof($bresult_array)) {
                $new_campaign_uid = 0;
                $xml = "";
                //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                // Promotional SMS
                $balance_status = 1;
                if ($route == "A" || $route == "C" || $route == "D" || $route == "I") {
                    if ($route == 'A' && $pr_sms_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }
                    if ($route == 'C' && $stock_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }
                    if ($route == 'D' && $prtodnd_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }
                    if ($route == 'I' && $international_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }

                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;
                    // Check Available Balance And Send Number of Message
                    if ($balance_status == 0) {
                        $reason = "Insufficient Promotional Balance";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "Error: Not Have Sufficient Balance to Send SMS!";
                    } else {

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            } else {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            }

                            if ($route == 'A' && $special_pr_balance < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'C' && $special_stock_credits < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'D' && $special_prtodnd_credits < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            }

                            /*   if ($special_pr_balance < $actual_balance_required) {
                              $reseller_key_balance_status = 0;
                              } else {

                              $updated_key_balance = $special_pr_balance - $actual_balance_required;
                              $reseller_key_balance_status = 1;
                              } */
                            if ($reseller_key_balance_status == 0) {
                                $reseller_key_balance_status = 0;
                            } else {
                                if ($route == 'A') {
                                    $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'C') {
                                    $updated_key_balance = $special_stock_credits - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'D') {
                                    $updated_key_balance = $special_prtodnd_credits - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }

                                // $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                // $reseller_key_balance_status = 1;
                            }
                        }


                        // Promotional SMS

                        if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id) {

                            if ($route == 'A') {
                                $user_smsc_id = $result_user->pr_smsc;
                                $pro_user_group_id = $pro_user_group_id;
                            }
                            if ($route == 'D') {
                                $user_smsc_id = $result_user->prtodnd_smsc;
                                $pro_user_group_id = $prtodnd_user_group_id;
                            }
                            if ($route == 'C') {
                                $user_smsc_id = $result_user->stock_smsc;
                                $pro_user_group_id = $stock_user_group_id;
                            }
                            if ($route == 'I') {
                                $user_smsc_id = $result_user->international_smsc;
                                $pro_user_group_id = $international_user_group_id;
                            }
                            // If XML
                            $is_xml = 0;
                            $authentication = "";
                            $xml_url = "";
                            if ($user_smsc_id == 'XML') {
                                $result_setting = $this->sms_model->getDefaultSettings();
                                $authentication = $result_setting->xml_route_authkey;
                                $xml_url = $result_setting->xml_route_url;
                                $is_xml = 1;
                            }
                            // Check Sender Id (Open/Close)
                            if ($p_sender_id_option == 0) {
                                $from = "BLKSMS"; // random_string('numeric', 6);
                            }

                            // Insert Campaign
                            $request_by = "By API";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");

                            $deduct_balance = 0;
                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $message_category = 1;
                                // If Schedule SMS
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $campaign_status = 2;
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_black_array['user_group_id'] = $pro_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_black_array['actual_credit'] = $actual_credit;
                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_reject_array['actual_credit'] = $actual_credit;
                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    $count_messages = 0;
                                    if ($route == "A" && $dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "A" && $dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "C" && $stock_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "C" && $stock_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "D" && $premium_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "D" && $premium_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "I") {
                                        $dnd_check = 0;
                                    }


                                    // DND Not Allowed
                                    if ($dnd_check) {
                                        if (sizeof($result_array)) {
                                            $ssms_data = array();
                                            foreach ($result_array as $ndnd_number) {
                                                $ssms_temp_array = array();
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $status = "31";
                                                // Sent SMS
                                                $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                $ssms_temp_array['campaign_id'] = $campaign_id;
                                                $ssms_temp_array['user_id'] = $user_id;
                                                $ssms_temp_array['msg_id'] = $msg_id;
                                                $ssms_temp_array['message'] = $message;
                                                $ssms_temp_array['msg_length'] = $length;
                                                $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                $ssms_temp_array['status'] = $status;
                                                $ssms_temp_array['submit_date'] = $subdate;
                                                $ssms_temp_array['temporary_status'] = $temporary_status;
                                                $ssms_temp_array['default_route'] = $user_smsc_id;
                                                $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $ssms_temp_array['actual_credit'] = $actual_credit;
                                                $ssms_data[] = $ssms_temp_array;
                                                unset($ssms_temp_array);
                                            }
                                            if (sizeof($ssms_data)) {

                                                $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                            }
                                        }
                                    } else {
                                        // Custom DND Filter
                                        $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                        if ($result_dnd) {
                                            $dnd_array = $result_dnd;
                                            $dnd_array_size = sizeof($dnd_array);
                                        }

                                        // Non-DND Numbers
                                        $ndnd_result = array_diff($result_array, $dnd_array);

                                        if (sizeof($dnd_array)) {
                                            $data_dnd = array();
                                            foreach ($dnd_array as $dnd_number) {
                                                $temp_dnd_array = array();
                                                $status = "DND";
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                $temp_dnd_array['campaign_id'] = $campaign_id;
                                                $temp_dnd_array['user_id'] = $user_id;
                                                $temp_dnd_array['msg_id'] = $msg_id;
                                                $temp_dnd_array['message'] = $message;
                                                $temp_dnd_array['msg_length'] = $length;
                                                $temp_dnd_array['mobile_no'] = $dnd_number;
                                                $temp_dnd_array['status'] = $status;
                                                $temp_dnd_array['submit_date'] = $subdate;
                                                $temp_dnd_array['temporary_status'] = $temporary_status;
                                                $temp_dnd_array['default_route'] = $user_smsc_id;
                                                $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_dnd_array['actual_credit'] = $actual_credit;
                                                $data_dnd[] = $temp_dnd_array;
                                                unset($temp_dnd_array);
                                            }
                                            if (sizeof($data_dnd)) {
                                                $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                            }
                                        }

                                        // Get White List Numbers From User Request
                                        if (sizeof($ndnd_result)) {
                                            $ssms_data = array();
                                            foreach ($ndnd_result as $ndnd_number) {
                                                $ssms_temp_array = array();
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $status = "31";
                                                // Sent SMS
                                                $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                $ssms_temp_array['campaign_id'] = $campaign_id;
                                                $ssms_temp_array['user_id'] = $user_id;
                                                $ssms_temp_array['msg_id'] = $msg_id;
                                                $ssms_temp_array['message'] = $message;
                                                $ssms_temp_array['msg_length'] = $length;
                                                $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                $ssms_temp_array['status'] = $status;
                                                $ssms_temp_array['submit_date'] = $subdate;
                                                $ssms_temp_array['temporary_status'] = $temporary_status;
                                                $ssms_temp_array['default_route'] = $user_smsc_id;
                                                $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $ssms_temp_array['actual_credit'] = $actual_credit;
                                                $ssms_data[] = $ssms_temp_array;
                                                unset($ssms_temp_array);
                                            }
                                            if (sizeof($ssms_data)) {
                                                $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                            }
                                        }
                                    }

                                    // Update User Balance
                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                        $updated_key_balance = $updated_key_balance + ($dnd_array_size * $total_credits);
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'I') {
                                        $updated_sms_balance = $international_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }

                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);

                                    // Update Actual Message
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $total_deduction = $deduct_balance * $total_credits;
                                    $total_deduction = $total_deduction - ($dnd_array_size * $total_credits);
                                    $data = array(
                                        'total_deducted' => $total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'campaign_status' => $campaign_status,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    return $campaign_uid;
                                }
                            } else {
                                $message_category = 1;
                                $campaign_status = 1;
                                if ($schtime != "") {
                                    // Schedule Array
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);

                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_black_array['user_group_id'] = $pro_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_black_array['actual_credit'] = $actual_credit;
                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }

                                    // Insert Rejected List Numbers                                    
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_reject_array['actual_credit'] = $actual_credit;
                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    $count_messages = 0;

                                    if ($route == "A" && $dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "A" && $dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "C" && $stock_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "C" && $stock_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "D" && $premium_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "D" && $premium_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "I") {
                                        $dnd_check = 1;
                                    }



                                    // DND Not Allowed
                                    if ($dnd_check) {
                                        if (sizeof($result_array)) {

                                            $white_list_array = array();
                                            $result_white_list = $this->sms_model->getWhiteLists();
                                            if ($result_white_list) {
                                                $white_list_array = $result_white_list;
                                            }
                                            // Apply Ratio (Fake Delivered And Failed)
                                            if (sizeof($result_array) > 88) {
                                                $result_array1 = array_diff($result_array, $white_list_array);
                                                //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                // Apply User Ratio
                                                //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                //apply spacial ratio 
                                                $spacial_deliver_fake = 0;
                                                if ($spacial_deliver_pr_ratio) {
                                                    $spacial_fake_ratio = (sizeof($result_array1) * $spacial_deliver_pr_ratio) / 100;
                                                    $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                }
                                                if ($spacial_deliver_fake) {
                                                    $new_size = sizeof($result_array1);
                                                    $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                    $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                    $u_fake = ROUND($user_fake);
                                                    $user_fake_sent = ($new_own_ratio * $pr_fake_sent) / 100;
                                                    $u_fake_sent = ROUND($user_fake_sent);
                                                    //$user_fail = ($new_own_ratio * $pr_user_fail_ratio) / 100;
                                                    //$u_fail = ROUND($user_fail);
                                                } else {

                                                    $user_fake = (sizeof($result_array1) * $pr_user_fake_ratio) / 100;
                                                    $u_fake = ROUND($user_fake);
                                                    $user_fail = (sizeof($result_array1) * $pr_user_fail_ratio) / 100;
                                                    $u_fail = ROUND($user_fail);
                                                    $user_fake_sent = (sizeof($result_array1) * $pr_fake_sent) / 100;
                                                    $u_fake_sent = ROUND($user_fake_sent);
                                                }
//add both ratio                                   
                                                if ($spacial_deliver_fake) {
                                                    $u_fake = $u_fake + $spacial_deliver_fake;
                                                }


                                                // Get Fake Delivered Number
                                                if ($pr_user_fake_ratio) {
                                                    if ($u_fake) {
                                                        $data_fake = array();
                                                        $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                        $result_array1 = array_diff($result_array1, $fake_d_array);
                                                        foreach ($fake_d_array as $fake_number) {
                                                            $temp_fake_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 2;

                                                            $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_fake_array['campaign_id'] = $campaign_id;
                                                            $temp_fake_array['user_id'] = $user_id;
                                                            $temp_fake_array['msg_id'] = $msg_id;
                                                            $temp_fake_array['message'] = $message;
                                                            $temp_fake_array['msg_length'] = $length;
                                                            $temp_fake_array['mobile_no'] = $fake_number;
                                                            $temp_fake_array['status'] = $status;
                                                            $temp_fake_array['submit_date'] = $subdate;
                                                            $temp_fake_array['temporary_status'] = $temporary_status;
                                                            $temp_fake_array['default_route'] = $user_smsc_id;
                                                            $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $temp_fake_array['actual_credit'] = $actual_credit;
                                                            $data_fake[] = $temp_fake_array;
                                                            unset($temp_fake_array);
                                                        }
                                                        if (sizeof($data_fake)) {
                                                            $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                            //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                        }
                                                    }
                                                }

                                                // Get Fake Failed Number
                                                if ($pr_user_fail_ratio) {
                                                    if ($u_fail) {
                                                        $data_failed = array();
                                                        $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                        $result_array1 = array_diff($result_array1, $fake_f_array);
                                                        foreach ($fake_f_array as $failed_number) {
                                                            $temp_failed_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 3;

                                                            $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_failed_array['campaign_id'] = $campaign_id;
                                                            $temp_failed_array['user_id'] = $user_id;
                                                            $temp_failed_array['msg_id'] = $msg_id;
                                                            $temp_failed_array['message'] = $message;
                                                            $temp_failed_array['msg_length'] = $length;
                                                            $temp_failed_array['mobile_no'] = $failed_number;
                                                            $temp_failed_array['status'] = $status;
                                                            $temp_failed_array['submit_date'] = $subdate;
                                                            $temp_failed_array['temporary_status'] = $temporary_status;
                                                            $temp_failed_array['default_route'] = $user_smsc_id;
                                                            $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $temp_failed_array['actual_credit'] = $actual_credit;
                                                            $data_failed[] = $temp_failed_array;
                                                            unset($temp_failed_array);
                                                        }
                                                        if (sizeof($data_failed)) {
                                                            $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                            //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                        }
                                                    }
                                                }


                                                // Get Fake sent Number
                                                if ($pr_fake_sent) {
                                                    if ($u_fake_sent) {
                                                        $data_failed = array();
                                                        $fake_s_array = $this->sms_model->getRandomArray($result_array1, $u_fake_sent);
                                                        $result_array1 = array_diff($result_array1, $fake_s_array);
                                                        foreach ($fake_s_array as $fake_sent_number) {
                                                            $temp_sent_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "3";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 4;

                                                            $temp_sent_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_sent_array['campaign_id'] = $campaign_id;
                                                            $temp_sent_array['user_id'] = $user_id;
                                                            $temp_sent_array['msg_id'] = $msg_id;
                                                            $temp_sent_array['message'] = $message;
                                                            $temp_sent_array['msg_length'] = $length;
                                                            $temp_sent_array['mobile_no'] = $fake_sent_number;
                                                            $temp_sent_array['status'] = $status;
                                                            $temp_sent_array['submit_date'] = $subdate;
                                                            $temp_sent_array['temporary_status'] = $temporary_status;
                                                            $temp_sent_array['default_route'] = $user_smsc_id;
                                                            $temp_sent_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $temp_sent_array['actual_credit'] = $actual_credit;
                                                            $data_fake_sent[] = $temp_sent_array;
                                                            unset($temp_sent_array);
                                                        }
                                                        if (sizeof($data_fake_sent)) {
                                                            $res_sent = $this->db->insert_batch('sent_sms', $data_fake_sent);
                                                            //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                        }
                                                    }
                                                }
                                                //----------------------------------------------------------------------------------------------------------------------------------------------//

                                                $result = array_intersect($result_array, $white_list_array);
                                                $result_array = array_merge($result_array1, $result);
                                            }



// If No SMSC Route Available

                                            if ($user_smsc_id == 'XML') {
                                                $ssms_data = array();
                                                $loop = 0;
                                                // Prepare XML
                                                $xml .= "<MESSAGE>";
                                                $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                $xml .= "<SENDER>$from</SENDER>";
                                                $xml .= "<ROUTE>default</ROUTE>";
                                                $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                $xml .= "<FLASH>$flash_message</FLASH>";
                                                $xml .= "<UNICODE>$unicode</UNICODE>";
                                                $xml .= "<SMS TEXT='$message'>";
                                                foreach ($result_array as $key => $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    // Add Number Into XML File
                                                    $xml .= "<ADDRESS TO='$number'></ADDRESS>";
                                                }
                                                $xml .= "</SMS>";
                                                $xml .= "</MESSAGE>";
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    if ($reseller_key_balance_status) {
                                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                    }
                                                }
                                            } else {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($result_array as $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $count_messages++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $number;
                                                        $sqlbox_temp_array['msgdata'] = $message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }
                                    } else {
                                        // Custom DND Filter
                                        $dnd_array = array();
                                        $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                        if ($result_dnd) {
                                            $dnd_array = $result_dnd;
                                            $dnd_array_size = sizeof($dnd_array);
                                        }

                                        // Non-DND Numbers
                                        $ndnd_result = array_diff($result_array, $dnd_array);

                                        // DND Numbers
                                        if (sizeof($dnd_array)) {
                                            $data_dnd = array();
                                            foreach ($dnd_array as $dnd_number) {
                                                $temp_dnd_array = array();
                                                $status = "DND";
                                                $deduct_balance++;
                                                $count_messages++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                $temp_dnd_array['campaign_id'] = $campaign_id;
                                                $temp_dnd_array['user_id'] = $user_id;
                                                $temp_dnd_array['msg_id'] = $msg_id;
                                                $temp_dnd_array['message'] = $message;
                                                $temp_dnd_array['msg_length'] = $length;
                                                $temp_dnd_array['mobile_no'] = $dnd_number;
                                                $temp_dnd_array['status'] = $status;
                                                $temp_dnd_array['submit_date'] = $subdate;
                                                $temp_dnd_array['temporary_status'] = $temporary_status;
                                                $temp_dnd_array['default_route'] = $user_smsc_id;
                                                $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_dnd_array['actual_credit'] = $actual_credit;
                                                $data_dnd[] = $temp_dnd_array;
                                                unset($temp_dnd_array);
                                            }
                                            if (sizeof($data_dnd)) {
                                                $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                            }
                                        }

                                        // Non-DND Numbers
                                        if (sizeof($ndnd_result)) {

                                            // If No SMSC Route Available
                                            if ($user_smsc_id == 'XML') {
                                                $ssms_data = array();
                                                $loop = 0;
                                                // Prepare XML
                                                $xml .= "<MESSAGE>";
                                                $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                $xml .= "<SENDER>$from</SENDER>";
                                                $xml .= "<ROUTE>default</ROUTE>";
                                                $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                $xml .= "<FLASH>$flash_message</FLASH>";
                                                $xml .= "<UNICODE>$unicode</UNICODE>";
                                                $xml .= "<SMS TEXT='$message'>";
                                                foreach ($ndnd_result as $key => $ndnd_number) {
                                                    $ssms_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;

                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    // Add Number Into XML File
                                                    $xml .= "<ADDRESS TO='$ndnd_number'></ADDRESS>";
                                                }
                                                $xml .= "</SMS>";
                                                $xml .= "</MESSAGE>";
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    if ($reseller_key_balance_status) {
                                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                    }
                                                }
                                            } else {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($ndnd_result as $ndnd_number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $ndnd_number;
                                                        $sqlbox_temp_array['msgdata'] = $message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }
                                    }

                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                        $updated_key_balance = $updated_key_balance + ($dnd_array_size * $total_credits);
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'I') {
                                        $updated_sms_balance = $international_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }


                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                    // Update Actual Message
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $total_deduction = $deduct_balance * $total_credits;
                                    $total_deduction = $total_deduction - ($dnd_array_size * $total_credits);
                                    $data = array(
                                        'total_deducted' => $total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'campaign_status' => $campaign_status,
                                        'total_time' => $total_time
                                    );
                                    if ($new_campaign_uid) {
                                        $data['campaign_uid'] = $new_campaign_uid;
                                    }
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    // Return Campaign Uid
                                    if ($new_campaign_uid) {
                                        return $new_campaign_uid;
                                    } else {
                                        return $campaign_uid;
                                    }
                                }
                            }
                        } else {
                            $reason = "Promotional route is not assigned to user";
                            $log_by = "By API";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "Error: Promotional route is not assigned to user!";
                        }
                    }

                    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//                    
                }
                // Transactional SMS
                if ($route == "B") {
                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;
                    $updated_key_balance = 0;
                    $spacial_deliver_fake = 0;
                    // Check Available Balance And Send Number of Message
                    if ($tr_sms_balance < $actual_balance_required) {
                        $reason = "Insufficient Transactional Balance";
                        $log_by = "By API";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "Error: Not Have Sufficient Balance to Send SMS!";
                    } else {
//                        $date_status = 0;
//                        if ($user_id == 72) {
//                            $date = date('dmY');
//                            $date_status = strpos($message, $date);
//                            if ($date_status == 0) {
//                                $reason = " Invelid Message Formate And Date!";
//                                $log_by = "By API";
//                                $mobile_data  = $mobile_numbers;
//                                $message_data = $message;
//                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by,$mobile_data,$message_data);
//                                return "Error: Invelid Message Formate And Date!";
//                            } else { 
//                                
//                            }
//                        }

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                            } else {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                            }

                            if ($special_tr_balance < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            } else {

                                $updated_key_balance = $special_tr_balance - $actual_balance_required;
                                $reseller_key_balance_status = 1;
                            }
                        }

                        // Transactional SMS
                        if ($tr_user_group_id) {
                            $user_smsc_id = $result_user->tr_smsc;
                            //check vodafone approve sender ids

                            $check_approve_sender_id = $this->sms_model->checkApproveSenderId($sender_id_type, $sender_id_length, $from);
                            if ($check_approve_sender_id) {

                                $tr_user_group_id = $check_approve_sender_id->route;
                                $this->db->select('smsc_id');
                                $this->db->from('user_groups');
                                $this->db->where('user_group_id', $tr_user_group_id);
                                $query = $this->db->get();

                                $user_smsc_id = $query->row('smsc_id');
                            }
                            // If XML
                            $is_xml = 0;
                            $authentication = "";
                            $xml_url = "";
                            if ($user_smsc_id == 'XML') {
                                $result_setting = $this->sms_model->getDefaultSettings();
                                $authentication = $result_setting->xml_route_authkey;
                                $xml_url = $result_setting->xml_route_url;
                                $is_xml = 1;
                            }
                            // Special Case
                            // Check Numeric/Alphabetic/Alphanumeric Type
                            $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                            if ($check_sender_id) {
                                $reason = "Invalid Sender Id";
                                $log_by = "By API";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "Error: Please check your Sender ID!";
                            }
                            // Insert Campaign
                            $request_by = "By API";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");
                            // Deduct SMS Balance
                            $deduct_balance = 0;
                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $message_category = 1;
                                $campaign_status = 2;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_black_array['user_group_id'] = $tr_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_black_array['actual_credit'] = $actual_credit;
                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_reject_array['actual_credit'] = $actual_credit;
                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Check Sender Id
                                    $sender_condition = 0;
                                    if ($t_sender_id_option) { // Open
                                        $sender_condition = 1;
                                    } else {
                                        $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                        if ($result_sender_id) {
                                            $sender_condition = 1;
                                        }
                                    }

                                    // Check Keyword
                                    $keyword_condition = 0;
                                    if ($keyword_option) { // Open
                                        $keyword_condition = 1;
                                    } else {
                                        $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                        if ($result_keyword) {
                                            $keyword_condition = 1;
                                        }
                                    }

                                    // First Insert Into Database Then Check All Conditions
                                    if (sizeof($result_array)) {
                                        $data1 = array();
                                        foreach ($result_array as $number) {
                                            $temp_array1 = array();
                                            $deduct_balance++;
                                            $status = "31";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;
                                            $temp_array1['user_group_id'] = $tr_user_group_id;
                                            $temp_array1['campaign_id'] = $campaign_id;
                                            $temp_array1['user_id'] = $user_id;
                                            $temp_array1['msg_id'] = $msg_id;
                                            $temp_array1['message'] = $message;
                                            $temp_array1['msg_length'] = $length;
                                            $temp_array1['mobile_no'] = $number;
                                            $temp_array1['status'] = $status;
                                            $temp_array1['submit_date'] = $subdate;
                                            $temp_array1['temporary_status'] = $temporary_status;
                                            $temp_array1['default_route'] = $user_smsc_id;
                                            $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_array1['actual_credit'] = $actual_credit;
                                            $data1[] = $temp_array1;
                                            unset($temp_array1);
                                        }
                                        $res1 = $this->db->insert_batch('sent_sms', $data1);
                                        //$this->db->insert_batch('voice_msg_dlr', $data1);
                                    }

                                    // Get Unique Numbers
                                    $total_unique = 0;
                                    $exceed_numbers = 0;
                                    $db_condition = 0;
                                    $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                    if ($result_numbers) {
                                        $total_unique = $result_numbers;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                        if ($total_unique <= $number_allowed) {
                                            $db_condition = 1;
                                        }
                                    }
                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                    } else {
                                        $updated_key_balance = $special_tr_balance;
                                    }

                                    $balance_type = "TR";
                                    $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                    //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                    /*  $mostParentID = 0;
                                      $spacial_reseller_status = 0;
                                      $most_parent_id_reseller_status = 0;
                                      $updated_key_balance = 0; */


                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);
                                    // Update Actual Message
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $data = array(
                                        'total_deducted' => $deduct_balance * $total_credits,
                                        'actual_message' => $deduct_balance,
                                        'sender_status' => $sender_condition,
                                        'keyword_status' => $keyword_condition,
                                        'number_db_status' => $db_condition,
                                        'unique_numbers' => $total_unique,
                                        'exceed_numbers' => $exceed_numbers,
                                        'campaign_status' => $campaign_status,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    return $campaign_uid;
                                }
                            } else {
                                $campaign_status = 1;
                                $message_category = 1;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();
                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;
                                            $temp_black_array['user_group_id'] = $tr_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_black_array['actual_credit'] = $actual_credit;
                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }
                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_reject_array['actual_credit'] = $actual_credit;
                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Check Sender Id
                                    $sender_condition = 0;
                                    if ($t_sender_id_option) { // Open
                                        $sender_condition = 1;
                                    } else {
                                        if ($check_demo_user && $tr_sms_balance <= 20) {
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }
                                    }

                                    // Check Keyword
                                    $keyword_condition = 0;
                                    if ($keyword_option) { // Open
                                        $keyword_condition = 1;
                                    } else {
                                        if ($check_demo_user && $tr_sms_balance <= 20) {
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }
                                    }

                                    // First Insert Into Database Then Check All Conditions
                                    if (sizeof($result_array)) {
                                        $data1 = array();
                                        foreach ($result_array as $number) {
                                            $temp_array1 = array();
                                            $deduct_balance++;
                                            $status = "31";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;
                                            $temp_array1['user_group_id'] = $tr_user_group_id;
                                            $temp_array1['campaign_id'] = $campaign_id;
                                            $temp_array1['user_id'] = $user_id;
                                            $temp_array1['msg_id'] = $msg_id;
                                            $temp_array1['message'] = $message;
                                            $temp_array1['msg_length'] = $length;
                                            $temp_array1['mobile_no'] = $number;
                                            $temp_array1['status'] = $status;
                                            $temp_array1['submit_date'] = $subdate;
                                            $temp_array1['temporary_status'] = $temporary_status;
                                            $temp_array1['default_route'] = $user_smsc_id;
                                            $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $temp_array1['actual_credit'] = $actual_credit;
                                            $data1[] = $temp_array1;
                                            unset($temp_array1);
                                        }
                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                            //$this->db->insert_batch('voice_msg_dlr', $data1);
                                        }
                                    }

                                    // Get Unique Numbers
                                    $total_unique = 0;
                                    $exceed_numbers = 0;
                                    $db_condition = 0;
                                    $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                    if ($result_numbers) {
                                        $total_unique = $result_numbers;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                        if ($total_unique <= $number_allowed) {
                                            $db_condition = 1;
                                        }
                                    }
                                    // IF SENDER ID APPROVED, KEYWORD APPROVED AND DATABASE NOT EXCEED MORE THAN GIVEN LIMIT
                                    if ($sender_condition && $keyword_condition && $db_condition) {
                                        if ($schtime == "") {
                                            $sms_status = array('DND', 'Blocked', 'Rejected');
                                            $this->db->select('mobile_no, message, status');
                                            $this->db->from('sent_sms');
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->where_not_in('status', $sms_status);
                                            $query = $this->db->get();
                                            if ($query->num_rows() > 0) {
                                                // If No SMSC Route Available
                                                if ($user_smsc_id == 'XML') {
                                                    // Prepare XML
                                                    $xml .= "<MESSAGE>";
                                                    $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                    $xml .= "<SENDER>$from</SENDER>";
                                                    $xml .= "<ROUTE>template</ROUTE>";
                                                    $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                    $xml .= "<FLASH>$flash_message</FLASH>";
                                                    $xml .= "<UNICODE>$unicode</UNICODE>";
                                                    foreach ($query->result() as $row) {
                                                        $xml .= "<SMS TEXT='$row->message'>";
                                                        $xml .= "<ADDRESS TO='$row->mobile_no'></ADDRESS>";
                                                        $xml .= "</SMS>";
                                                    }
                                                    $xml .= "</MESSAGE>";

                                                    if ($reseller_key_balance_status) {
                                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                    }
                                                } else {
                                                    $sqlbox_data = array();
                                                    foreach ($query->result() as $row) {
                                                        $sqlbox_temp_array = array();
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $row->mobile_no;
                                                        $sqlbox_temp_array['msgdata'] = $row->message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                    if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                        $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                    }
                                                }
                                            }
                                        }



                                        if ($reseller_key_balance_status) {
                                            $cal = $spacial_deliver_fake * $total_credits;
                                            $updated_key_balance = $updated_key_balance + $cal;
                                        } else {
                                            $updated_key_balance = $special_tr_balance;
                                        }

                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                        //$response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        /*  $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                        // Update Actual Message
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $deduct_balance * $total_credits,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'campaign_status' => $campaign_status,
                                            'total_time' => $total_time
                                        );
                                        if ($new_campaign_uid) {
                                            $data['campaign_uid'] = $new_campaign_uid;
                                        }
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        // Insert API Hit
                                        $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                        // Return Campaign Uid
                                        if ($new_campaign_uid) {
                                            return $new_campaign_uid;
                                        } else {
                                            return $campaign_uid;
                                        }
                                    } else {
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                        //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        /* $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                        // Update Actual Message
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $deduct_balance * $total_credits,
                                            'actual_message' => $deduct_balance,
                                            'campaign_status' => 2,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        // Insert API Hit
                                        $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                        return $campaign_uid;
                                    }
                                }
                            }
                        } else {
                            $reason = "Transactional route is not assigned to user";
                            $log_by = "By API";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "Error: Transactional route is not assigned to user!";
                        }
                    }
                }
            } else {
                return "Error: Please provide valid mobile number(s)!";
            }
        } else {
            return "Error: Something wrong! Please check your account!";
        }
    }

    // Send SMS Through XML API (Post)
    function sendMessageXmlApi($array_users = array()) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        $user_id = $array_users['user_id'];
        $from = $array_users['sender'];
        $route = $array_users['route'];
        $response = $array_users['response'];
        $unicode = $array_users['unicode'];
        $campaign_name = $array_users['campaign'];
        $flash_message = $array_users ['flash'];
        $schtime = $array_users['schtime'];
        $message_array = $array_users['message'];
        $mobile_array1 = $array_users['mobiles'];
        $request_type = $array_users['request_type'];
        $client_ip_address = $array_users['client_ip_address'];
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);
        if ($result_user) {
            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $prtodnd_balance = $result_user->prtodnd_balance;
            $stock_balance = $result_user->stock_balance;
            $number_allowed = $result_user->number_allowed;
            $p_sender_id_option = $result_user->p_sender_id_option;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $dnd_check = $result_user->dnd_check;
            $premium_dnd_check = $result_user->premium_dnd_check;
            $stock_dnd_check = $result_user->stock_dnd_check;
            $pro_user_group_id = $result_user->pro_user_group_id;
            $tr_user_group_id = $result_user->tr_user_group_id;
            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $prtodnd_user_group_id = $result_user->prtodnd_route;
            $stock_user_group_id = $result_user->stock_route;
            $admin_approval_status = $result_user->pricing_approval;


            // Number of Messages
            if ($request_type == 2) {
                $total_messages = sizeof($mobile_array1, COUNT_RECURSIVE) - sizeof($mobile_array1);
            } elseif ($request_type == 1) {
                $total_messages = sizeof($mobile_array1);
            }

            // Check Black List Sender Id
            $black_sender = $this->sms_model->checkBlackSenderIds($from);

            // Check Black Listed Keywords
            $result_message_array = array();
            $black_keyword_array = array();
            $result_black_keywords = $this->sms_model->getBlackKeywords();
            if ($result_black_keywords) {
                foreach ($result_black_keywords as $row_bkeyword) {
                    $bkeyword = preg_replace('/\s+/', ' ', $row_bkeyword['black_keyword']);
                    $bkeyword_array = explode(' ', $bkeyword);
                    $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                }
            }
            $black_keyword_array = array_map('strtolower', $black_keyword_array);
            $black_keyword_array = array_filter($black_keyword_array);
            if ($request_type == 2) {
                foreach ($message_array as $key => $sms) {
                    $temp_sms = "" . $sms;
                    $result_message_array = array_merge($result_message_array, array_intersect($black_keyword_array, array_map('strtolower', explode(' ', preg_replace('/\s+/', ' ', $temp_sms)))));
                }
            } elseif ($request_type == 1) {
                $result_message_array = array_intersect($black_keyword_array, array_map('strtolower', explode(' ', preg_replace('/\s+/', ' ', implode(' ', $message_array)))));
            }

            // Wrong Numbers
            $reject_list_array = array();
            $mobile_array = array();
            if ($request_type == 2) {
                foreach ($message_array as $key => $sms) {
                    if (sizeof($mobile_array1[$key])) {
                        $temp_reject_array = array();

                        foreach ($mobile_array1[$key] as $mobile) {
                            // if (substr($mobile, 0, 2) != 91) {
                            //   $temp_reject_array[] = $mobile;
                            //   }
                        }
                    }
                    $temp_result_array = array_diff($mobile_array1[$key], $temp_reject_array);
                    $reject_list_array[$key] = $temp_reject_array;
                    $mobile_array[$key] = $temp_result_array;
                    unset($temp_reject_array);
                    unset($temp_result_array);
                }
            } elseif ($request_type == 1) {
                if (sizeof($mobile_array1)) {
                    foreach ($mobile_array1 as $mobile) {
                        // if (substr($mobile, 0, 2) != 91) {
                        //  $reject_list_array[] = $mobile;
                        //}
                    }
                }
                $mobile_array = array_diff($mobile_array1, $reject_list_array);
            }
            // Get Black Lists & Remove Black List Numbers
            $bresult_array = array();
            $result_array = array();
            $black_list_array = array();
            $result_black_list = $this->sms_model->getBlackLists();
            if ($result_black_list) {
                $black_list_array = $result_black_list;
            }
            if ($request_type == 2) {
                foreach ($message_array as $key => $sms) {
                    $temp_bresult_array = array_intersect($mobile_array[$key], $black_list_array);
                    $temp_result_array = array_diff($mobile_array[$key], $black_list_array);
                    $bresult_array[$key] = $temp_bresult_array;
                    $result_array[$key] = $temp_result_array;
                    unset($temp_bresult_array);
                    unset($temp_result_array);
                }
            } elseif ($request_type == 1) {
                $bresult_array = array_intersect($mobile_array, $black_list_array);
                $result_array = array_diff($mobile_array, $black_list_array);
            }
            // DLR Mask
            $dlr_mask = "31";
            // Flash SMS
            $mclass = null;
            $alt_dcs = 1;
            $result_flash = $this->sms_model->getFlashMessage($flash_message);
            if ($result_flash) {
                $mclass = $result_flash['mclass'];
                $alt_dcs = $result_flash['alt_dcs'];
            }
            // Message Encoding
            if ($unicode) {
                $message_type = 2;
                $charset = "UTF-8";
                $coding = 2;
            } else {
                $message_type = 1;
                $charset = "ASCII";
                $coding = 0;
            }
            // Remaining Number of Messages
            $temp_total_messages1 = 0;
            $temp_total_messages2 = 0;
            if ($request_type == 2) {
                $temp_total_messages1 = sizeof($result_array, COUNT_RECURSIVE) - sizeof($result_array);
                $temp_total_messages2 = sizeof($reject_list_array, COUNT_RECURSIVE) - sizeof($reject_list_array);
            } elseif ($request_type == 1) {
                $temp_total_messages1 = sizeof($result_array);
                $temp_total_messages2 = sizeof($reject_list_array);
            }
            //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
            //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
            if ($temp_total_messages1 || $temp_total_messages2) {
                // Promotional SMS
                /* if ($route == "A") {
                  $reseller_key_balance_status = 1;
                  $most_parent_id_reseller_status = 0;
                  // Check Available Balance And Send Number of Message
                  if ($pr_sms_balance < $total_messages) {
                  $reason = "Insufficient Promotional Balance";
                  $log_by = "By API";
                  $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                  return "Error: Not Have Sufficient Balance to Send SMS!";
                  } */

                $balance_status = 1;
                if ($route == "A" || $route == "C" || $route == "D") {

                    if ($route == 'A' && $pr_sms_balance < $total_messages) {
                        $balance_status = 0;
                    }
                    if ($route == 'C' && $stock_balance < $total_messages) {
                        $balance_status = 0;
                    }
                    if ($route == 'D' && $prtodnd_balance < $total_messages) {
                        $balance_status = 0;
                    }

                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;
                    // Check Available Balance And Send Number of Message
                    if ($balance_status == 0) {
                        $reason = "Insufficient Promotional Balance";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "101";
                    } else {

                        //special reseller

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            } else {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            }

                            if ($route == 'A' && $special_pr_balance < $total_messages) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'C' && $special_stock_credits < $total_messages) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'D' && $special_prtodnd_credits < $total_messages) {
                                $reseller_key_balance_status = 0;
                            }

                            /*   if ($special_pr_balance < $actual_balance_required) {
                              $reseller_key_balance_status = 0;
                              } else {

                              $updated_key_balance = $special_pr_balance - $actual_balance_required;
                              $reseller_key_balance_status = 1;
                              } */
                            if ($reseller_key_balance_status == 0) {
                                $reseller_key_balance_status = 0;
                            } else {
                                if ($route == 'A') {
                                    $updated_key_balance = $special_pr_balance - $total_messages;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'C') {
                                    $updated_key_balance = $special_stock_credits - $total_messages;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'D') {
                                    $updated_key_balance = $special_prtodnd_credits - $total_messages;
                                    $reseller_key_balance_status = 1;
                                }

                                // $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                // $reseller_key_balance_status = 1;
                            }
                        }

                        // Promotional SMS
                        if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id) {

                            if ($route == 'A') {
                                $user_smsc_id = $result_user->pr_smsc;
                                $pro_user_group_id = $pro_user_group_id;
                            }
                            if ($route == 'D') {
                                $user_smsc_id = $result_user->prtodnd_smsc;
                                $pro_user_group_id = $prtodnd_user_group_id;
                            }
                            if ($route == 'C') {
                                $user_smsc_id = $result_user->stock_smsc;
                                $pro_user_group_id = $stock_user_group_id;
                            }


                            //  $user_smsc_id = $result_user->pr_smsc;
                            // Check Sender Id (Open/Close)
                            if ($p_sender_id_option == 0) {
                                $from = "BLKSMS"; // random_string('numeric', 6);
                            }

                            // Insert Campaign
                            $request_by = "By API";
                            if ($request_type == 1) {
                                $message = $message_array [0] . "";
                            } elseif ($request_type == 2) {
                                $message = $message_array [0] . ""; //"Multiple Messages";
                            }
                            $message = urlencode($message);

                            //$length = strlen($message);
                            $length = strlen(utf8_decode($message));
                            $actual = str_replace(' ', '', $message);
                            $actual_credit = strlen($actual);

                            if ($message_type == 1) {
                                if ($length % 160 == 0) {
                                    $total_credits = intval($length / 160);
                                } else {
                                    $total_credits = intval($length / 160) + 1;
                                }
                            } elseif ($message_type == 2) {
                                if ($length % 70 == 0) {
                                    $total_credits = intval($length / 70);
                                } else {
                                    $total_credits = intval($length / 70) + 1;
                                }
                            }

                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");

                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $message_category = 1;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $campaign_status = 1;
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                   
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if ($request_type == 2) {
                                        if ((sizeof($bresult_array, COUNT_RECURSIVE) - sizeof($bresult_array))) {
                                            $data_black = array();
                                            foreach ($message_array as $key => $sms) {
                                                if (sizeof($bresult_array[$key])) {
                                                    $length = strlen($sms . "");
                                                    $message_data = urlencode($sms . "");
                                                    foreach ($bresult_array[$key] as $black_number) {
                                                        $temp_black_array = array();
                                                        $status = "Blocked";
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_black_array['campaign_id'] = $campaign_id;
                                                        $temp_black_array['user_id'] = $user_id;
                                                        $temp_black_array['msg_id'] = $msg_id;
                                                        $temp_black_array['message'] = $message_data;
                                                        $temp_black_array['msg_length'] = $length;
                                                        $temp_black_array['mobile_no'] = $black_number;
                                                        $temp_black_array['status'] = $status;
                                                        $temp_black_array['submit_date'] = $subdate;
                                                        $temp_black_array['temporary_status'] = $temporary_status;
                                                        $temp_black_array['default_route'] = $user_smsc_id;
                                                        $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_black_array['actual_credit'] = $actual_credit;
                                                        $data_black[] = $temp_black_array;
                                                        unset($temp_black_array);
                                                    }
                                                }
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }
                                    } elseif ($request_type == 1) {
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }
                                    }

                                    // Insert Rejected List Numbers
                                    if ($request_type == 2) {
                                        if ((sizeof($reject_list_array, COUNT_RECURSIVE) - sizeof($reject_list_array))) {
                                            $data_rejected = array();
                                            foreach ($message_array as $key => $sms) {
                                                if (sizeof($reject_list_array[$key])) {
                                                    $length = strlen($sms . "");
                                                    $message_data = urlencode($sms . "");
                                                    foreach ($reject_list_array[$key] as $reject_number) {
                                                        $temp_reject_array = array();
                                                        $status = "Rejected";
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_reject_array['campaign_id'] = $campaign_id;
                                                        $temp_reject_array['user_id'] = $user_id;
                                                        $temp_reject_array['msg_id'] = $msg_id;
                                                        $temp_reject_array['message'] = $message_data;
                                                        $temp_reject_array['msg_length'] = $length;
                                                        $temp_reject_array['mobile_no'] = $reject_number;
                                                        $temp_reject_array['status'] = $status;
                                                        $temp_reject_array['submit_date'] = $subdate;
                                                        $temp_reject_array['temporary_status'] = $temporary_status;
                                                        $temp_reject_array['default_route'] = $user_smsc_id;
                                                        $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_reject_array['actual_credit'] = $actual_credit;
                                                        $data_rejected[] = $temp_reject_array;
                                                        unset($temp_reject_array);
                                                    }
                                                }
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }
                                    } elseif ($request_type == 1) {
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $status = "Rejected";
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }
                                    }

                                    // Deduct SMS Balance
                                    $updated_total_deduction = 0;
                                    $deduct_balance = 0;


                                    if ($route == "A" && $dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "A" && $dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "C" && $stock_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "C" && $stock_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "D" && $premium_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "D" && $premium_dnd_check == 1) {
                                        $dnd_check = 0;
                                    }



                                    // DND Allowed
                                    if ($dnd_check) {
                                        if ($request_type == 2) {
                                            if (sizeof($result_array, COUNT_RECURSIVE) - sizeof($result_array)) {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($result_array[$key])) {
                                                        $message_data = urlencode($sms . "");
                                                        $length = strlen($message_data);
                                                        //$length = mb_strlen($message_data, "UTF-8");
                                                        $temp_total_credits = 0;

                                                        if ($message_type == 1) {
                                                            if ($length % 160 == 0) {
                                                                $temp_total_credits = intval($length / 160);
                                                            } else {
                                                                $temp_total_credits = intval($length / 160) + 1;
                                                            }
                                                        } elseif ($message_type == 2) {
                                                            if ($length % 70 == 0) {
                                                                $temp_total_credits = intval($length / 70);
                                                            } else {
                                                                $temp_total_credits = intval($length / 70) + 1;
                                                            }
                                                        }
                                                        $updated_total_deduction += $temp_total_credits * sizeof($result_array[$key]);
                                                        foreach ($result_array[$key] as $number) {
                                                            $ssms_temp_array = array();
                                                            $sqlbox_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message_data;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);

                                                            if ($schtime == "") {
                                                                $momt = "MT";
                                                                $sms_type = 2;
                                                                $dlr_url = $campaign_id;

                                                                $sqlbox_temp_array['momt'] = $momt;
                                                                $sqlbox_temp_array['sender'] = $from;
                                                                $sqlbox_temp_array ['receiver'] = $number;
                                                                $sqlbox_temp_array['msgdata'] = $message_data;
                                                                $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                                $sqlbox_temp_array['id'] = $campaign_id;
                                                                $sqlbox_temp_array['sms_type'] = $sms_type;
                                                                $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                                $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                                $sqlbox_temp_array['mclass'] = $mclass;
                                                                $sqlbox_temp_array['coding'] = $coding;
                                                                $sqlbox_temp_array['charset'] = $charset;
                                                                $sqlbox_data[] = $sqlbox_temp_array;
                                                                unset($sqlbox_temp_array);
                                                            }
                                                            $loop++;
                                                        }
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($result_array)) {
                                                $updated_total_deduction += $total_credits * sizeof($result_array);
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($result_array as $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array ['receiver'] = $number;
                                                        $sqlbox_temp_array['msgdata'] = $message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                    $loop++;
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }
                                    } else {

                                        // Custom DND Numbers
                                        $dnd_array = array();
                                        $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                        if ($result_dnd) {
                                            $dnd_array = $result_dnd;
                                        }

                                        // Non-DND Numbers Array
                                        $ndnd_result = array();
                                        //DND Numbers Array
                                        $dnd_result = array();
                                        if ($request_type == 2) {
                                            foreach ($message_array as $key => $sms) {
                                                //$temp_dnd_array = array_intersect($result_array[$key], $dnd_array);
                                                $temp_ndnd_array = array_diff($result_array[$key], $dnd_array);
                                                // Build DND List Array
                                                $dnd_result[$key] = $dnd_array;
                                                // Build Non-DND List Array
                                                $ndnd_result[$key] = $temp_ndnd_array;
                                                unset($temp_dnd_array);
                                                unset($temp_ndnd_array);
                                            }
                                        } elseif ($request_type == 1) {
                                            $dnd_result = $dnd_array; //array_intersect($result_array, $dnd_array);
                                            $ndnd_result = array_diff($result_array, $dnd_array);
                                        }

                                        // Save DND Numbers Into DB
                                        if ($request_type == 2) {
                                            if ((sizeof($dnd_result, COUNT_RECURSIVE) - sizeof($dnd_result))) {
                                                $data_dnd = array();
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($dnd_result[$key])) {
                                                        $length = strlen($sms . "");
                                                        $message_data = urlencode($sms . "");
                                                        foreach ($dnd_result[$key] as $dnd_number) {
                                                            $temp_dnd_array = array();
                                                            $status = "DND";
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;

                                                            $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_dnd_array['campaign_id'] = $campaign_id;
                                                            $temp_dnd_array['user_id'] = $user_id;
                                                            $temp_dnd_array['msg_id'] = $msg_id;
                                                            $temp_dnd_array['message'] = $message_data;
                                                            $temp_dnd_array['msg_length'] = $length;
                                                            $temp_dnd_array['mobile_no'] = $dnd_number;
                                                            $temp_dnd_array['status'] = $status;
                                                            $temp_dnd_array['submit_date'] = $subdate;
                                                            $temp_dnd_array['temporary_status'] = $temporary_status;
                                                            $temp_dnd_array['default_route'] = $user_smsc_id;
                                                            $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $temp_dnd_array['actual_credit'] = $actual_credit;
                                                            $data_dnd[] = $temp_dnd_array;
                                                            unset($temp_dnd_array);
                                                        }
                                                    }
                                                }
                                                if (sizeof($data_dnd)) {
                                                    $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                    //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($dnd_result)) {
                                                $data_dnd = array();
                                                foreach ($dnd_result as $dnd_number) {
                                                    $temp_dnd_array = array();
                                                    $status = "DND";
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;

                                                    $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                    $temp_dnd_array['campaign_id'] = $campaign_id;
                                                    $temp_dnd_array['user_id'] = $user_id;
                                                    $temp_dnd_array['msg_id'] = $msg_id;
                                                    $temp_dnd_array['message'] = $message;
                                                    $temp_dnd_array['msg_length'] = $length;
                                                    $temp_dnd_array['mobile_no'] = $dnd_number;
                                                    $temp_dnd_array['status'] = $status;
                                                    $temp_dnd_array['submit_date'] = $subdate;
                                                    $temp_dnd_array['temporary_status'] = $temporary_status;
                                                    $temp_dnd_array['default_route'] = $user_smsc_id;
                                                    $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $temp_dnd_array['actual_credit'] = $actual_credit;
                                                    $data_dnd[] = $temp_dnd_array;
                                                    unset($temp_dnd_array);
                                                }
                                                if (sizeof($data_dnd)) {
                                                    $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                    //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                }
                                            }
                                        }
                                        if (sizeof($result_array) > 100) {
                                            $result_array1 = array_diff($result_array, $white_list_array);
                                            //----------------------------------------------------------------------------------------------------------------------------------------------//
                                            // Apply User Ratio
                                            //----------------------------------------------------------------------------------------------------------------------------------------------//
                                            $user_fake = (sizeof($result_array1) * $pr_user_fake_ratio) / 100;
                                            $u_fake = ROUND($user_fake);
                                            $user_fail = (sizeof($result_array1) * $pr_user_fail_ratio) / 100;
                                            $u_fail = ROUND($user_fail);

                                            // Get Fake Delivered Number
                                            if ($pr_user_fake_ratio) {
                                                if ($u_fake) {
                                                    $data_fake = array();
                                                    $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                    $result_array1 = array_diff($result_array1, $fake_d_array);
                                                    foreach ($fake_d_array as $fake_number) {
                                                        $temp_fake_array = array();
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 2;

                                                        $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_fake_array['campaign_id'] = $campaign_id;
                                                        $temp_fake_array['user_id'] = $user_id;
                                                        $temp_fake_array['msg_id'] = $msg_id;
                                                        $temp_fake_array['message'] = $message;
                                                        $temp_fake_array['msg_length'] = $length;
                                                        $temp_fake_array['mobile_no'] = $fake_number;
                                                        $temp_fake_array['status'] = $status;
                                                        $temp_fake_array['submit_date'] = $subdate;
                                                        $temp_fake_array['temporary_status'] = $temporary_status;
                                                        $temp_fake_array['default_route'] = $user_smsc_id;
                                                        $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_fake_array['actual_credit'] = $actual_credit;
                                                        $data_fake[] = $temp_fake_array;
                                                        unset($temp_fake_array);
                                                    }
                                                    if (sizeof($data_fake)) {
                                                        $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                        //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                    }
                                                }
                                            }

                                            // Get Fake Failed Number
                                            if ($pr_user_fail_ratio) {
                                                if ($u_fail) {
                                                    $data_failed = array();
                                                    $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                    $result_array1 = array_diff($result_array1, $fake_f_array);
                                                    foreach ($fake_f_array as $failed_number) {
                                                        $temp_failed_array = array();
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 3;

                                                        $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_failed_array['campaign_id'] = $campaign_id;
                                                        $temp_failed_array['user_id'] = $user_id;
                                                        $temp_failed_array['msg_id'] = $msg_id;
                                                        $temp_failed_array['message'] = $message;
                                                        $temp_failed_array['msg_length'] = $length;
                                                        $temp_failed_array['mobile_no'] = $failed_number;
                                                        $temp_failed_array['status'] = $status;
                                                        $temp_failed_array['submit_date'] = $subdate;
                                                        $temp_failed_array['temporary_status'] = $temporary_status;
                                                        $temp_failed_array['default_route'] = $user_smsc_id;
                                                        $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_failed_array['actual_credit'] = $actual_credit;
                                                        $data_failed[] = $temp_failed_array;
                                                        unset($temp_failed_array);
                                                    }
                                                    if (sizeof($data_failed)) {
                                                        $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                        //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                    }
                                                }
                                            }
                                            //----------------------------------------------------------------------------------------------------------------------------------------------//

                                            $result = array_intersect($result_array, $white_list_array);
                                            $result_array = array_merge($result_array1, $result);
                                        }

                                        // Save Non-DND Numbers Into DB
                                        if ($request_type == 2) {
                                            if (sizeof($ndnd_result, COUNT_RECURSIVE) - sizeof($ndnd_result)) {
                                                $ssms_data = array();
                                                $loop = 0;
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($ndnd_result[$key])) {
                                                        $message_data = urlencode($sms . "");
                                                        $length = strlen($message_data);
                                                        //$length = mb_strlen($message_data, "UTF-8");
                                                        $temp_total_credits = 0;

                                                        if ($message_type == 1) {
                                                            if ($length % 160 == 0) {
                                                                $temp_total_credits = intval($length / 160);
                                                            } else {
                                                                $temp_total_credits = intval($length / 160) + 1;
                                                            }
                                                        } elseif ($message_type == 2) {
                                                            if ($length % 70 == 0) {
                                                                $temp_total_credits = intval($length / 70);
                                                            } else {
                                                                $temp_total_credits = intval($length / 70) + 1;
                                                            }
                                                        }
                                                        $updated_total_deduction += $temp_total_credits * sizeof($ndnd_result[$key]);
                                                        foreach ($ndnd_result[$key] as $number) {
                                                            $ssms_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message_data;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);
                                                            $loop++;
                                                        }
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($ndnd_result)) {
                                                $updated_total_deduction += $total_credits * sizeof($ndnd_result);
                                                $ssms_data = array();
                                                $loop = 0;
                                                foreach ($ndnd_result as $number) {
                                                    $ssms_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);
                                                    $loop++;
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            }
                                        }
                                    }

                                    // Balance Uupdation
                                    /*  $balance_type = "PR";
                                      $updated_sms_balance = $pr_sms_balance - $updated_total_deduction; */


                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                    }


                                    // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                    /* echo  $mostParentID;
                                      echo   $spacial_reseller_status;
                                      echo  $most_parent_id_reseller_status;
                                      echo   $updated_key_balance; die; */


                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                    // Update Actual Message // Total Deduction
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $data = array(
                                        'total_deducted' => $updated_total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    return $campaign_uid;
                                }
                            } else {
                                $message_category = 1;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $campaign_status = 1;
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                  
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if ($request_type == 2) {
                                        if ((sizeof($bresult_array, COUNT_RECURSIVE) - sizeof($bresult_array))) {
                                            $data_black = array();
                                            foreach ($message_array as $key => $sms) {
                                                if (sizeof($bresult_array[$key])) {
                                                    $length = strlen($sms . "");
                                                    $message_data = urlencode($sms . "");
                                                    foreach ($bresult_array[$key] as $black_number) {
                                                        $temp_black_array = array();
                                                        $status = "Blocked";
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_black_array['campaign_id'] = $campaign_id;
                                                        $temp_black_array['user_id'] = $user_id;
                                                        $temp_black_array['msg_id'] = $msg_id;
                                                        $temp_black_array['message'] = $message_data;
                                                        $temp_black_array['msg_length'] = $length;
                                                        $temp_black_array['mobile_no'] = $black_number;
                                                        $temp_black_array['status'] = $status;
                                                        $temp_black_array['submit_date'] = $subdate;
                                                        $temp_black_array['temporary_status'] = $temporary_status;
                                                        $temp_black_array['default_route'] = $user_smsc_id;
                                                        $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_black_array['actual_credit'] = $actual_credit;
                                                        $data_black[] = $temp_black_array;
                                                        unset($temp_black_array);
                                                    }
                                                }
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }
                                    } elseif ($request_type == 1) {
                                        if (sizeof($bresult_array)) {
                                            $data_black = array();
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $message;
                                                $temp_black_array['msg_length'] = $length;
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['default_route'] = $user_smsc_id;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_black_array['actual_credit'] = $actual_credit;
                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            if (sizeof($data_black)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                            }
                                        }
                                    }

                                    // Insert Rejected List Numbers
                                    if ($request_type == 2) {
                                        if ((sizeof($reject_list_array, COUNT_RECURSIVE) - sizeof($reject_list_array))) {
                                            $data_rejected = array();
                                            foreach ($message_array as $key => $sms) {
                                                if (sizeof($reject_list_array[$key])) {
                                                    $length = strlen($sms . "");
                                                    $message_data = urlencode($sms . "");
                                                    foreach ($reject_list_array[$key] as $reject_number) {
                                                        $temp_reject_array = array();
                                                        $status = "Rejected";
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_reject_array['campaign_id'] = $campaign_id;
                                                        $temp_reject_array['user_id'] = $user_id;
                                                        $temp_reject_array['msg_id'] = $msg_id;
                                                        $temp_reject_array['message'] = $message_data;
                                                        $temp_reject_array['msg_length'] = $length;
                                                        $temp_reject_array['mobile_no'] = $reject_number;
                                                        $temp_reject_array['status'] = $status;
                                                        $temp_reject_array['submit_date'] = $subdate;
                                                        $temp_reject_array['temporary_status'] = $temporary_status;
                                                        $temp_reject_array['default_route'] = $user_smsc_id;
                                                        $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $temp_reject_array['actual_credit'] = $actual_credit;
                                                        $data_rejected[] = $temp_reject_array;
                                                        unset($temp_reject_array);
                                                    }
                                                }
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }
                                    } elseif ($request_type == 1) {
                                        if (sizeof($reject_list_array)) {
                                            $data_rejected = array();
                                            foreach ($reject_list_array as $reject_number) {
                                                $temp_reject_array = array();
                                                $status = "Rejected";
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                                $temp_reject_array['campaign_id'] = $campaign_id;
                                                $temp_reject_array['user_id'] = $user_id;
                                                $temp_reject_array['msg_id'] = $msg_id;
                                                $temp_reject_array['message'] = $message;
                                                $temp_reject_array['msg_length'] = $length;
                                                $temp_reject_array['mobile_no'] = $reject_number;
                                                $temp_reject_array['status'] = $status;
                                                $temp_reject_array['submit_date'] = $subdate;
                                                $temp_reject_array['temporary_status'] = $temporary_status;
                                                $temp_reject_array['default_route'] = $user_smsc_id;
                                                $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $temp_reject_array['actual_credit'] = $actual_credit;
                                                $data_rejected[] = $temp_reject_array;
                                                unset($temp_reject_array);
                                            }
                                            if (sizeof($data_rejected)) {
                                                $res_black = $this->db->insert_batch('sent_sms', $data_rejected);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                            }
                                        }
                                    }


                                    if ($route == "A" && $dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "A" && $dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "C" && $stock_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "C" && $stock_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "D" && $premium_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "D" && $premium_dnd_check == 1) {
                                        $dnd_check = 0;
                                    }



                                    // Deduct SMS Balance
                                    $updated_total_deduction = 0;
                                    $deduct_balance = 0;
                                    // DND Allowed
                                    if ($dnd_check) {
                                        if ($request_type == 2) {
                                            if (sizeof($result_array, COUNT_RECURSIVE) - sizeof($result_array)) {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($result_array[$key])) {
                                                        $message_data = urlencode($sms . "");
                                                        $length = strlen($message_data);
                                                        //$length = mb_strlen($message_data, "UTF-8");
                                                        $temp_total_credits = 0;

                                                        if ($message_type == 1) {
                                                            if ($length % 160 == 0) {
                                                                $temp_total_credits = intval($length / 160);
                                                            } else {
                                                                $temp_total_credits = intval($length / 160) + 1;
                                                            }
                                                        } elseif ($message_type == 2) {
                                                            if ($length % 70 == 0) {
                                                                $temp_total_credits = intval($length / 70);
                                                            } else {
                                                                $temp_total_credits = intval($length / 70) + 1;
                                                            }
                                                        }

                                                        $updated_total_deduction += $temp_total_credits * sizeof($result_array[$key]);
                                                        foreach ($result_array[$key] as $number) {
                                                            $ssms_temp_array = array();
                                                            $sqlbox_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message_data;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);

                                                            if ($schtime == "") {
                                                                $momt = "MT";
                                                                $sms_type = 2;
                                                                $dlr_url = $campaign_id;

                                                                $sqlbox_temp_array['momt'] = $momt;
                                                                $sqlbox_temp_array['sender'] = $from;
                                                                $sqlbox_temp_array ['receiver'] = $number;
                                                                $sqlbox_temp_array['msgdata'] = $message_data;
                                                                $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                                $sqlbox_temp_array['id'] = $campaign_id;
                                                                $sqlbox_temp_array['sms_type'] = $sms_type;
                                                                $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                                $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                                $sqlbox_temp_array['mclass'] = $mclass;
                                                                $sqlbox_temp_array['coding'] = $coding;
                                                                $sqlbox_temp_array['charset'] = $charset;
                                                                $sqlbox_data[] = $sqlbox_temp_array;
                                                                unset($sqlbox_temp_array);
                                                            }
                                                            $loop++;
                                                        }
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($result_array)) {
                                                $updated_total_deduction += $total_credits * sizeof($result_array);
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($result_array as $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array ['receiver'] = $number;
                                                        $sqlbox_temp_array['msgdata'] = $message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                    $loop++;
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }
                                    } else {
                                        // Custom DND Numbers
                                        // Custom DND Numbers
                                        $dnd_array = array();
                                        $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                        if ($result_dnd) {
                                            $dnd_array = $result_dnd;
                                        }


                                        // Non-DND Numbers Array
                                        $ndnd_result = array();
                                        //DND Numbers Array
                                        $dnd_result = array();
                                        if ($request_type == 2) {
                                            foreach ($message_array as $key => $sms) {
                                                $temp_dnd_array = $dnd_array; //array_intersect($result_array[$key], $dnd_array);
                                                $temp_ndnd_array = array_diff($result_array[$key], $dnd_array);
                                                // Build DND List Array
                                                $dnd_result[$key] = $temp_dnd_array;
                                                // Build Non-DND List Array
                                                $ndnd_result[$key] = $temp_ndnd_array;
                                                unset($temp_dnd_array);
                                                unset($temp_ndnd_array);
                                            }
                                        } elseif ($request_type == 1) {
                                            $dnd_result = $dnd_array; //array_intersect($result_array, $dnd_array);
                                            $ndnd_result = array_diff($result_array, $dnd_array);
                                        }

                                        // Save DND Numbers Into DB
                                        if ($request_type == 2) {
                                            if ((sizeof($dnd_result, COUNT_RECURSIVE) - sizeof($dnd_result))) {
                                                $data_dnd = array();
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($dnd_result[$key])) {
                                                        $length = strlen($sms . "");
                                                        $message_data = urlencode($sms . "");
                                                        foreach ($dnd_result[$key] as $dnd_number) {
                                                            $temp_dnd_array = array();
                                                            $status = "DND";
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;

                                                            $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_dnd_array['campaign_id'] = $campaign_id;
                                                            $temp_dnd_array['user_id'] = $user_id;
                                                            $temp_dnd_array['msg_id'] = $msg_id;
                                                            $temp_dnd_array['message'] = $message_data;
                                                            $temp_dnd_array['msg_length'] = $length;
                                                            $temp_dnd_array['mobile_no'] = $dnd_number;
                                                            $temp_dnd_array['status'] = $status;
                                                            $temp_dnd_array['submit_date'] = $subdate;
                                                            $temp_dnd_array['temporary_status'] = $temporary_status;
                                                            $temp_dnd_array['default_route'] = $user_smsc_id;
                                                            $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $temp_dnd_array['actual_credit'] = $actual_credit;
                                                            $data_dnd[] = $temp_dnd_array;
                                                            unset($temp_dnd_array);
                                                        }
                                                    }
                                                }
                                                if (sizeof($data_dnd)) {
                                                    $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                    //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($dnd_result)) {
                                                $data_dnd = array();
                                                foreach ($dnd_result as $dnd_number) {
                                                    $temp_dnd_array = array();
                                                    $status = "DND";
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;

                                                    $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                    $temp_dnd_array['campaign_id'] = $campaign_id;
                                                    $temp_dnd_array['user_id'] = $user_id;
                                                    $temp_dnd_array['msg_id'] = $msg_id;
                                                    $temp_dnd_array['message'] = $message;
                                                    $temp_dnd_array['msg_length'] = $length;
                                                    $temp_dnd_array['mobile_no'] = $dnd_number;
                                                    $temp_dnd_array['status'] = $status;
                                                    $temp_dnd_array['submit_date'] = $subdate;
                                                    $temp_dnd_array['temporary_status'] = $temporary_status;
                                                    $temp_dnd_array['default_route'] = $user_smsc_id;
                                                    $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $temp_dnd_array['actual_credit'] = $actual_credit;
                                                    $data_dnd[] = $temp_dnd_array;
                                                    unset($temp_dnd_array);
                                                }
                                                if (sizeof($data_dnd)) {
                                                    $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                    //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                }
                                            }
                                        }

                                        // Get White List Numbers From User Request
                                        // Save Non-DND Numbers Into DB
                                        if ($request_type == 2) {
                                            if (sizeof($ndnd_result, COUNT_RECURSIVE) - sizeof($ndnd_result)) {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($ndnd_result[$key])) {
                                                        $message_data = urlencode($sms . "");
                                                        $length = strlen($message_data);
                                                        //$length = mb_strlen($message_data, "UTF-8");
                                                        $temp_total_credits = 0;
                                                        if ($message_type == 1) {
                                                            if ($length % 160 == 0) {
                                                                $temp_total_credits = intval($length / 160);
                                                            } else {
                                                                $temp_total_credits = intval($length / 160) + 1;
                                                            }
                                                        } elseif ($message_type == 2) {
                                                            if ($length % 70 == 0) {
                                                                $temp_total_credits = intval($length / 70);
                                                            } else {
                                                                $temp_total_credits = intval($length / 70) + 1;
                                                            }
                                                        }
                                                        $updated_total_deduction += $temp_total_credits * sizeof($ndnd_result[$key]);
                                                        foreach ($ndnd_result[$key] as $number) {
                                                            $ssms_temp_array = array();
                                                            $sqlbox_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message_data;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);

                                                            if ($schtime == "") {
                                                                $momt = "MT";
                                                                $sms_type = 2;
                                                                $dlr_url = $campaign_id;

                                                                $sqlbox_temp_array['momt'] = $momt;
                                                                $sqlbox_temp_array['sender'] = $from;
                                                                $sqlbox_temp_array ['receiver'] = $number;
                                                                $sqlbox_temp_array['msgdata'] = $message_data;
                                                                $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                                $sqlbox_temp_array['id'] = $campaign_id;
                                                                $sqlbox_temp_array['sms_type'] = $sms_type;
                                                                $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                                $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                                $sqlbox_temp_array['mclass'] = $mclass;
                                                                $sqlbox_temp_array['coding'] = $coding;
                                                                $sqlbox_temp_array['charset'] = $charset;
                                                                $sqlbox_data[] = $sqlbox_temp_array;
                                                                unset($sqlbox_temp_array);
                                                            }
                                                            $loop++;
                                                        }
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($ndnd_result)) {
                                                $updated_total_deduction += $total_credits * sizeof($ndnd_result);
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($ndnd_result as $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array ['receiver'] = $number;
                                                        $sqlbox_temp_array['msgdata'] = $message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                    $loop++;
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }
                                    }

                                    // Balance Updation
                                    /*  $balance_type = "PR";
                                      $updated_sms_balance = $pr_sms_balance - $updated_total_deduction; */

                                    //update spacial balance 
                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                    }


                                    // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                    /*  echo  $mostParentID;
                                      echo   $spacial_reseller_status;
                                      echo  $most_parent_id_reseller_status;
                                      echo   $updated_key_balance; die; */


                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                    // Update Actual Message // Total Deduction
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $data = array(
                                        'total_deducted' => $updated_total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    return $campaign_uid;
                                }
                            }
                        } else {
                            $reason = "Promotional Route Is Not Assigned To User";
                            $log_by = "By API";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "Error: Promotional Route Is Not Assigned To User!";
                        }
                    }
                    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                }

                // Transactional Route
                if ($route == "B") {
                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;
                    // Check Available Balance And Send Number of Message
                    if ($tr_sms_balance < $total_messages) {
                        $reason = "Insufficient Transactional Balance";
                        $log_by = "By API";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "Error: Not Have Sufficient Balance to Send SMS!";
                    } else {

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                            } else {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                            }

                            if ($special_tr_balance < $total_messages) {
                                $reseller_key_balance_status = 0;
                            } else {

                                $updated_key_balance = $special_tr_balance - $total_messages;
                                $reseller_key_balance_status = 1;
                            }
                        }


                        // Transactional SMS
                        if ($tr_user_group_id) {
                            $user_smsc_id = $result_user->tr_smsc;
                            //check vodafone sender id
                            $check_approve_sender_id = $this->sms_model->checkApproveSenderId($sender_id_type, $sender_id_length, $from);
                            if ($check_approve_sender_id) {

                                $tr_user_group_id = $check_approve_sender_id->route;
                                $this->db->select('smsc_id');
                                $this->db->from('user_groups');
                                $this->db->where('user_group_id', $tr_user_group_id);
                                $query = $this->db->get();

                                $user_smsc_id = $query->row('smsc_id');
                            }
                            // Check Numeric/Alphabetic/Alphanumeric Type
                            $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                            if ($check_sender_id) {
                                $reason = "Invalid Sender Id";
                                $log_by = "By API";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "Error: Please check your Sender ID!";
                            }

                            $request_by = "By API";
                            if ($request_type == 1) {
                                $message = $message_array [0] . "";
                            } elseif ($request_type == 2) {
                                $message = $message_array [0] . ""; //"Multiple Messages";
                            }

                            //$length = strlen($message);
                            $length = strlen(utf8_decode($message));
                            $actual = str_replace(' ', '', $message);
                            $actual_credit = strlen($actual);


                            $total_credits = 0;
                            if ($message_type == 1) {
                                if ($length % 160 == 0) {
                                    $total_credits = intval($length / 160);
                                } else {
                                    $total_credits = intval($length / 160) + 1;
                                }
                            } elseif ($message_type == 2) {
                                if ($length % 70 == 0) {
                                    $total_credits = intval($length / 70);
                                } else {
                                    $total_credits = intval($length / 70) + 1;
                                }
                            }

                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");

                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $campaign_status = 1;
                                $message_category = 1;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                 
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Check Sender Id
                                    $sender_condition = 0;
                                    if ($t_sender_id_option) { // Open
                                        $sender_condition = 1;
                                    } else {
                                        $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                        if ($result_sender_id) {
                                            $sender_condition = 1;
                                        }
                                    }

                                    // Check Keyword
                                    if ($request_type == 1) {
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }
                                    } elseif ($request_type == 2) {
                                        $keyword_condition = 1;
                                    }

                                    // Get Unique Numbers
                                    $number_array = array();
                                    $result_numbers = $this->sms_model->getUniqueNumbers($user_id);
                                    if ($result_numbers) {
                                        $jj = 0;
                                        foreach ($result_numbers as $row_number) {
                                            $number_array[$jj] = $row_number['mobile_no'];
                                            $jj++;
                                        }
                                    }

                                    // Check Unique Number DB
                                    if ($request_type == 2) {
                                        $result_total_numbers = array();
                                        foreach ($message_array as $key => $sms) {
                                            $result_total_numbers = array_merge($result_total_numbers, $result_array[$key]);
                                        }
                                        $result_total_numbers = array_merge($result_total_numbers, $number_array);
                                        $result_unique_numbers = array_unique($result_total_numbers);
                                        $total_unique = sizeof($result_unique_numbers);
                                        $exceed_numbers = 0;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                    } elseif ($request_type == 1) {
                                        $result_total_numbers = array_merge($result_array, $number_array);
                                        $result_unique_numbers = array_unique($result_total_numbers);
                                        $total_unique = sizeof($result_unique_numbers);
                                        $exceed_numbers = 0;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                    }

                                    // Save Condition
                                    $condition_status = "";
                                    // Check Unique Numbers
                                    $db_condition = "";
                                    if ($total_unique <= $number_allowed) {
                                        $db_condition = 1;
                                    } else {
                                        $db_condition = 0;
                                    }

                                    // Deduct SMS Balance
                                    $updated_total_deduction = 0;
                                    $deduct_balance = 0;

                                    if ($request_type == 2) {
                                        if (sizeof($result_array, COUNT_RECURSIVE) - sizeof($result_array)) {
                                            $ssms_data = array();
                                            $loop = 0;
                                            foreach ($message_array as $key => $sms) {
                                                if (sizeof($result_array[$key])) {
                                                    $message_data = urlencode($sms . "");
                                                    $length = strlen($message_data);
                                                    //$length = mb_strlen($message_data, "UTF-8");
                                                    $temp_total_credits = 0;
                                                    if ($message_type == 1) {
                                                        if ($length % 160 == 0) {
                                                            $temp_total_credits = intval($length / 160);
                                                        } else {
                                                            $temp_total_credits = intval($length / 160) + 1;
                                                        }
                                                    } elseif ($message_type == 2) {
                                                        if ($length % 70 == 0) {
                                                            $temp_total_credits = intval($length / 70);
                                                        } else {
                                                            $temp_total_credits = intval($length / 70) + 1;
                                                        }
                                                    }
                                                    $updated_total_deduction += $temp_total_credits * sizeof($result_array[$key]);
                                                    foreach ($result_array[$key] as $number) {
                                                        $ssms_temp_array = array();
                                                        $deduct_balance++;
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $message_data;
                                                        $ssms_temp_array['msg_length'] = $length;
                                                        $ssms_temp_array['mobile_no'] = $number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['default_route'] = $user_smsc_id;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_temp_array['actual_credit'] = $actual_credit;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);
                                                        $loop++;
                                                    }
                                                }
                                            }
                                            if (sizeof($ssms_data)) {
                                                $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                            }
                                        }
                                    } elseif ($request_type == 1) {
                                        if (sizeof($result_array)) {
                                            $updated_total_deduction += $total_credits * sizeof($result_array);
                                            $ssms_data = array();
                                            $loop = 0;
                                            foreach ($result_array as $number) {
                                                $ssms_temp_array = array();
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $status = "31";
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                $ssms_temp_array['campaign_id'] = $campaign_id;
                                                $ssms_temp_array['user_id'] = $user_id;
                                                $ssms_temp_array['msg_id'] = $msg_id;
                                                $ssms_temp_array['message'] = $message;
                                                $ssms_temp_array['msg_length'] = $length;
                                                $ssms_temp_array['mobile_no'] = $number;
                                                $ssms_temp_array['status'] = $status;
                                                $ssms_temp_array['submit_date'] = $subdate;
                                                $ssms_temp_array['temporary_status'] = $temporary_status;
                                                $ssms_temp_array['default_route'] = $user_smsc_id;
                                                $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $ssms_temp_array['actual_credit'] = $actual_credit;
                                                $ssms_data[] = $ssms_temp_array;
                                                unset($ssms_temp_array);
                                                $loop++;
                                            }
                                            if (sizeof($ssms_data)) {
                                                $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                            }
                                        }
                                    }

                                    // Balance Updation
                                    $balance_type = "TR";
                                    $updated_sms_balance = $tr_sms_balance - $updated_total_deduction;
                                    //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                    /* $mostParentID = 0;
                                      $spacial_reseller_status = 0;
                                      $most_parent_id_reseller_status = 0;
                                      $updated_key_balance = 0; */


                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);
                                    // Update Actual Message & // Total Deduction
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $data = array(
                                        'total_deducted' => $updated_total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'sender_status' => $sender_condition,
                                        'keyword_status' => $keyword_condition,
                                        'number_db_status' => $db_condition,
                                        'unique_numbers' => $total_unique,
                                        'exceed_numbers' => $exceed_numbers,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    return $campaign_uid;
                                }
                            } else {
                                $campaign_status = 1;
                                $message_category = 1;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'campaign_status' => $campaign_status,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_custom' => 1,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Check Sender Id
                                    $sender_condition = 0;
                                    if ($t_sender_id_option) { // Open
                                        $sender_condition = 1;
                                    } else {
                                        $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                        if ($result_sender_id) {
                                            $sender_condition = 1;
                                        }
                                    }

                                    // Check Keyword
                                    if ($request_type == 1) {
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }
                                    } elseif ($request_type == 2) {
                                        $keyword_condition = 1;
                                    }


                                    // Get Unique Numbers
                                    $number_array = array();
                                    $result_numbers = $this->sms_model->getUniqueNumbers($user_id);
                                    if ($result_numbers) {
                                        $jj = 0;
                                        foreach ($result_numbers as $row_number) {
                                            $number_array[$jj] = $row_number['mobile_no'];
                                            $jj++;
                                        }
                                    }

                                    // Check Unique Number DB
                                    if ($request_type == 2) {
                                        $result_total_numbers = array();
                                        foreach ($message_array as $key => $sms) {
                                            $result_total_numbers = array_merge($result_total_numbers, $result_array[$key]);
                                        }
                                        $result_total_numbers = array_merge($result_total_numbers, $number_array);
                                        $result_unique_numbers = array_unique($result_total_numbers);
                                        $total_unique = sizeof($result_unique_numbers);
                                        $exceed_numbers = 0;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                    } elseif ($request_type == 1) {
                                        $result_total_numbers = array_merge($result_array, $number_array);
                                        $result_unique_numbers = array_unique($result_total_numbers);
                                        $total_unique = sizeof($result_unique_numbers);
                                        $exceed_numbers = 0;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                    }

                                    // Save Condition
                                    $condition_status = "";
                                    // Check Unique Numbers
                                    $db_condition = "";
                                    if ($total_unique <= $number_allowed) {
                                        $db_condition = 1;
                                    } else {
                                        $db_condition = 0;
                                    }

                                    // Deduct SMS Balance
                                    $updated_total_deduction = 0;
                                    $deduct_balance = 0;
                                    // IF SENDER ID APPROVED, KEYWORD APPROVED AND DATABASE NOT EXCEED MORE THAN GIVEN LIMIT
                                    if ($sender_condition == 1 && $keyword_condition == 1 && $total_unique <= $number_allowed) {
                                        if ($request_type == 2) {
                                            if (sizeof($result_array, COUNT_RECURSIVE) - sizeof($result_array)) {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($result_array[$key])) {
                                                        $message_data = urlencode($sms . "");
                                                        $length = strlen($message_data);
                                                        //$length = mb_strlen($message_data, "UTF-8");
                                                        $temp_total_credits = 0;
                                                        if ($message_type == 1) {
                                                            if ($length % 160 == 0) {
                                                                $temp_total_credits = intval($length / 160);
                                                            } else {
                                                                $temp_total_credits = intval($length / 160) + 1;
                                                            }
                                                        } elseif ($message_type == 2) {
                                                            if ($length % 70 == 0) {
                                                                $temp_total_credits = intval($length / 70);
                                                            } else {
                                                                $temp_total_credits = intval($length / 70) + 1;
                                                            }
                                                        }
                                                        $updated_total_deduction += $temp_total_credits * sizeof($result_array[$key]);
                                                        foreach ($result_array[$key] as $number) {
                                                            $ssms_temp_array = array();
                                                            $sqlbox_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message_data;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                            $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);

                                                            if ($schtime == "") {
                                                                $momt = "MT";
                                                                $sms_type = 2;
                                                                $dlr_url = $campaign_id;

                                                                $sqlbox_temp_array['momt'] = $momt;
                                                                $sqlbox_temp_array['sender'] = $from;
                                                                $sqlbox_temp_array ['receiver'] = $number;
                                                                $sqlbox_temp_array['msgdata'] = $message_data;
                                                                $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                                $sqlbox_temp_array['id'] = $campaign_id;
                                                                $sqlbox_temp_array['sms_type'] = $sms_type;
                                                                $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                                $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                                $sqlbox_temp_array['mclass'] = $mclass;
                                                                $sqlbox_temp_array['coding'] = $coding;
                                                                $sqlbox_temp_array['charset'] = $charset;
                                                                $sqlbox_data[] = $sqlbox_temp_array;
                                                                unset($sqlbox_temp_array);
                                                            }
                                                            $loop++;
                                                        }
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($result_array)) {
                                                $updated_total_deduction += $total_credits * sizeof($result_array);
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($result_array as $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                      $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array ['receiver'] = $number;
                                                        $sqlbox_temp_array['msgdata'] = $message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                    $loop++;
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }

                                        // Balance Updation
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - $updated_total_deduction;
                                        //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);

                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);
                                        // Update Actual Message & // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $updated_total_deduction,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        // Insert API Hit
                                        $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                        return $campaign_uid;
                                    } else {
                                        if ($request_type == 2) {
                                            if (sizeof($result_array, COUNT_RECURSIVE) - sizeof($result_array)) {
                                                $ssms_data = array();
                                                $loop = 0;
                                                foreach ($message_array as $key => $sms) {
                                                    if (sizeof($result_array[$key])) {
                                                        $message_data = urlencode($sms . "");
                                                        $length = strlen($message_data);
                                                        //$length = mb_strlen($message_data, "UTF-8");
                                                        $temp_total_credits = 0;
                                                        if ($message_type == 1) {
                                                            if ($length % 160 == 0) {
                                                                $temp_total_credits = intval($length / 160);
                                                            } else {
                                                                $temp_total_credits = intval($length / 160) + 1;
                                                            }
                                                        } elseif ($message_type == 2) {
                                                            if ($length % 70 == 0) {
                                                                $temp_total_credits = intval($length / 70);
                                                            } else {
                                                                $temp_total_credits = intval($length / 70) + 1;
                                                            }
                                                        }
                                                        $updated_total_deduction += $temp_total_credits * sizeof($result_array[$key]);
                                                        foreach ($result_array[$key] as $number) {
                                                            $ssms_temp_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 1;
                                                            $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                            $ssms_temp_array['campaign_id'] = $campaign_id;
                                                            $ssms_temp_array['user_id'] = $user_id;
                                                            $ssms_temp_array['msg_id'] = $msg_id;
                                                            $ssms_temp_array['message'] = $message_data;
                                                            $ssms_temp_array['msg_length'] = $length;
                                                            $ssms_temp_array['mobile_no'] = $number;
                                                            $ssms_temp_array['status'] = $status;
                                                            $ssms_temp_array['submit_date'] = $subdate;
                                                            $ssms_temp_array['temporary_status'] = $temporary_status;
                                                            $ssms_temp_array['default_route'] = $user_smsc_id;
                                                            $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                           $ssms_temp_array['actual_credit'] = $actual_credit;
                                                            $ssms_data[] = $ssms_temp_array;
                                                            unset($ssms_temp_array);
                                                            $loop++;
                                                        }
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            }
                                        } elseif ($request_type == 1) {
                                            if (sizeof($result_array)) {
                                                $updated_total_deduction += $total_credits * sizeof($result_array);
                                                $ssms_data = array();
                                                $loop = 0;
                                                foreach ($result_array as $number) {
                                                    $ssms_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                  $ssms_temp_array['actual_credit'] = $actual_credit;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);
                                                    $loop++;
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            }
                                        }

                                        // Balance Updation
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - $updated_total_deduction;
                                        // $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        /* $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */

                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);
                                        // Update Actual Message & // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $updated_total_deduction,
                                            'campaign_status' => 2,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        // Insert API Hit
                                        $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                        return $campaign_uid;
                                    }
                                }
                            }
                        } else {
                            $reason = "Transactional Route Is Not Assigned To User";
                            $log_by = "By API";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "Error: Transactional Route Is Not Assigned To User!";
                        }
                    }
                }
            } else {
                return "Error: Please provide valid mobile number(s)!";
            }
        } else {
            return "Error: Something wrong! Please check your account!";
        }
    }

    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Scheduled SMS
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Send Scheduled SMS
    function sendScheduleSMS($current_time = null) {
        $result_schedule = $this->sms_model->getScheduledSMS($current_time);
        if ($result_schedule) {
            // Campaigns
            foreach ($result_schedule as $key => $row_sch) {
                $campaign_id = $row_sch['campaign_id'];
                $campaign_name = $row_sch['campaign_name'];
                $sender_id = $row_sch['sender_id'];
                $user_id = $row_sch['user_id'];
                $schedule_date = $row_sch['schedule_date'];
                $message_type = $row_sch['message_type'];
                $flash_message = $row_sch['flash_message'];
                $route = $row_sch['route'];
                $actual_message = $row_sch ['actual_message'];
                $text_message = $row_sch['message'];
                $sender_status = $row_sch['sender_status'];
                $keyword_status = $row_sch['keyword_status'];
                $number_db_status = $row_sch['number_db_status'];
                $is_xml = $row_sch['is_xml'];
                $reseller_key_balance_status = $row_sch['reseller_key_balance_status'];

                $result_user = $this->sms_model->getUserSettings($user_id);
                if ($result_user) {
                    $number_allowed = $result_user->number_allowed;
                    $pr_sms_balance = $result_user->pr_sms_balance;
                    $tr_sms_balance = $result_user->tr_sms_balance;
                    $prtodnd_balance = $result_user->prtodnd_balance;
                    $stock_balance = $result_user->stock_balance;
                    $p_sender_id_option = $result_user->p_sender_id_option;
                    $t_sender_id_option = $result_user->t_sender_id_option;
                    $keyword_option = $result_user->keyword_option;
                    $sender_id_type = $result_user->sender_id_type;
                    $sender_id_length = $result_user->sender_id_length;
                    $dnd_check = $result_user->dnd_check;
                    $pro_user_group_id = $result_user->pro_user_group_id;
                    $tr_user_group_id = $result_user->tr_user_group_id;
                    $user_fake_ratio = $result_user->user_fake_ratio;
                    $user_fail_ratio = $result_user->user_fail_ratio;
                    $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
                    $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;

                    $prtodnd_user_group_id = $result_user->prtodnd_route;
                    $stock_user_group_id = $result_user->stock_route;
                    $admin_approval_status = $result_user->pricing_approval;
                    // Calculate Credits
                    //$length = strlen(utf8_decode(urldecode($sms['message'])));
                    $charset = "ASCII";
                    $coding = 0;
                    $total_credits = 0;
                    $unicode = 0;
                    $result_credits = $this->sms_model->getSMSCredits($message_type, 0, $text_message);
                    if ($result_credits) {
                        $charset = $result_credits['charset'];
                        $coding = $result_credits['coding'];
                        $total_credits = $result_credits['credits'];
                        $unicode = $result_credits['unicode'];
                    }
                    // Flash Message
                    $mclass = null;
                    $alt_dcs = 1;
                    $result_flash = $this->sms_model->getFlashMessage($flash_message);
                    if ($result_flash) {
                        $mclass = $result_flash['mclass'];
                        $alt_dcs = $result_flash['alt_dcs'];
                    }
                    // DLR Mask (All Type of Delivery Reports)
                    $dlr_mask = "31";

                    $new_campaign_uid = 0;
                    $xml = "";


                    // Promotional SMS
                    if ($route == "A" || $route == "C" || $route == "D" || $route == "I") {
                        // Promotional SMS (User Group)
                        if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id || $international_user_group_id) {
                            if ($route == 'A') {
                                $user_smsc_id = $result_user->pr_smsc;
                                $pro_user_group_id = $pro_user_group_id;
                            }
                            if ($route == 'D') {
                                $user_smsc_id = $result_user->prtodnd_smsc;
                                $pro_user_group_id = $prtodnd_user_group_id;
                            }
                            if ($route == 'C') {
                                $user_smsc_id = $result_user->stock_smsc;
                                $pro_user_group_id = $stock_user_group_id;
                            }
                            if ($route == 'I') {
                                $user_smsc_id = $result_user->international_smsc;
                                $pro_user_group_id = $international_user_group_id;
                            }


                            //  $user_smsc_id = $result_user->pr_smsc;
                            // If XML
                            $authentication = "";
                            $xml_url = "";
                            if ($user_smsc_id == 'XML' || $is_xml) {
                                $result_setting = $this->sms_model->getDefaultSettings();
                                $authentication = $result_setting->xml_route_authkey;
                                $xml_url = $result_setting->xml_route_url;
                            }
                            // Get SMS From Sent SMS of Selected Campaign
                            $result_sms = $this->sms_model->getSentSMS($campaign_id);
                            $sqlbox_data = array();
                            if ($result_sms) {
                                // If No SMSC Route Available
                                if ($user_smsc_id == 'XML' || $is_xml) {
                                    // Prepare XML
                                    $xml .= "<MESSAGE>";
                                    $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                    $xml .= "<SENDER>$sender_id</SENDER>";
                                    $xml .= "<ROUTE>Default</ROUTE>";
                                    $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                    $xml .= "<FLASH>$flash_message</FLASH>";
                                    $xml .= "<UNICODE>$unicode</UNICODE>";
                                    foreach ($result_sms as $key => $sms) {
                                        $xml .= "<SMS TEXT='$sms->message'>";
                                        $xml .= "<ADDRESS TO='$sms->mobile_no'></ADDRESS>";
                                        $xml .= "</SMS>";
                                    }
                                    $xml .= "</MESSAGE>";
                                    if ($reseller_key_balance_status) {
                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                    }
                                } else {
                                    foreach ($result_sms as $sms) {
                                        $sqlbox_temp_array = array();
                                        $message = $sms->message;
                                        $mobile_no = $sms->mobile_no;
                                        $momt = "MT";
                                        $sms_type = 2;
                                        $dlr_url = $campaign_id;
                                        $sqlbox_temp_array['momt'] = $momt;
                                        $sqlbox_temp_array['sender'] = $sender_id;
                                        $sqlbox_temp_array['receiver'] = $mobile_no;
                                        $sqlbox_temp_array['msgdata'] = $message;
                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                        $sqlbox_temp_array['id'] = $campaign_id;
                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                        $sqlbox_temp_array['mclass'] = $mclass;
                                        $sqlbox_temp_array['coding'] = $coding;
                                        $sqlbox_temp_array['charset'] = $charset;
                                        $sqlbox_data[] = $sqlbox_temp_array;
                                        unset($sqlbox_temp_array);
                                    }
                                    if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                        $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                    }
                                }
                                // Update Schedule Status
                                $data = array('schedule_status' => '0');
                                if ($new_campaign_uid) {
                                    $data['campaign_uid'] = $new_campaign_uid;
                                }
                                $this->db->where('campaign_id', $campaign_id);
                                $this->db->update('campaigns', $data);
                            }
                        } else {
                            $reason = "Promotional route is not assigned to user";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        }
                        // Transactional SMS
                    } elseif ($route == 'B') {
                        // Transactional SMS (User Group)
                        if ($tr_user_group_id) {
                            $user_smsc_id = $result_user->tr_smsc;
                            // If XML
                            $authentication = "";
                            $xml_url = "";
                            if ($user_smsc_id == 'XML' || $is_xml) {
                                $result_setting = $this->sms_model->getDefaultSettings();
                                $authentication = $result_setting->xml_route_authkey;
                                $xml_url = $result_setting->xml_route_url;
                            }
                            // Get SMS From Sent SMS of Selected Campaign
                            $result_sms = $this->sms_model->getSentSMS($campaign_id);
                            if ($result_sms) {
                                // If No SMSC Route Available
                                if ($user_smsc_id == 'XML' || $is_xml) {
                                    // Prepare XML
                                    $xml .= "<MESSAGE>";
                                    $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                    $xml .= "<SENDER>$sender_id</SENDER>";
                                    $xml .= "<ROUTE>Template</ROUTE>";
                                    $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                    $xml .= "<FLASH>$flash_message</FLASH>";
                                    $xml .= "<UNICODE>$unicode</UNICODE>";
                                    foreach ($result_sms as $key => $sms) {
                                        $xml .= "<SMS TEXT='$sms->message'>";
                                        $xml .= "<ADDRESS TO='$sms->mobile_no'></ADDRESS>";
                                        $xml .= "</SMS>";
                                    }
                                    $xml .= "</MESSAGE>";
                                    if ($reseller_key_balance_status) {
                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                    }
                                } else {
                                    foreach ($result_sms as $sms) {
                                        $message = $sms->message;
                                        $mobile_no = $sms->mobile_no;
                                        $momt = "MT";
                                        $sms_type = 2;
                                        $dlr_url = $campaign_id;
                                        $sqlbox_temp_array['momt'] = $momt;
                                        $sqlbox_temp_array['sender'] = $sender_id;
                                        $sqlbox_temp_array['receiver'] = $mobile_no;
                                        $sqlbox_temp_array['msgdata'] = $message;
                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                        $sqlbox_temp_array['id'] = $campaign_id;
                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                        $sqlbox_temp_array['mclass'] = $mclass;
                                        $sqlbox_temp_array['coding'] = $coding;
                                        $sqlbox_temp_array['charset'] = $charset;
                                        $sqlbox_data[] = $sqlbox_temp_array;
                                        unset($sqlbox_temp_array);
                                    }
                                    if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                        $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                    }
                                }
                                // Update Schedule Status
                                $data = array('schedule_status' => '0');
                                if ($new_campaign_uid) {
                                    $data['campaign_uid'] = $new_campaign_uid;
                                }
                                $this->db->where('campaign_id', $campaign_id);
                                $this->db->update('campaigns', $data);
                            }
                        } else {
                            $reason = "Transactional route is not assigned to user";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        }
                    }
                }
            }
        } else {
            return false;
        }
    }

    // Send Now Scheduled SMS
    function sendNowScheduleSMS($campaign_id = 0) {
        $row_sch = $this->user_data_model->getCampaignInfo($campaign_id);
        $current_date = date('Y-m-d H:i:s');
        if ($row_sch) {
            $campaign_id = $row_sch->campaign_id;
            $campaign_name = $row_sch->campaign_name;
            $sender_id = $row_sch->sender_id;
            $user_id = $row_sch->user_id;
            $message_type = $row_sch->message_type;
            $flash_message = $row_sch->flash_message;
            $route = $row_sch->route;
            $actual_message = $row_sch->actual_message;
            $text_message = $row_sch->message;
            $sender_status = $row_sch->sender_status;
            $keyword_status = $row_sch->keyword_status;
            $number_db_status = $row_sch->number_db_status;
            $is_xml = $row_sch->is_xml;
            $reseller_key_balance_status = $row_sch->reseller_key_balance_status;
            $result_user = $this->sms_model->getUserSettings($user_id);
            if ($result_user) {
                $number_allowed = $result_user->number_allowed;
                $pr_sms_balance = $result_user->pr_sms_balance;
                $tr_sms_balance = $result_user->tr_sms_balance;
                $p_sender_id_option = $result_user->p_sender_id_option;
                $t_sender_id_option = $result_user->t_sender_id_option;
                $keyword_option = $result_user->keyword_option;
                $sender_id_type = $result_user->sender_id_type;
                $sender_id_length = $result_user->sender_id_length;
                $dnd_check = $result_user->dnd_check;
                $pro_user_group_id = $result_user->pro_user_group_id;
                $tr_user_group_id = $result_user->tr_user_group_id;
                $user_fake_ratio = $result_user->user_fake_ratio;
                $user_fail_ratio = $result_user->user_fail_ratio;
                $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
                $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
                $prtodnd_user_group_id = $result_user->prtodnd_route;
                $stock_user_group_id = $result_user->stock_route;
                $admin_approval_status = $result_user->pricing_approval;
                // Calculate Credits
                //$length = strlen(utf8_decode(urldecode($sms['message'])));
                $charset = "ASCII";
                $coding = 0;
                $total_credits = 0;
                $unicode = 0;
                $result_credits = $this->sms_model->getSMSCredits($message_type, 0, $text_message);
                if ($result_credits) {
                    $charset = $result_credits['charset'];
                    $coding = $result_credits['coding'];
                    $total_credits = $result_credits['credits'];
                    $unicode = $result_credits['unicode'];
                }
                // Flash Message
                $mclass = null;
                $alt_dcs = 1;
                $result_flash = $this->sms_model->getFlashMessage($flash_message);
                if ($result_flash) {
                    $mclass = $result_flash['mclass'];
                    $alt_dcs = $result_flash['alt_dcs'];
                }
                // DLR Mask (All Type of Delivery Reports)
                $dlr_mask = "31";

                $new_campaign_uid = 0;
                $xml = "";

                // Promotional SMS
                if ($route == "A" || $route == "C" || $route == "D" || $route == "I") {
                    // Promotional SMS (User Group)
                    if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id || $international_user_group_id) {

                        if ($route == 'A') {
                            $user_smsc_id = $result_user->pr_smsc;
                            $pro_user_group_id = $pro_user_group_id;
                        }
                        if ($route == 'D') {
                            $user_smsc_id = $result_user->prtodnd_smsc;
                            $pro_user_group_id = $prtodnd_user_group_id;
                        }
                        if ($route == 'C') {
                            $user_smsc_id = $result_user->stock_smsc;
                            $pro_user_group_id = $stock_user_group_id;
                        }
                        if ($route == 'I') {
                            $user_smsc_id = $result_user->international_smsc;
                            $pro_user_group_id = $international_user_group_id;
                        }


                        // $user_smsc_id = $result_user->pr_smsc;
                        // If XML
                        $authentication = "";
                        $xml_url = "";
                        if ($user_smsc_id == 'XML' || $is_xml) {
                            $result_setting = $this->sms_model->getDefaultSettings();
                            $authentication = $result_setting->xml_route_authkey;
                            $xml_url = $result_setting->xml_route_url;
                        }
                        // Get SMS From Sent SMS of Selected Campaign
                        $result_sms = $this->sms_model->getSentSMS($campaign_id);
                        $sqlbox_data = array();
                        if ($result_sms) {
                            // If No SMSC Route Available
                            if ($user_smsc_id == 'XML' || $is_xml) {
                                // Prepare XML
                                $xml .= "<MESSAGE>";
                                $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                $xml .= "<SENDER>$sender_id</SENDER>";
                                $xml .= "<ROUTE>Default</ROUTE>";
                                $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                $xml .= "<FLASH>$flash_message</FLASH>";
                                $xml .= "<UNICODE>$unicode</UNICODE>";
                                foreach ($result_sms as $key => $sms) {
                                    $xml .= "<SMS TEXT='$sms->message'>";
                                    $xml .= "<ADDRESS TO='$sms->mobile_no'></ADDRESS>";
                                    $xml .= "</SMS>";
                                }
                                $xml .= "</MESSAGE>";
                                if ($reseller_key_balance_status) {
                                    $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                }
                            } else {
                                foreach ($result_sms as $sms) {
                                    $sqlbox_temp_array = array();
                                    $message = $sms->message;
                                    $mobile_no = $sms->mobile_no;
                                    $momt = "MT";
                                    $sms_type = 2;
                                    $dlr_url = $campaign_id;
                                    $sqlbox_temp_array['momt'] = $momt;
                                    $sqlbox_temp_array['sender'] = $sender_id;
                                    $sqlbox_temp_array['receiver'] = $mobile_no;
                                    $sqlbox_temp_array['msgdata'] = $message;
                                    $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                    $sqlbox_temp_array['id'] = $campaign_id;
                                    $sqlbox_temp_array['sms_type'] = $sms_type;
                                    $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                    $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                    $sqlbox_temp_array['mclass'] = $mclass;
                                    $sqlbox_temp_array['coding'] = $coding;
                                    $sqlbox_temp_array['charset'] = $charset;
                                    $sqlbox_data[] = $sqlbox_temp_array;
                                    unset($sqlbox_temp_array);
                                }
                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                }
                            }
                        }

                        // Update Campaign
                        $data = array(
                            'schedule_status' => '0',
                            'schedule_date' => $current_date
                        );
                        if ($new_campaign_uid) {
                            $data['campaign_uid'] = $new_campaign_uid;
                        }
                        $this->db->where('campaign_id', $campaign_id);
                        $this->db->update('campaigns', $data);
                        return 200;
                    } else {
                        $reason = "Promotional route is not assigned to user";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return 100;
                    }
                    // Transactional SMS
                } elseif ($route == 'B') {
                    // Transactional SMS (User Group)
                    if ($tr_user_group_id) {
                        $user_smsc_id = $result_user->tr_smsc;
                        // If XML
                        $authentication = "";
                        $xml_url = "";
                        if ($user_smsc_id == 'XML' || $is_xml) {
                            $result_setting = $this->sms_model->getDefaultSettings();
                            $authentication = $result_setting->xml_route_authkey;
                            $xml_url = $result_setting->xml_route_url;
                        }
                        // Get SMS From Sent SMS of Selected Campaign
                        $result_sms = $this->sms_model->getSentSMS($campaign_id);
                        if ($result_sms) {
                            // If No SMSC Route Available
                            if ($user_smsc_id == 'XML' || $is_xml) {
                                // Prepare XML
                                $xml .= "<MESSAGE>";
                                $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                $xml .= "<SENDER>$sender_id</SENDER>";
                                $xml .= "<ROUTE>Template</ROUTE>";
                                $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                $xml .= "<FLASH>$flash_message</FLASH>";
                                $xml .= "<UNICODE>$unicode</UNICODE>";
                                foreach ($result_sms as $key => $sms) {
                                    $xml .= "<SMS TEXT='$sms->message'>";
                                    $xml .= "<ADDRESS TO='$sms->mobile_no'></ADDRESS>";
                                    $xml .= "</SMS>";
                                }
                                $xml .= "</MESSAGE>";
                                if ($reseller_key_balance_status) {
                                    $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                }
                            } else {
                                foreach ($result_sms as $sms) {
                                    $message = $sms->message;
                                    $mobile_no = $sms->mobile_no;
                                    $momt = "MT";
                                    $sms_type = 2;
                                    $dlr_url = $campaign_id;
                                    $sqlbox_temp_array['momt'] = $momt;
                                    $sqlbox_temp_array['sender'] = $sender_id;
                                    $sqlbox_temp_array['receiver'] = $mobile_no;
                                    $sqlbox_temp_array['msgdata'] = $message;
                                    $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                    $sqlbox_temp_array['id'] = $campaign_id;
                                    $sqlbox_temp_array['sms_type'] = $sms_type;
                                    $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                    $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                    $sqlbox_temp_array['mclass'] = $mclass;
                                    $sqlbox_temp_array['coding'] = $coding;
                                    $sqlbox_temp_array['charset'] = $charset;
                                    $sqlbox_data[] = $sqlbox_temp_array;
                                    unset($sqlbox_temp_array);
                                }
                                if (sizeof($sqlbox_data) && $reseller_key_balance_status) {
                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                }
                            }
                        }
                        // Update Campaign
                        $data = array(
                            'schedule_status' => '0',
                            'schedule_date' => $current_date
                        );
                        if ($new_campaign_uid) {
                            $data['campaign_uid'] = $new_campaign_uid;
                        }
                        $this->db->where('campaign_id', $campaign_id);
                        $this->db->update('campaigns', $data);
                        return 200;
                    } else {
                        $reason = "Transactional route is not assigned to user";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return 100;
                    }
                }
            }
        } else {
            return 101;
        }
    }

    function reSendMessageAdmin($user_id = 0, $action_from = null) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);
        if ($result_user) {
            $session_data = $this->session->userdata('admin_logged_in');
            $resend_admin_id = $session_data['admin_id'];
            // Form Values
            // Campaign Id
            $campaign_id = $this->input->post('resend_campaign_id');
            // Routing
            $route_array = explode('-', $this->input->post('resend_route'));
            // USer Group
            $new_smsc_id = "";
            $new_ugroup_id = 0;
            if ($route_array[0]) {
                $new_smsc_id = $route_array[0];
                $new_ugroup_id = $route_array[2];
            }

            // XML API Credentials
            $new_campaign_uid = 0;
            $xml = "";
            // If XML
            $is_xml = 0;
            $authentication = "";
            $xml_file = "";
            if ($new_smsc_id == 'XML') {
                $result_setting = $this->sms_model->getDefaultSettings();
                $authentication = $result_setting->xml_route_authkey;
                $xml_url = $result_setting->xml_route_url;
                $is_xml = 1;
            }
            // Route (A|B)
            $route = $route_array[1];
            // Action Type
            $action_type = $this->input->post('resend_action_type');
            // Get Campaign Info
            $result_campaign = $this->user_data_model->getCampaignInfo($campaign_id);
            if ($result_campaign) {
                $campaign_name = $result_campaign->campaign_name;
                $from = $result_campaign->sender_id;
                $message_type = $result_campaign->message_type;
                $flash_message = $result_campaign->flash_message;
                $message = $result_campaign->message;
                // Calculate Credits
                //$length = strlen(utf8_decode(urldecode($sms['message'])));
                $charset = "ASCII";
                $coding = 0;
                $total_credits = 0;
                $unicode = 0;
                $result_credits = $this->sms_model->getSMSCredits($message_type, 0, $message);
                if ($result_credits) {
                    $charset = $result_credits['charset'];
                    $coding = $result_credits['coding'];
                    $total_credits = $result_credits['credits'];
                    $unicode = $result_credits['unicode'];
                }
                // Flash Message
                $mclass = null;
                $alt_dcs = 1;
                $result_flash = $this->sms_model->getFlashMessage($flash_message);
                if ($result_flash) {
                    $mclass = $result_flash['mclass'];
                    $alt_dcs = $result_flash['alt_dcs'];
                }
                // Action Type
                $sms_status = array();
                $temprary_status = 0;
                if ($action_type == 1) {
                    // All
                    $sms_status = array();
                    $temprary_status = 0;
                } elseif ($action_type == 2) {
                    // Only Failed
                    $sms_status = array('2');
                    $temprary_status = 1;
                } elseif ($action_type == 3) {
                    // Only Pending, Submit, Buffered, Report Pending
                    $sms_status = array('31', '8', '4', '3');
                    $temprary_status = 1;
                } elseif ($action_type == '4') {
                    // Only Delivered
                    $sms_status = array('1');
                    $temprary_status = 1;
                } elseif ($action_type == '5') {
                    // Only Fake Delivered
                    $sms_status = array();
                    $temprary_status = 3;
                } elseif ($action_type == '6') {
                    // Only Fake Failed
                    $sms_status = array();
                    $temprary_status = 2;
                } elseif ($action_type == '7') {
                    // Only Rejected
                    $sms_status = array('16', 'Rejected');
                    $temprary_status = 1;
                } elseif ($action_type == '8') {
                    // Only Pending
                    $sms_status = array('31');
                    $temprary_status = 1;
                } elseif ($action_type == '9') {
                    // Only Pending
                    $sms_status = array('3');
                    $temprary_status = 4;
                }

                // Get Sent/Pending/Failed/Delievred/Fake Failed/Fake Delivered SMS
                $result_resend_sms = $this->sms_model->getResendSMS($campaign_id, $sms_status, $temprary_status);
                if ($result_resend_sms) {
                    $result_array = array();
                    $result_message_array = array();
                    foreach ($result_resend_sms as $key => $value) {
                        $result_array[] = $value->mobile_no;
                        $result_message_array[$value->mobile_no] = $value->message;
                    }
                    // DLR Mask
                    $dlr_mask = "31";
                    $momt = "MT";
                    $sms_type = 2;
                    $dlr_url = $campaign_id;
                    // Select Route And Process
                    // Promotioal Route
                    if ($route == 'A' || $route == 'C' || $route == 'D' || $route == 'I') {
                        if (sizeof($result_array)) {
                            // No SMSC Route Available
                            if ($new_smsc_id == 'XML') {
                                // Prepare XML
                                $xml_file .= "<MESSAGE>";
                                $xml_file .= "<AUTHKEY>$authentication</AUTHKEY>";
                                $xml_file .= "<SENDER>$from</SENDER>";
                                $xml_file .= "<ROUTE>Default</ROUTE>";
                                $xml_file .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                $xml_file .= "<FLASH>$flash_message</FLASH>";
                                $xml_file .= "<UNICODE>$unicode</UNICODE>";
                                foreach ($result_array as $number) {
                                    $xml_file .= "<SMS TEXT='" . $result_message_array[$number] . "'>";
                                    $xml_file .= "<ADDRESS TO='$number'></ADDRESS>";
                                    $xml_file .= "</SMS>";
                                }
                                $xml_file .= "</MESSAGE>";
                                $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml_file);
                            } else {
                                $sqlbox_data = array();
                                foreach ($result_array as $number) {
                                    $sqlbox_temp_array = array();
                                    // SQLBox Send SMS
                                    $sqlbox_temp_array['momt'] = $momt;
                                    $sqlbox_temp_array['sender'] = $from;
                                    $sqlbox_temp_array['receiver'] = $number;
                                    $sqlbox_temp_array['msgdata'] = $result_message_array[$number];
                                    $sqlbox_temp_array['smsc_id'] = $new_smsc_id;
                                    $sqlbox_temp_array['id'] = $campaign_id;
                                    $sqlbox_temp_array['sms_type'] = $sms_type;
                                    $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                    $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                    $sqlbox_temp_array['mclass'] = $mclass;
                                    $sqlbox_temp_array['coding'] = $coding;
                                    $sqlbox_temp_array['charset'] = $charset;
                                    $sqlbox_data[] = $sqlbox_temp_array;
                                    unset($sqlbox_temp_array);
                                }
                                if (sizeof($sqlbox_data)) {
                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                }
                            }
                            // Update Campaign Uid
                            if (isset($new_campaign_uid) && $new_campaign_uid) {
                                $data = array(
                                    'campaign_uid' => $new_campaign_uid,
                                    'resend_ugroup_id' => $new_ugroup_id,
                                    'resend_admin_id' => $resend_admin_id
                                );
                                $this->db->where('campaign_id', $campaign_id);
                                $this->db->update('campaigns', $data);
                            } else {
                                $data = array(
                                    'resend_ugroup_id' => $new_ugroup_id,
                                    'resend_admin_id' => $resend_admin_id
                                );
                                $this->db->where('campaign_id', $campaign_id);
                                $this->db->update('campaigns', $data);
                            }
                            return 1;
                        } else {
                            return 100;
                        }
                    }
                    // Transactional Route
                    if ($route == 'B') {
                        $user_smsc_id = $result_user->tr_smsc;
                        if (sizeof($result_array)) {
                            // No SMSC Route Available
                            if ($new_smsc_id == 'XML') {
                                // Prepare XML
                                $xml_file .= "<MESSAGE>";
                                $xml_file .= "<AUTHKEY>$authentication</AUTHKEY>";
                                $xml_file .= "<SENDER>$from</SENDER>";
                                $xml_file .= "<ROUTE>Template</ROUTE>";
                                $xml_file .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                $xml_file .= "<FLASH>$flash_message</FLASH>";
                                $xml_file .= "<UNICODE>$unicode</UNICODE>";
                                foreach ($result_array as $number) {
                                    $xml_file .= "<SMS TEXT='" . $result_message_array[$number] . "'>";
                                    $xml_file .= "<ADDRESS TO='$number'></ADDRESS>";
                                    $xml_file .= "</SMS>";
                                }
                                $xml_file .= "</MESSAGE>";
                                $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml_file);
                            } else {
                                $sqlbox_data = array();
                                foreach ($result_array as $number) {
                                    $sqlbox_temp_array = array();
                                    // SQLBox Send SMS
                                    $sqlbox_temp_array['momt'] = $momt;
                                    $sqlbox_temp_array['sender'] = $from;
                                    $sqlbox_temp_array['receiver'] = $number;
                                    $sqlbox_temp_array['msgdata'] = $result_message_array[$number];
                                    $sqlbox_temp_array['smsc_id'] = $new_smsc_id;
                                    $sqlbox_temp_array['id'] = $campaign_id;
                                    $sqlbox_temp_array['sms_type'] = $sms_type;
                                    $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                    $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                    $sqlbox_temp_array['mclass'] = $mclass;
                                    $sqlbox_temp_array['coding'] = $coding;
                                    $sqlbox_temp_array['charset'] = $charset;
                                    $sqlbox_data[] = $sqlbox_temp_array;
                                    unset($sqlbox_temp_array);
                                }
                                if (sizeof($sqlbox_data)) {
                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                }
                            }
                            // Update Campaign Uid
                            if (isset($new_campaign_uid) && $new_campaign_uid) {
                                $data = array(
                                    'campaign_uid' => $new_campaign_uid,
                                    'resend_ugroup_id' => $new_ugroup_id,
                                    'resend_admin_id' => $resend_admin_id
                                );
                                $this->db->where('campaign_id', $campaign_id);
                                $this->db->update('campaigns', $data);
                            } else {
                                $data = array(
                                    'resend_ugroup_id' => $new_ugroup_id,
                                    'resend_admin_id' => $resend_admin_id
                                );
                                $this->db->where('campaign_id', $campaign_id);
                                $this->db->update('campaigns', $data);
                            }
                            return 1;
                        } else {
                            return 100;
                        }
                    } else {
                        return '100';
                    }
                } else {
                    return '103';
                }
            } else {
                return '100';
            }
        } else {
            return '100';
        }
    }

    function reSendMessage($user_id = 0, $action_from = null) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);
        if ($result_user) {
            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $prtodnd_balance = $result_user->prtodnd_balance;
            $stock_balance = $result_user->stock_balance;
            $number_allowed = $result_user->number_allowed;
            $p_sender_id_option = $result_user->p_sender_id_option;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $dnd_check = $result_user->dnd_check;
            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $spacial_deliver_pr_ratio = $result_user->spacial_deliver_pr_ratio;
            $spacial_deliver_tr_ratio = $result_user->spacial_deliver_tr_ratio;
            $prtodnd_user_group_id = $result_user->prtodnd_route;
            $stock_user_group_id = $result_user->stock_route;
            $pr_fake_sent = $result_user->pr_fake_sent;
            $tr_fake_sent = $result_user->tr_fake_sent;
            $admin_approval_status = $result_user->pricing_approval;
            // Check Account Type
            $admin_id = $result_user->admin_id;
            $ref_user_id = $result_user->ref_user_id;
            $check_demo_user = $result_user->check_demo_user;
            // Form Values
            // Campaign Id
            $campaign_id = $this->input->post('resend_campaign_id');
            // Campaign Name
            $campaign_name = "Resend";
            if ($this->input->post('resend_campaign_name') != "") {
                $campaign_name = $this->input->post('resend_campaign_name');
            }
            // Routing
            $route_array = explode('-', $this->input->post('resend_route'));
            // USer Group
            if ($route_array[0]) {
                $pro_user_group_id = $route_array[0];
                $tr_user_group_id = $route_array[0];
            } else {
                $pro_user_group_id = $result_user->pro_user_group_id;
                $tr_user_group_id = $result_user->tr_user_group_id;
            }
            // Route (A|B)
            $route = $route_array[1];
            // Action Type
            $action_type = $this->input->post('resend_action_type');

            // Get Campaign Info
            $result_campaign = $this->user_data_model->getCampaignInfo($campaign_id);
            if ($result_campaign) {
                $request_by = "By Panel";
                $campaign_uid = strtolower(random_string('alnum', 24));
                $submit_date = date("Y-m-d H:i:s");
                // $total_credits = $result_campaign->total_credits;
                $from = $result_campaign->sender_id;
                $message_type = $result_campaign->message_type;
                $flash_message = $result_campaign->flash_message;
                $message = $result_campaign->message;
                $message_length = $result_campaign->message_length;
                // Calculate Credits
                //$length = strlen(utf8_decode(urldecode($sms['message'])));
                $charset = "ASCII";
                $coding = 0;
                $total_credits = 0;
                $unicode = 0;
                $result_credits = $this->sms_model->getSMSCredits($message_type, $message_length, $message);
                if ($result_credits) {
                    $charset = $result_credits['charset'];
                    $coding = $result_credits['coding'];
                    $total_credits = $result_credits['credits'];
                    $unicode = $result_credits['unicode'];
                }
                // Flash Message
                $mclass = null;
                $alt_dcs = 1;
                $result_flash = $this->sms_model->getFlashMessage($flash_message);
                if ($result_flash) {
                    $mclass = $result_flash['mclass'];
                    $alt_dcs = $result_flash['alt_dcs'];
                }
                // Action Type
                if ($action_type == 1) {
                    // All
                    $sms_status = array();
                    $temprary_status = 0;
                } elseif ($action_type == 2) {
                    // Only Failed
                    $sms_status = array('2');
                    $temprary_status = 1;
                } elseif ($action_type == 3) {
                    // Only Pending, Submit, Buffered, Report Pending
                    $sms_status = array('31', '8', '4', '3');
                    $temprary_status = 1;
                } elseif ($action_type == '4') {
                    // Only Delivered
                    $sms_status = array('1');
                    $temprary_status = 1;
                } elseif ($action_type == '5') {
                    // Only Fake Delivered
                    $sms_status = array();
                    $temprary_status = 2;
                } elseif ($action_type == '6') {
                    // Only Fake Failed
                    $sms_status = array();
                    $temprary_status = 3;
                } elseif ($action_type == '7') {
                    // Only Rejected
                    $sms_status = array('16', 'Rejected');
                    $temprary_status = 1;
                }

                // Get Sent/Pending/Failed/Delievred/Fake Failed/Fake Delivered SMS
                $result_resend_sms = $this->sms_model->getResendSMS($campaign_id, $sms_status, $temprary_status);
                if ($result_resend_sms) {
                    $result_array = array();
                    $result_message_array = array();
                    $result_message_length = array();
                    $result_message_credit = array();
                    // Required Balance
                    $required_balance = 0;
                    foreach ($result_resend_sms as $key => $value) {
                        $result_array[] = $value->mobile_no;
                        $result_message_array[$value->mobile_no] = $value->message;
                        $result_message_length[$value->mobile_no] = strlen(urldecode($value->message));
                        $credits = 0;
                        $length = strlen(utf8_decode(urldecode($value->message)));
                        if ($message_type == 2) {
                            if ($length % 70 == 0) {
                                $credits = intval($length / 70);
                            } else {
                                $credits = intval($length / 70) + 1;
                            }
                        } elseif ($message_type == 1) {
                            if ($length % 160 == 0) {
                                $credits = intval($length / 160);
                            } else {
                                $credits = intval($length / 160) + 1;
                            }
                        }
                        $required_balance+=$credits;
                        $result_message_credit[$value->mobile_no] = $credits;
                    }

                    // Get Black Lists
                    $black_list_array = array();
                    $result_black_list = $this->sms_model->getBlackLists();
                    if ($result_black_list) {
                        $black_list_array = $result_black_list;
                    }

                    // Check Black List Sender Id
                    $black_sender = $this->sms_model->checkBlackSenderIds($from);

                    // Get Black Listed Keywords
                    $black_keyword_array = array();
                    $result_black_keywords = $this->sms_model->getBlackKeywords();
                    if ($result_black_keywords) {
                        foreach ($result_black_keywords as $row_bkeyword) {
                            $bkeyword = preg_replace('/\s+/', ' ', urldecode($row_bkeyword['black_keyword']));
                            $bkeyword_array = explode(' ', $bkeyword);
                            $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                        }
                    }
                    // Remove Black Listed Keywords
                    $black_keyword_array = array_map('strtolower', $black_keyword_array);
                    $black_keyword_array = array_filter($black_keyword_array);
                    $black_message_array = array();
                    foreach ($result_message_array as $key => $sms) {
                        $temp_sms = urldecode($sms);
                        $temp_array = explode(' ', preg_replace('/\s+/', ' ', $temp_sms));
                        $temp_array = array_map('strtolower', $temp_array);
                        $temp_array = array_intersect($black_keyword_array, $temp_array);
                        //$temp_sms = $sms;
                        $black_message_array = array_merge($black_message_array, $temp_array);
                    }

                    // Remove Black List Numbers
                    $bresult_array = array_intersect($result_array, $black_list_array);
                    $result_array = array_diff($result_array, $black_list_array);

                    // DLR Mask
                    $dlr_mask = "31";

                    // Actual No. of Messages
                    $total_messages = sizeof($result_resend_sms);

                    $approval_status = 1;
                    $remainNumberOfSMS = 0;
                    // check pricing for message approval
                    $pricing_array = array();
//                    $pricing_array = $this->user_data_model->checkPricing($user_id);
//                    if ($pricing_array) {
//                        $txn_id = $pricing_array[0]['txn_log_id'];
//                        $pricing = $pricing_array[0]['txn_price'];
//                        $tax_status = $pricing_array[0]['tax_status'];
//                        $numberOfSMS = $pricing_array[0]['no_of_send_sms'];
//
//
//                        if ($admin_approval_status == 0) {
//                            if ($tax_status == 1) {
//                                if ($pricing < .035) {
//                                    if ($numberOfSMS == 0) {
//                                        $approval_status = 0;
//                                    } else {
//                                        if ($numberOfSMS < $required_balance) {
//                                            $approval_status = 0;
//                                        } else {
//                                            $approval_status = 1;
//                                            $remainNumberOfSMS = $numberOfSMS - $required_balance;
//                                            $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
//                                        }
//                                    }
//                                } else {
//                                    $approval_status = 1;
//                                }
//                            } elseif ($tax_status == 0) {
//                                if ($pricing < .05) {
//                                    if ($numberOfSMS == 0) {
//                                        $approval_status = 0;
//                                    } else {
//                                        if ($numberOfSMS < $required_balance) {
//                                            $approval_status = 0;
//                                        } else {
//                                            $approval_status = 1;
//                                            $remainNumberOfSMS = $numberOfSMS - $required_balance;
//                                            $this->user_data_model->updateNumberSMS($txn_id, $remainNumberOfSMS);
//                                        }
//                                    }
//                                } else {
//                                    $approval_status = 1;
//                                }
//                            }
//                        }
//                    }
//                    $approval_status;
                    $pricing_error = 0;
                    if ($approval_status == 0) {
                        $pricing_error = 420;
                    }


                    // Select Route And Process
                    $balance_status = 1;
                    if ($route == "A" || $route == "C" || $route == "D") {
                        // Check Available Balance And Send Number of Message

                        if ($route == 'A' && $pr_sms_balance < $required_balance) {
                            $balance_status = 0;
                        }
                        if ($route == 'C' && $stock_balance < $required_balance) {
                            $balance_status = 0;
                        }
                        if ($route == 'D' && $prtodnd_balance < $required_balance) {
                            $balance_status = 0;
                        }

                        $reseller_key_balance_status = 1;
                        $most_parent_id_reseller_status = 0;
                        // Check Available Balance And Send Number of Message
                        if ($balance_status == 0) {
                            $reason = "Insufficient Promotional Balance";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "101";
                        } else {

                            //special reseller
                            $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                            $mostParentID = $verifySpecialReseller->most_parent_id;
                            $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                            if ($mostParentID != 0) {
                                $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                                $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                            }

                            if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                                //check Special PR balance
                                if ($spacial_reseller_status) {
                                    $special_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                                    $special_pr_balance = $special_balance->special_pr_balance;
                                    $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                    $special_stock_credits = $special_balance->stock_credits;
                                } else {
                                    $special_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                                    $special_pr_balance = $special_balance->special_pr_balance;
                                    $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                    $special_stock_credits = $special_balance->stock_credits;
                                }

                                if ($route == 'A' && $special_pr_balance < $required_balance) {
                                    $reseller_key_balance_status = 0;
                                }
                                if ($route == 'C' && $special_stock_credits < $required_balance) {
                                    $reseller_key_balance_status = 0;
                                }
                                if ($route == 'D' && $special_prtodnd_credits < $required_balance) {
                                    $reseller_key_balance_status = 0;
                                }

                                /*   if ($special_pr_balance < $actual_balance_required) {
                                  $reseller_key_balance_status = 0;
                                  } else {

                                  $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                  $reseller_key_balance_status = 1;
                                  } */
                                if ($reseller_key_balance_status == 0) {
                                    $reseller_key_balance_status = 0;
                                } else {
                                    if ($route == 'A') {
                                        $updated_key_balance = $special_pr_balance - $required_balance;
                                        $reseller_key_balance_status = 1;
                                    }
                                    if ($route == 'C') {
                                        $updated_key_balance = $special_stock_credits - $required_balance;
                                        $reseller_key_balance_status = 1;
                                    }
                                    if ($route == 'D') {
                                        $updated_key_balance = $special_prtodnd_credits - $required_balance;
                                        $reseller_key_balance_status = 1;
                                    }

                                    // $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                    // $reseller_key_balance_status = 1;
                                }
                            }


                            // Promotional SMS
                            if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id) {
                                if ($route == 'A') {
                                    $user_smsc_id = $result_user->pr_smsc;
                                    $pro_user_group_id = $pro_user_group_id;
                                }
                                if ($route == 'D') {
                                    $user_smsc_id = $result_user->prtodnd_smsc;
                                    $pro_user_group_id = $prtodnd_user_group_id;
                                }
                                if ($route == 'C') {
                                    $user_smsc_id = $result_user->stock_smsc;
                                    $pro_user_group_id = $stock_user_group_id;
                                }

                                // $user_smsc_id = $result_user->pr_smsc;
                                // Insert Campaign
                                // If Message Content Blocked By Admin
                                if (sizeof($black_message_array) || $black_sender) {
                                    $check_keyword = 0;
                                    $check_sender = 0;
                                    if (sizeof($result_message_array)) {
                                        $check_keyword = 1;
                                    }
                                    if ($black_sender) {
                                        $check_sender = 1;
                                    }
                                    $check_black_listed = $check_keyword . "|" . $check_sender;
                                    // Deduct SMS Balance
                                    $total_deduction = 0;
                                    $deduct_balance = 0;
                                    $campaign_status = 2;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $pro_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'campaign_status' => $campaign_status,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $message_length,
                                        'route' => $route,
                                        'black_listed' => $check_black_listed,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        $data_black = array();
                                        if (sizeof($bresult_array)) {
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $result_message_array[$black_number];
                                                $temp_black_array['msg_length'] = $result_message_length[$black_number];
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }

                                        // Insert Remaining Numbers
                                        if (sizeof($result_array)) {
                                            // DND Allowed
                                            if ($dnd_check) {
                                                // Non-DND Numbers
                                                if (sizeof($result_array)) {
                                                    $ssms_data = array();
                                                    foreach ($result_array as $number) {
                                                        $ssms_temp_array = array();
                                                        $deduct_balance++;
                                                        $total_deduction+=1 * $result_message_credit[$number];
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $result_message_array[$number];
                                                        $ssms_temp_array['msg_length'] = $result_message_length[$number];
                                                        $ssms_temp_array['mobile_no'] = $number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);
                                                    }
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            } else {
                                                // Custom DND Numbers
                                                $dnd_array = array();
                                                $result_dnd = $this->sms_model->getDNDNumbers();
                                                if ($result_dnd) {
                                                    $dnd_array = $result_dnd;
                                                }

                                                // Non-DND Numbers
                                                $ndnd_result = array_diff($result_array, $dnd_array);

                                                // DND Numbers
                                                $dnd_result = array_intersect($result_array, $dnd_array);
                                                if (sizeof($dnd_result)) {
                                                    $data_dnd = array();
                                                    foreach ($dnd_result as $key => $dnd_number) {
                                                        $temp_dnd_array = array();
                                                        $status = "DND";
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_dnd_array['campaign_id'] = $campaign_id;
                                                        $temp_dnd_array['user_id'] = $user_id;
                                                        $temp_dnd_array['msg_id'] = $msg_id;
                                                        $temp_dnd_array['message'] = $result_message_array[$dnd_number];
                                                        $temp_dnd_array['msg_length'] = $result_message_length[$dnd_number];
                                                        $temp_dnd_array['mobile_no'] = $dnd_number;
                                                        $temp_dnd_array['status'] = $status;
                                                        $temp_dnd_array['submit_date'] = $subdate;
                                                        $temp_dnd_array['temporary_status'] = $temporary_status;
                                                        $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                        $data_dnd[] = $temp_dnd_array;
                                                        unset($temp_dnd_array);
                                                    }
                                                    $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                    //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                }

                                                // Non-DND Numbers
                                                if (sizeof($ndnd_result)) {
                                                    $ssms_data = array();
                                                    foreach ($ndnd_result as $ndnd_number) {
                                                        $ssms_temp_array = array();
                                                        $deduct_balance++;
                                                        $total_deduction+=1 * $result_message_credit[$ndnd_number];
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $result_message_array[$ndnd_number];
                                                        $ssms_temp_array['msg_length'] = $result_message_length[$ndnd_number];
                                                        $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);
                                                    }
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                            }
                                        }
                                    }
                                    //update spacial balance 
                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - $total_deduction;
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - $total_deduction;
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - $total_deduction;
                                    }

                                    // Update User Balance

                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                    // Total Deduction
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $data = array(
                                        'total_deducted' => $total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    return "1";
                                } else {
                                    // Deduct SMS Balance
                                    $total_deduction = 0;
                                    $deduct_balance = 0;
                                    $campaign_status = 1;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $pro_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'campaign_status' => $campaign_status,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $message_length,
                                        'route' => $route,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        // Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();

                                        // Insert Black List Numbers
                                        $data_black = array();
                                        if (sizeof($bresult_array)) {
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $pro_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $result_message_array[$black_number];
                                                $temp_black_array['msg_length'] = $result_message_length[$black_number];
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }

                                        // Insert Numbers
                                        if (sizeof($result_array)) {
                                            // DND Allowed
                                            if ($dnd_check) {
                                                // Get White Lists
                                                $white_list_array = array();
                                                $result_white_list = $this->sms_model->getWhiteLists();
                                                if ($result_white_list) {
                                                    $white_list_array = $result_white_list;
                                                }

                                                if ($action_type == 1) {
                                                    // Apply Ratio (Fake Delivered And Failed)
                                                    if (sizeof($result_array) > 100) {
                                                        $result_array1 = array_diff($result_array, $white_list_array);

                                                        //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                        // Apply User Ratio
                                                        //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                        //apply spacial ratio 
                                                        $spacial_deliver_fake = 0;
                                                        if ($spacial_deliver_pr_ratio) {
                                                            $spacial_fake_ratio = (sizeof($result_array1) * $spacial_deliver_pr_ratio) / 100;
                                                            $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                        }
                                                        if ($spacial_deliver_fake) {
                                                            $new_size = sizeof($result_array1);
                                                            $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                            $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                            $u_fake = ROUND($user_fake);
                                                            $user_fake_sent = ($new_own_ratio * $pr_fake_sent) / 100;
                                                            $u_fake_sent = ROUND($user_fake_sent);
                                                            //$user_fail = ($new_own_ratio * $pr_user_fail_ratio) / 100;
                                                            //$u_fail = ROUND($user_fail);
                                                        } else {

                                                            $user_fake = (sizeof($result_array1) * $pr_user_fake_ratio) / 100;
                                                            $u_fake = ROUND($user_fake);
                                                            $user_fail = (sizeof($result_array1) * $pr_user_fail_ratio) / 100;
                                                            $u_fail = ROUND($user_fail);
                                                            $user_fake_sent = (sizeof($result_array1) * $pr_fake_sent) / 100;
                                                            $u_fake_sent = ROUND($user_fake_sent);
                                                        }
//add both ratio                                   
                                                        if ($spacial_deliver_fake) {
                                                            $u_fake = $u_fake + $spacial_deliver_fake;
                                                        }


                                                        // Get Fake Delivered Number
                                                        if ($pr_user_fake_ratio) {
                                                            if ($u_fake) {
                                                                $data_fake = array();
                                                                $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                                $result_array1 = array_diff($result_array1, $fake_d_array);
                                                                foreach ($fake_d_array as $fake_number) {
                                                                    $temp_fake_array = array();
                                                                    $deduct_balance++;
                                                                    $total_deduction+=1 * $result_message_credit[$fake_number];
                                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                                    $status = "31";
                                                                    $subdate = date("Y-m-d H:i:s");
                                                                    $temporary_status = 2;

                                                                    $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                                    $temp_fake_array['campaign_id'] = $campaign_id;
                                                                    $temp_fake_array['user_id'] = $user_id;
                                                                    $temp_fake_array['msg_id'] = $msg_id;
                                                                    $temp_fake_array['message'] = $result_message_array[$fake_number];
                                                                    $temp_fake_array['msg_length'] = $result_message_length[$fake_number];
                                                                    $temp_fake_array['mobile_no'] = $fake_number;
                                                                    $temp_fake_array['status'] = $status;
                                                                    $temp_fake_array['submit_date'] = $subdate;
                                                                    $temp_fake_array['temporary_status'] = $temporary_status;
                                                                    $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                                    $data_fake[] = $temp_fake_array;
                                                                    unset($temp_fake_array);
                                                                }
                                                                $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                            }
                                                        }

                                                        // Get Fake Failed Number
                                                        if ($pr_user_fail_ratio) {
                                                            if ($u_fail) {
                                                                $data_failed = array();
                                                                $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                                $result_array1 = array_diff($result_array1, $fake_f_array);
                                                                foreach ($fake_f_array as $failed_number) {
                                                                    $temp_failed_array = array();
                                                                    $deduct_balance++;
                                                                    $total_deduction+=1 * $result_message_credit[$failed_number];
                                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                                    $status = "31";
                                                                    $subdate = date("Y-m-d H:i:s");
                                                                    $temporary_status = 3;

                                                                    $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                                    $temp_failed_array['campaign_id'] = $campaign_id;
                                                                    $temp_failed_array['user_id'] = $user_id;
                                                                    $temp_failed_array['msg_id'] = $msg_id;
                                                                    $temp_failed_array['message'] = $result_message_array[$failed_number];
                                                                    $temp_failed_array['msg_length'] = $result_message_length[$failed_number];
                                                                    $temp_failed_array['mobile_no'] = $failed_number;
                                                                    $temp_failed_array['status'] = $status;
                                                                    $temp_failed_array['submit_date'] = $subdate;
                                                                    $temp_failed_array['temporary_status'] = $temporary_status;
                                                                    $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                                    $data_failed[] = $temp_failed_array;
                                                                    unset($temp_failed_array);
                                                                }
                                                                $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }

                                                        // Get Fake sent Number
                                                        if ($pr_fake_sent) {
                                                            if ($u_fake_sent) {
                                                                $data_failed = array();
                                                                $fake_s_array = $this->sms_model->getRandomArray($result_array1, $u_fake_sent);
                                                                $result_array1 = array_diff($result_array1, $fake_s_array);
                                                                foreach ($fake_s_array as $fake_sent_number) {
                                                                    $temp_sent_array = array();
                                                                    $deduct_balance++;
                                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                                    $status = "3";
                                                                    $subdate = date("Y-m-d H:i:s");
                                                                    $temporary_status = 4;

                                                                    $temp_sent_array['user_group_id'] = $pro_user_group_id;
                                                                    $temp_sent_array['campaign_id'] = $campaign_id;
                                                                    $temp_sent_array['user_id'] = $user_id;
                                                                    $temp_sent_array['msg_id'] = $msg_id;
                                                                    $temp_sent_array['message'] = $message;
                                                                    $temp_sent_array['msg_length'] = $length;
                                                                    $temp_sent_array['mobile_no'] = $failed_number;
                                                                    $temp_sent_array['status'] = $status;
                                                                    $temp_sent_array['submit_date'] = $subdate;
                                                                    $temp_sent_array['temporary_status'] = $temporary_status;
                                                                    $temp_sent_array['default_route'] = $user_smsc_id;
                                                                    $temp_sent_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                                    $data_fake_sent[] = $temp_sent_array;
                                                                    unset($temp_sent_array);
                                                                }
                                                                if (sizeof($data_failed)) {
                                                                    $res_sent = $this->db->insert_batch('sent_sms', $data_fake_sent);
                                                                    //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                                }
                                                            }
                                                        }

                                                        //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                        $result = array_intersect($result_array, $white_list_array);
                                                        $result_array = array_merge($result_array1, $result);
                                                    }
                                                }

                                                if (sizeof($result_array)) {
                                                    $ssms_data = array();
                                                    $sqlbox_data = array();
                                                    foreach ($result_array as $number) {
                                                        $ssms_temp_array = array();
                                                        $sqlbox_temp_array = array();
                                                        $deduct_balance++;
                                                        $total_deduction+=1 * $result_message_credit[$number];
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $result_message_array[$number];
                                                        $ssms_temp_array['msg_length'] = $result_message_length[$number];
                                                        $ssms_temp_array['mobile_no'] = $number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);

                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;

                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $number;
                                                        $sqlbox_temp_array['msgdata'] = $result_message_array[$number];
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                    if (sizeof($ssms_data)) {
                                                        $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                        //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    }
                                                    if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                        $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                    }
                                                }
                                            } else {
                                                // Get White Lists
                                                $white_list_array = array();
                                                $result_white_list = $this->sms_model->getWhiteLists();
                                                if ($result_white_list) {
                                                    $white_list_array = $result_white_list;
                                                }
                                                // Custom DND Numbers
                                                $dnd_array = array();
                                                $result_dnd = $this->sms_model->getDNDNumbers();
                                                if ($result_dnd) {
                                                    $dnd_array = $result_dnd;
                                                }

                                                // Non-DND Numbers
                                                $ndnd_result = array_diff($result_array, $dnd_array);

                                                // DND Numbers
                                                $dnd_result = array_intersect($result_array, $dnd_array);
                                                if (sizeof($dnd_result)) {
                                                    $data_dnd = array();
                                                    foreach ($dnd_result as $key => $dnd_number) {
                                                        $temp_dnd_array = array();
                                                        $status = "DND";
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;

                                                        $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                        $temp_dnd_array['campaign_id'] = $campaign_id;
                                                        $temp_dnd_array['user_id'] = $user_id;
                                                        $temp_dnd_array['msg_id'] = $msg_id;
                                                        $temp_dnd_array['message'] = $result_message_array[$dnd_number];
                                                        $temp_dnd_array['msg_length'] = $result_message_length[$dnd_number];
                                                        $temp_dnd_array['mobile_no'] = $dnd_number;
                                                        $temp_dnd_array['status'] = $status;
                                                        $temp_dnd_array['submit_date'] = $subdate;
                                                        $temp_dnd_array['temporary_status'] = $temporary_status;
                                                        $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                        $data_dnd[] = $temp_dnd_array;
                                                        unset($temp_dnd_array);
                                                    }
                                                    $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                    //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                                }

                                                if ($action_type == 1) {
                                                    // Apply Ratio (Fake Delivered And Failed)
                                                    if (sizeof($ndnd_result) > 100) {
                                                        // Get White List Numbers From User Request
                                                        $ndnd_result1 = array_diff($ndnd_result, $white_list_array);

                                                        //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                        // Apply User Ratio
                                                        //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                        //apply spacial ratio 
                                                        if ($spacial_deliver_pr_ratio) {
                                                            $spacial_fake_ratio = (sizeof($ndnd_result1) * $spacial_deliver_pr_ratio) / 100;
                                                            $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                        }


                                                        if ($spacial_deliver_fake) {
                                                            $new_size = sizeof($ndnd_result1);
                                                            $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                            $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                            $u_fake = ROUND($user_fake);
                                                            $user_fake_sent = ($new_own_ratio * $pr_fake_sent) / 100;
                                                            $u_fake_sent = ROUND($user_fake_sent);

                                                            //$user_fail = ($new_size * $pr_user_fail_ratio) / 100;
                                                            //$u_fail = ROUND($user_fail);
                                                        } else {

                                                            $user_fake = (sizeof($ndnd_result1) * $pr_user_fake_ratio) / 100;
                                                            $u_fake = ROUND($user_fake);
                                                            $user_fail = (sizeof($ndnd_result1) * $pr_user_fail_ratio) / 100;
                                                            $u_fail = ROUND($user_fail);
                                                            $user_fake_sent = (sizeof($ndnd_result1) * $pr_fake_sent) / 100;
                                                            $u_fake_sent = ROUND($user_fake_sent);
                                                        }

                                                        //add both ratio
                                                        if ($spacial_deliver_fake) {
                                                            $u_fake = $u_fake + $spacial_deliver_fake;
                                                        }

                                                        // Get Fake Delivered Number
                                                        if ($pr_user_fake_ratio) {
                                                            if ($u_fake) {
                                                                $data_fake = array();
                                                                $fake_d_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fake);
                                                                $ndnd_result1 = array_diff($ndnd_result1, $fake_d_array);
                                                                foreach ($fake_d_array as $fake_number) {
                                                                    $temp_fake_array = array();
                                                                    $deduct_balance++;
                                                                    $total_deduction+=1 * $result_message_credit[$fake_number];
                                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                                    $status = "31";
                                                                    $subdate = date("Y-m-d H:i:s");
                                                                    $temporary_status = 2;

                                                                    $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                                    $temp_fake_array ['campaign_id'] = $campaign_id;
                                                                    $temp_fake_array['user_id'] = $user_id;
                                                                    $temp_fake_array['msg_id'] = $msg_id;
                                                                    $temp_fake_array['message'] = $result_message_array[$fake_number];
                                                                    $temp_fake_array['msg_length'] = $result_message_length[$fake_number];
                                                                    $temp_fake_array['mobile_no'] = $fake_number;
                                                                    $temp_fake_array['status'] = $status;
                                                                    $temp_fake_array['submit_date'] = $subdate;
                                                                    $temp_fake_array['temporary_status'] = $temporary_status;
                                                                    $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                                    $data_fake[] = $temp_fake_array;
                                                                    unset($temp_fake_array);
                                                                }
                                                                $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                            }
                                                        }

                                                        // Get Fake Failed Number
                                                        if ($pr_user_fail_ratio) {
                                                            if ($u_fail) {
                                                                $data_failed = array();
                                                                $fake_f_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fail);
                                                                $ndnd_result1 = array_diff($ndnd_result1, $fake_f_array);
                                                                foreach ($fake_f_array as $failed_number) {
                                                                    $temp_failed_array = array();
                                                                    $deduct_balance++;
                                                                    $total_deduction+=1 * $result_message_credit[$failed_number];
                                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                                    $status = "31";
                                                                    $subdate = date("Y-m-d H:i:s");
                                                                    $temporary_status = 3;

                                                                    $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                                    $temp_failed_array['campaign_id'] = $campaign_id;
                                                                    $temp_failed_array['user_id'] = $user_id;
                                                                    $temp_failed_array['msg_id'] = $msg_id;
                                                                    $temp_failed_array['message'] = $result_message_array[$failed_number];
                                                                    $temp_failed_array['msg_length'] = $result_message_length[$failed_number];
                                                                    $temp_failed_array['mobile_no'] = $failed_number;
                                                                    $temp_failed_array['status'] = $status;
                                                                    $temp_failed_array ['submit_date'] = $subdate;
                                                                    $temp_failed_array ['temporary_status'] = $temporary_status;
                                                                    $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                                    $data_failed[] = $temp_failed_array;
                                                                    unset($temp_failed_array);
                                                                }
                                                                $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                                //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                            }
                                                        }
                                                        // Get Fake sent Number
                                                        if ($pr_fake_sent) {
                                                            if ($u_fake_sent) {
                                                                $data_fake_sent = array();
                                                                $fake_s_array = $this->sms_model->getRandomArray($ndnd_result1, $u_fake_sent);
                                                                $ndnd_result1 = array_diff($ndnd_result1, $fake_s_array);
                                                                foreach ($fake_s_array as $fake_sent_number) {
                                                                    $temp_sent_array = array();
                                                                    $deduct_balance++;
                                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                                    $status = "3";
                                                                    $subdate = date("Y-m-d H:i:s");
                                                                    $temporary_status = 4;

                                                                    $temp_sent_array['user_group_id'] = $pro_user_group_id;
                                                                    $temp_sent_array['campaign_id'] = $campaign_id;
                                                                    $temp_sent_array['user_id'] = $user_id;
                                                                    $temp_sent_array['msg_id'] = $msg_id;
                                                                    $temp_sent_array['message'] = $message;
                                                                    $temp_sent_array['msg_length'] = $length;
                                                                    $temp_sent_array['mobile_no'] = $failed_number;
                                                                    $temp_sent_array['status'] = $status;
                                                                    $temp_sent_array['submit_date'] = $subdate;
                                                                    $temp_sent_array['temporary_status'] = $temporary_status;
                                                                    $temp_sent_array['default_route'] = $user_smsc_id;
                                                                    $temp_sent_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                                    $data_fake_sent[] = $temp_sent_array;
                                                                    unset($temp_sent_array);
                                                                }
                                                                if (sizeof($data_fake_sent)) {
                                                                    $res_sent = $this->db->insert_batch('sent_sms', $data_fake_sent);
                                                                    //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                                }
                                                            }
                                                        }


                                                        //----------------------------------------------------------------------------------------------------------------------------------------------//                                                
                                                        $result = array_intersect($ndnd_result, $white_list_array);
                                                        $ndnd_result = array_merge($ndnd_result1, $result);
                                                    }
                                                }
                                                // Non-DND Numbers
                                                if (sizeof($ndnd_result)) {
                                                    $ssms_data = array();
                                                    $sqlbox_data = array();
                                                    foreach ($ndnd_result as $number) {
                                                        $ssms_temp_array = array();
                                                        $sqlbox_temp_array = array();
                                                        $deduct_balance++;
                                                        $total_deduction+=1 * $result_message_credit[$number];
                                                        $msg_id = strtolower(random_string('alnum', 24));
                                                        $status = "31";
                                                        $subdate = date("Y-m-d H:i:s");
                                                        $temporary_status = 1;
                                                        // Sent SMS
                                                        $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                        $ssms_temp_array['campaign_id'] = $campaign_id;
                                                        $ssms_temp_array['user_id'] = $user_id;
                                                        $ssms_temp_array['msg_id'] = $msg_id;
                                                        $ssms_temp_array['message'] = $result_message_array[$number];
                                                        $ssms_temp_array['msg_length'] = $result_message_length[$number];
                                                        $ssms_temp_array['mobile_no'] = $number;
                                                        $ssms_temp_array['status'] = $status;
                                                        $ssms_temp_array['submit_date'] = $subdate;
                                                        $ssms_temp_array['temporary_status'] = $temporary_status;
                                                        $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                        $ssms_data[] = $ssms_temp_array;
                                                        unset($ssms_temp_array);

                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;

                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $number;
                                                        $sqlbox_temp_array['msgdata'] = $result_message_array[$number];
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }

                                                    if (sizeof($ssms_data)) {
                                                        $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                        //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    }
                                                    if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                        $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - $total_deduction;
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - $total_deduction;
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - $total_deduction;
                                    }

                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                    // Total Deduction
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $data = array(
                                        'total_deducted' => $total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    return "1";
                                }
                            } else {
                                $reason = "Promotional route is not assigned to user";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "100";
                            }
                        }
                    } elseif ($route == 'B') {
                        $reseller_key_balance_status = 1;
                        $most_parent_id_reseller_status = 0;
                        // Check Available Balance And Send Number of Message
                        if ($tr_sms_balance < $required_balance) {
                            $reason = "Insufficient Transactional Balance";
                            $log_by = "By Panel";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "101";
                        } else {
                            // Transactional SMS
                            $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                            $mostParentID = $verifySpecialReseller->most_parent_id;
                            $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                            if ($mostParentID != 0) {
                                $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                                $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                            }

                            if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                                //check Special PR balance
                                if ($spacial_reseller_status) {
                                    $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                                } else {
                                    $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                                }

                                if ($special_tr_balance < $required_balance) {
                                    $reseller_key_balance_status = 0;
                                } else {

                                    $updated_key_balance = $special_tr_balance - $required_balance;
                                    $reseller_key_balance_status = 1;
                                }
                            }

                            if ($tr_user_group_id) {
                                $user_smsc_id = $result_user->tr_smsc;
                                // If Message Content Blocked By Admin
                                if (sizeof($black_message_array) || $black_sender) {
                                    $check_keyword = 0;
                                    $check_sender = 0;
                                    if (sizeof($result_message_array)) {
                                        $check_keyword = 1;
                                    }
                                    if ($black_sender) {
                                        $check_sender = 1;
                                    }
                                    $check_black_listed = $check_keyword . "|" . $check_sender;
                                    // Insert Campaign
                                    // Deduct SMS Balance
                                    $total_deduction = 0;
                                    $deduct_balance = 0;
                                    $campaign_status = 2;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $tr_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'campaign_status' => $campaign_status,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $message_length,
                                        'route' => $route,
                                        'black_listed' => $check_black_listed,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        //Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        $data_black = array();
                                        if (sizeof($bresult_array)) {
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $tr_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $result_message_array[$black_number];
                                                $temp_black_array['msg_length'] = $result_message_length[$black_number];
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }

                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            if ($check_demo_user && $tr_sms_balance <= 20) {
                                                $sender_condition = 1;
                                            } else {
                                                $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                                if ($result_sender_id) {
                                                    $sender_condition = 1;
                                                }
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            if ($check_demo_user && $tr_sms_balance <= 20) {
                                                $keyword_condition = 1;
                                            } else {
                                                $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                                if ($result_keyword) {
                                                    $keyword_condition = 1;
                                                }
                                            }
                                        }

                                        // Insert All Remaining Numbers First Then Check Conditions
                                        if ($result_array) {
                                            $ssms_data = array();
                                            foreach ($result_array as $number) {
                                                $ssms_temp_array = array();
                                                $deduct_balance++;
                                                $total_deduction+=1 * $result_message_credit[$number];
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $status = "31";
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                // Sent SMS
                                                $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                $ssms_temp_array['campaign_id'] = $campaign_id;
                                                $ssms_temp_array['user_id'] = $user_id;
                                                $ssms_temp_array['msg_id'] = $msg_id;
                                                $ssms_temp_array['message'] = $result_message_array[$number];
                                                $ssms_temp_array['msg_length'] = $result_message_length[$number];
                                                $ssms_temp_array['mobile_no'] = $number;
                                                $ssms_temp_array['status'] = $status;
                                                $ssms_temp_array['submit_date'] = $subdate;
                                                $ssms_temp_array['temporary_status'] = $temporary_status;
                                                $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $ssms_data[] = $ssms_temp_array;
                                                unset($ssms_temp_array);
                                            }
                                            $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                            //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }

                                        if ($reseller_key_balance_status) {
                                            $cal = $spacial_deliver_fake * $total_credits;
                                            $updated_key_balance = $updated_key_balance + $cal;
                                        } else {
                                            $updated_key_balance = $special_tr_balance;
                                        }


                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - $total_deduction;
                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                        // Total Deduction
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $total_deduction,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        return "1";
                                    }
                                } else {
                                    // Insert Campaign
                                    // Deduct SMS Balance
                                    $total_deduction = 0;
                                    $deduct_balance = 0;
                                    $campaign_status = 1;
                                    $data_campaign = array(
                                        'campaign_uid' => $campaign_uid,
                                        'user_group_id' => $tr_user_group_id,
                                        'campaign_name' => $campaign_name,
                                        'user_id' => $user_id,
                                        'total_messages' => $total_messages,
                                        'total_credits' => $total_credits,
                                        'campaign_status' => $campaign_status,
                                        'sender_id' => $from,
                                        'request_by' => $request_by,
                                        'submit_date' => $submit_date,
                                        'message_type' => $message_type,
                                        'flash_message' => $flash_message,
                                        'message' => $message,
                                        'message_length' => $message_length,
                                        'route' => $route,
                                        'reseller_key_balance_status' => $reseller_key_balance_status,
                                        'pricing_error' => $pricing_error
                                    );
                                    $response_cm = $this->sms_model->insertCampaign($data_campaign);
                                    if ($response_cm) {
                                        //Get Last Campaign Id
                                        $campaign_id = $this->db->insert_id();
                                        // Insert Black List Numbers
                                        $data_black = array();
                                        if (sizeof($bresult_array)) {
                                            foreach ($bresult_array as $black_number) {
                                                $temp_black_array = array();
                                                $status = "Blocked";
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_black_array['user_group_id'] = $tr_user_group_id;
                                                $temp_black_array['campaign_id'] = $campaign_id;
                                                $temp_black_array['user_id'] = $user_id;
                                                $temp_black_array['msg_id'] = $msg_id;
                                                $temp_black_array['message'] = $result_message_array[$black_number];
                                                $temp_black_array['msg_length'] = $result_message_length[$black_number];
                                                $temp_black_array['mobile_no'] = $black_number;
                                                $temp_black_array['status'] = $status;
                                                $temp_black_array['submit_date'] = $subdate;
                                                $temp_black_array['temporary_status'] = $temporary_status;
                                                $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data_black[] = $temp_black_array;
                                                unset($temp_black_array);
                                            }
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }

                                        // Check Sender Id
                                        $sender_condition = 0;
                                        if ($t_sender_id_option) { // Open
                                            $sender_condition = 1;
                                        } else {
                                            if ($check_demo_user && $tr_sms_balance <= 20) {
                                                $sender_condition = 1;
                                            } else {
                                                $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                                if ($result_sender_id) {
                                                    $sender_condition = 1;
                                                }
                                            }
                                        }

                                        // Check Keyword
                                        $keyword_condition = 0;
                                        if ($keyword_option) { // Open
                                            $keyword_condition = 1;
                                        } else {
                                            if ($check_demo_user && $tr_sms_balance <= 20) {
                                                $keyword_condition = 1;
                                            } else {
                                                $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                                if ($result_keyword) {
                                                    $keyword_condition = 1;
                                                }
                                            }
                                        }

                                        // First Insert SMS Into Database Then Apply Conditions
                                        if ($result_array) {
                                            $ssms_data = array();
                                            foreach ($result_array as $number) {
                                                $ssms_temp_array = array();
                                                $deduct_balance++;
                                                $total_deduction+=1 * $result_message_credit[$number];
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $status = "31";
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                // Sent SMS
                                                $ssms_temp_array['user_group_id'] = $tr_user_group_id;
                                                $ssms_temp_array['campaign_id'] = $campaign_id;
                                                $ssms_temp_array['user_id'] = $user_id;
                                                $ssms_temp_array['msg_id'] = $msg_id;
                                                $ssms_temp_array['message'] = $result_message_array[$number];
                                                $ssms_temp_array['msg_length'] = $result_message_length[$number];
                                                $ssms_temp_array['mobile_no'] = $number;
                                                $ssms_temp_array['status'] = $status;
                                                $ssms_temp_array['submit_date'] = $subdate;
                                                $ssms_temp_array['temporary_status'] = $temporary_status;
                                                $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $ssms_data[] = $ssms_temp_array;
                                                unset($ssms_temp_array);
                                            }
                                            $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                            //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                        }

                                        // Get Unique Numbers
                                        $total_unique = 0;
                                        $exceed_numbers = 0;
                                        $db_condition = 0;
                                        $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                        if ($result_numbers) {
                                            $total_unique = $result_numbers;
                                            $exceed_numbers = $total_unique - $number_allowed;
                                            if ($total_unique <= $number_allowed) {
                                                $db_condition = 1;
                                            }
                                        }

                                        // IF SENDER ID, KEYWORD APPROVED AND DATABASE NOT EXCEED MORE THAN GIVEN LIMIT
                                        if ($sender_condition && $keyword_condition && $db_condition) {
                                            if ($action_type == 1) {
                                                $sms_status = array('DND', 'Blocked', 'Rejected');
                                                $this->db->select('mobile_no, message, status');
                                                $this->db->from('sent_sms');
                                                $this->db->where('campaign_id', $campaign_id);
                                                $this->db->where_not_in('status', $sms_status);
                                                $query = $this->db->get();
                                                if ($query->num_rows() > 0) {
                                                    $result_array = array();
                                                    $result_msg_array = array();
                                                    foreach ($query->result() as $row) {
                                                        $result_array[] = $row->mobile_no;
                                                        $result_msg_array[] = $row->message;
                                                    }

                                                    // Get White Lists
                                                    $white_list_array = array();
                                                    $result_white_list = $this->sms_model->getWhiteLists();
                                                    if ($result_white_list) {
                                                        $white_list_array = $result_white_list;
                                                    }
                                                    // Get white listed numbers from user request
                                                    if (sizeof($result_array) > 100) {
                                                        $result_array1 = array_diff($result_array, $white_list_array);
                                                        $this->benchmark->mark('M');


                                                        //apply spacial ratio 
                                                        if ($spacial_deliver_tr_ratio) {
                                                            $spacial_fake_ratio = (sizeof($result_array1) * $spacial_deliver_tr_ratio) / 100;
                                                            $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                        }


                                                        if ($spacial_deliver_fake) {
                                                            $new_size = sizeof($result_array1);
                                                            $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                            $user_fake = ($new_own_ratio * $user_fake_ratio) / 100;
                                                            $u_fake = ROUND($user_fake);
                                                            $user_fake_sent = ($new_own_ratio * $tr_fake_sent) / 100;
                                                            $u_fake_sent = ROUND($user_fake_sent);
                                                            //$user_fail = ($new_size * $pr_user_fail_ratio) / 100;
                                                            //$u_fail = ROUND($user_fail);
                                                        } else {

                                                            $user_fake = (sizeof($result_array1) * $user_fake_ratio) / 100;
                                                            $u_fake = ROUND($user_fake);
                                                            $user_fail = (sizeof($result_array1) * $user_fail_ratio) / 100;
                                                            $u_fail = ROUND($user_fail);
                                                            $user_fake_sent = (sizeof($result_array1) * $tr_fake_sent) / 100;
                                                            $u_fake_sent = ROUND($user_fake_sent);
                                                        }
                                                        /*
                                                          // Apply User Ratio
                                                          $user_fake = (sizeof($result_array1) * $user_fake_ratio ) / 100;
                                                          $u_fake = ROUND($user_fake);
                                                          $user_fail = (sizeof($result_array1) * $user_fail_ratio ) / 100;
                                                          $u_fail = ROUND($user_fail);
                                                         */

                                                        if ($spacial_deliver_fake) {
                                                            $u_fake = $u_fake + $spacial_deliver_fake;
                                                        }

                                                        // Get Fake Delivered Numbers
                                                        if ($user_fake_ratio) {
                                                            if ($u_fake) {
                                                                $data_fake = array();
                                                                $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                                $result_array1 = array_diff($result_array1, $fake_d_array);
                                                                foreach ($fake_d_array as $fake_number) {
                                                                    $data = array(
                                                                        'temporary_status' => 2
                                                                    );
                                                                    $this->db->where('campaign_id', $campaign_id);
                                                                    $this->db->where('mobile_no', $fake_number);
                                                                    $this->db->update('sent_sms', $data);
                                                                }
                                                            }
                                                        }

                                                        // Get Fake Failed Numbers
                                                        if ($user_fail_ratio) {
                                                            if ($u_fail) {
                                                                $data_failed = array();
                                                                $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                                $result_array1 = array_diff($result_array1, $fake_f_array);
                                                                foreach ($fake_f_array as $failed_number) {
                                                                    $data = array(
                                                                        'temporary_status' => 3
                                                                    );
                                                                    $this->db->where('campaign_id', $campaign_id);
                                                                    $this->db->where('mobile_no', $failed_number);
                                                                    $this->db->update('sent_sms', $data);
                                                                }
                                                            }
                                                        }
                                                        // Get Fake sent Number
                                                        if ($tr_fake_sent) {
                                                            if ($u_fake_sent) {
                                                                $data_failed = array();
                                                                $fake_s_array = $this->sms_model->getRandomArray($result_array1, $u_fake_sent);
                                                                $result_array1 = array_diff($result_array1, $fake_s_array);
                                                                foreach ($fake_s_array as $fake_sent_number) {
                                                                    $data = array(
                                                                        'temporary_status' => 4,
                                                                        'status' => 3
                                                                    );
                                                                    $this->db->where('campaign_id', $campaign_id);
                                                                    $this->db->where('mobile_no', $fake_sent_number);
                                                                    $this->db->update('sent_sms', $data);
                                                                }
                                                            }
                                                        }


                                                        $result = array_intersect($result_array, $white_list_array);
                                                        $result_array = array_merge($result_array1, $result);
                                                    }

                                                    // Insert Data Sent SMS Table To SQLBox Send SMS Table                    
                                                    $momt = "MT";
                                                    $sms_type = 2;
                                                    $dlr_mask = "31";
                                                    $dlr_url = $campaign_id;
                                                    if (sizeof($result_array)) {
                                                        $sqlbox_data = array();
                                                        foreach ($result_array as $number) {
                                                            // SQLBox Send SMS
                                                            $sqlbox_temp_array['momt'] = $momt;
                                                            $sqlbox_temp_array['sender'] = $from;
                                                            $sqlbox_temp_array['receiver'] = $number;
                                                            $sqlbox_temp_array['msgdata'] = $result_message_array[$number];
                                                            $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                            $sqlbox_temp_array['id'] = $campaign_id;
                                                            $sqlbox_temp_array['sms_type'] = $sms_type;
                                                            $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                            $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                            $sqlbox_temp_array['mclass'] = $mclass;
                                                            $sqlbox_temp_array['coding'] = $coding;
                                                            $sqlbox_temp_array['charset'] = $charset;
                                                            $sqlbox_data[] = $sqlbox_temp_array;
                                                            unset($sqlbox_temp_array);
                                                        }
                                                        if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                            $res_success = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                        }
                                                    }
                                                    /*
                                                      // Campaign Status
                                                      $data = array(
                                                      'campaign_status' => 1
                                                      );
                                                      $this->db->where('campaign_id', $campaign_id);
                                                      $this->db->update('campaigns', $data);
                                                     */
                                                }
                                            }

                                            if ($reseller_key_balance_status) {
                                                $cal = $spacial_deliver_fake * $total_credits;
                                                $updated_key_balance = $updated_key_balance + $cal;
                                            } else {
                                                $updated_key_balance = $special_tr_balance;
                                            }


                                            $balance_type = "TR";
                                            $updated_sms_balance = $tr_sms_balance - $total_deduction;
                                            // $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                            /*   echo $most_parent_id_reseller_status;
                                              echo $reseller_key_balance_status;
                                              echo $spacial_reseller_status;
                                              echo $total_credits;
                                              echo $spacial_deliver_fake;
                                              echo $updated_sms_balance;
                                              echo $updated_key_balance;
                                              echo $special_tr_balance; */


                                            $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                            // Total Deduction
                                            $this->benchmark->mark('End_Time');
                                            $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                            $data = array(
                                                'total_deducted' => $total_deduction,
                                                'actual_message' => $deduct_balance,
                                                'sender_status' => $sender_condition,
                                                'keyword_status' => $keyword_condition,
                                                'number_db_status' => $db_condition,
                                                'unique_numbers' => $total_unique,
                                                'exceed_numbers' => $exceed_numbers,
                                                'total_time' => $total_time,
                                                'campaign_status' => $campaign_status
                                            );
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->update('campaigns', $data);
                                            return "1";
                                        } else {
                                            //update spacial balance 
                                            if ($reseller_key_balance_status) {
                                                $cal = $spacial_deliver_fake * $total_credits;
                                                $updated_key_balance = $updated_key_balance + $cal;
                                            } else {
                                                $updated_key_balance = $special_tr_balance;
                                            }

                                            $balance_type = "TR";
                                            $updated_sms_balance = $tr_sms_balance - $total_deduction;
                                            // $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                            $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                            // Total Deduction
                                            $this->benchmark->mark('End_Time');
                                            $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                            $data = array(
                                                'total_deducted' => $total_deduction,
                                                'actual_message' => $deduct_balance,
                                                'campaign_status' => 2,
                                                'sender_status' => $sender_condition,
                                                'keyword_status' => $keyword_condition,
                                                'number_db_status' => $db_condition,
                                                'unique_numbers' => $total_unique,
                                                'exceed_numbers' => $exceed_numbers,
                                                'total_time' => $total_time
                                            );
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->update('campaigns', $data);
                                            return "1";
                                        }
                                    }
                                }
                            } else {
                                $reason = "Transactional route is not assigned to user";
                                $log_by = "By Panel";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "102";
                            }
                        }
                    } else {
                        return '100';
                    }
                } else {
                    return '103';
                }
            } else {
                return '100';
            }
        } else {
            return '100';
        }
    }

    //SEND REGIONAL SMS

    function sendTestRegionalHttpApi($array_users = array()) {
        ini_set('max_input_time', 2400);
        ini_set('max_execution_time', 2400);
        ini_set('memory_limit', '1073741824');
        // Extract Post Array
        $user_id = $array_users['user_id'];
        $language = $array_users['language'];
        $mobile_numbers = $array_users['mobiles'];
        $message = $array_users['message'];

        $message_converted = $this->sms_model->checkLanguage($message, $mobile_numbers);
        $message_data = urlencode($message_converted);
        $message = urldecode($message_data);

        $from = $array_users['sender'];
        $route = $array_users['route'];
        $response = $array_users['response'];
        $unicode = $array_users['unicode'];
        $campaign_name = $array_users['campaign'];
        $flash_message = $array_users['flash'];
        $ignorendnc = $array_users['ignorendnc'];
        $schtime = $array_users['schtime'];
        $client_ip_address = $array_users['client_ip_address'];
        // Get User Rules
        $this->benchmark->mark('Start_Time');
        $result_user = $this->sms_model->getUserSettings($user_id);
        if ($result_user) {

            $pr_sms_balance = $result_user->pr_sms_balance;
            $tr_sms_balance = $result_user->tr_sms_balance;
            $number_allowed = $result_user->number_allowed;
            $p_sender_id_option = $result_user->p_sender_id_option;
            $t_sender_id_option = $result_user->t_sender_id_option;
            $keyword_option = $result_user->keyword_option;
            $sender_id_type = $result_user->sender_id_type;
            $sender_id_length = $result_user->sender_id_length;
            $dnd_check = $result_user->dnd_check;
            $pro_user_group_id = $result_user->pro_user_group_id;
            $tr_user_group_id = $result_user->tr_user_group_id;
            $prtodnd_balance = $result_user->prtodnd_balance;
            $stock_balance = $result_user->stock_balance;
            $prtodnd_user_group_id = $result_user->prtodnd_route;
            $stock_user_group_id = $result_user->stock_route;
            $international_balance = $result_user->international_balance;
            $international_user_group_id = $result_user->international_route;
            $premium_dnd_check = $result_user->premium_dnd_check;
            $stock_dnd_check = $result_user->stock_dnd_check;
            $admin_approval_status = $result_user->pricing_approval;
            $user_fake_ratio = $result_user->user_fake_ratio;
            $user_fail_ratio = $result_user->user_fail_ratio;
            $pr_user_fake_ratio = $result_user->pr_user_fake_ratio;
            $pr_user_fail_ratio = $result_user->pr_user_fail_ratio;
            $pr_fake_sent = $result_user->pr_fake_sent;
            $tr_fake_sent = $result_user->tr_fake_sent;
            $spacial_deliver_pr_ratio = $result_user->spacial_deliver_pr_ratio;
            $spacial_deliver_tr_ratio = $result_user->spacial_deliver_tr_ratio;
            $updated_key_balance;
            $spacial_deliver_fake;
            // Check Account Type
            $admin_id = $result_user->admin_id;
            $ref_user_id = $result_user->ref_user_id;
            $check_demo_user = $result_user->check_demo_user;
            // Check Message is already url encoded or not
            if (urlencode(urldecode($message)) === $message) {
                $message = urldecode($message);
                //$length = strlen($message);
                $length = strlen(utf8_decode($message));
            } else {
                $length = strlen(utf8_decode($message));
                //$length = strlen($message);
            }
            // Flash SMS
            $mclass = null;
            $alt_dcs = 1;
            $result_flash = $this->sms_model->getFlashMessage($flash_message);
            if ($result_flash) {
                $mclass = $result_flash['mclass'];
                $alt_dcs = $result_flash['alt_dcs'];
            }
            // DLR Mask
            $dlr_mask = "31";
            // Message Encoding

            $unicode = 1;

            if ($unicode) {
                $message_type = 2;
            } else {
                $message_type = 1;
            }
            // Calculate Credits
            $charset = "ASCII";
            $coding = 0;
            $total_credits = 0;
            $result_credits = $this->sms_model->getSMSCredits($message_type, $length, $message);
            if ($result_credits) {
                $charset = $result_credits['charset'];
                $coding = $result_credits['coding'];
                $total_credits = $result_credits['credits'];
            }
            // Explode Numbers Into An Array
            $result_array = explode(',', $mobile_numbers);
            // Total Messages
            $total_messages = sizeof($result_array);

            // Wrong Numbers
            $reject_list_array = array();

            if (sizeof($result_array)) {
                foreach ($result_array as $mobile) {
                    //  if (substr($mobile, 0, 2) != 91) {
                    //      $reject_list_array[] = $mobile;
                    //}
                }
            }
            $result_array = array_diff($result_array, $reject_list_array);

            // Check Black List Sender Id
            $black_sender = $this->sms_model->checkBlackSenderIds($from);
            // Get Black Listed Keywrods
            $black_keyword_array = array();
            $result_black_keywords = $this->sms_model->getBlackKeywords();

            if ($result_black_keywords) {
                foreach ($result_black_keywords as $row_bkeyword) {
                    $bkeyword = preg_replace('/\s+/', ' ', urldecode($row_bkeyword['black_keyword']));
                    $bkeyword_array = explode(' ', $bkeyword);
                    $black_keyword_array = array_merge($black_keyword_array, $bkeyword_array);
                }
            }
            $black_keyword_array = array_map('strtolower', $black_keyword_array);
            $black_keyword_array = array_filter($black_keyword_array);
            $result_message_array = array_intersect($black_keyword_array, array_map('strtolower', explode(' ', preg_replace('/\s+/', ' ', $message))));
            // Check Account Type (Demo | Active)
            if ($check_demo_user) {
                if ($admin_id) {
                    $result_info = $this->sms_model->getDefaultSettings();
                    if ($result_info) {
                        if ($result_info->demo_sender != "")
                            $from = $result_info->demo_sender;
                        else
                            $from = "BLKSMS";
                        if ($result_info->demo_message != "")
                            $message = $result_info->demo_message;
                    }
                } elseif ($ref_user_id) {
                    $result_info = $this->sms_model->getUserSettings($ref_user_id);
                    if ($result_info) {
                        if ($result_info->demo_sender != "")
                            $from = $result_info->demo_sender;
                        else
                            $from = "BLKSMS";
                        if ($result_info->demo_message != "")
                            $message = $result_info->demo_message;
                    }
                }
            }
            // Encode Message
            // Check Message is already url encoded or not
            if (urlencode(urldecode($message)) === $message) {
                $message = urlencode($message);
            } else {
                $message = urlencode($message);
            }

            // Get Black Lists & Remove Black List Numbers
            $bresult_array = array();
            $black_list_array = array();
            $result_black_list = $this->sms_model->getBlackLists();
            if ($result_black_list) {
                $black_list_array = $result_black_list;
                $bresult_array = array_intersect($result_array, $black_list_array);
                $result_array = array_diff($result_array, $black_list_array);
            }

            // Actual Balance Required
            $actual_balance_required = $total_messages * $total_credits;


            $approval_status = 1;
            $remainNumberOfSMS = 0;
            $pricing_error = 0;
            // check pricing for message approval
            $pricing_array = array();
//            $pricing_array = $this->user_data_model->checkPricing($user_id);
//            if ($pricing_array) {
//                $txn_id = $pricing_array[0]['txn_log_id'];
//                $pricing = $pricing_array[0]['txn_price'];
//                $tax_status = $pricing_array[0]['tax_status'];
//                $numberOfSMS = $pricing_array[0]['no_of_send_sms'];
//
//
//                if ($admin_approval_status == 0) {
//                    if ($tax_status == 1) {
//                        if ($pricing < .04) {
//                               $approval_status = 0;
//                                  $low_data = array(
//                                    'user_id' => $user_id,
//                                    'pricing'=>$pricing,
//                                );
//                                $this->db->insert('low_pricing_user',$low_data);
//                           
//                        } else {
//                            $approval_status = 1;
//                        }
//                    } elseif ($tax_status == 0) {
//                        if ($pricing < .06) {
//                            
//                                $approval_status = 0;
//                                $low_data = array(
//                                    'user_id' => $user_id,
//                                    'pricing'=>$pricing,
//                                );
//                                $this->db->insert('low_pricing_user',$low_data);
//                            
//                        } else {
//                            $approval_status = 1;
//                        }
//                    }
//                }
//            }
//            $approval_status;
//
//            $pricing_error = 0;
//            if ($approval_status == 0) {
//                $pricing_error = 420;
//            }
            // Check Valid Numbers
            if (sizeof($result_array) || sizeof($reject_list_array) || sizeof($bresult_array)) {
                $new_campaign_uid = 0;
                $xml = "";
                //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                // Promotional SMS
                $balance_status = 1;
                if ($route == "A" || $route == "C" || $route == "D" || $route == "I") {
                    if ($route == 'A' && $pr_sms_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }
                    if ($route == 'C' && $stock_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }
                    if ($route == 'D' && $prtodnd_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }
                    if ($route == 'I' && $international_balance < $actual_balance_required) {
                        $balance_status = 0;
                    }

                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;
                    // Check Available Balance And Send Number of Message
                    if ($balance_status == 0) {
                        $reason = "Insufficient Promotional Balance";
                        $log_by = "By Panel";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "Error: Not Have Sufficient Balance to Send SMS!";
                    } else {
                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($user_id);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            } else {
                                $special_balance = $this->sms_model->checkSpecialPrBalance($mostParentID);
                                $special_pr_balance = $special_balance->special_pr_balance;
                                $special_prtodnd_credits = $special_balance->prtodnd_credits;
                                $special_stock_credits = $special_balance->stock_credits;
                            }

                            if ($route == 'A' && $special_pr_balance < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'C' && $special_stock_credits < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            }
                            if ($route == 'D' && $special_prtodnd_credits < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            }

                            /*   if ($special_pr_balance < $actual_balance_required) {
                              $reseller_key_balance_status = 0;
                              } else {

                              $updated_key_balance = $special_pr_balance - $actual_balance_required;
                              $reseller_key_balance_status = 1;
                              } */
                            if ($reseller_key_balance_status == 0) {
                                $reseller_key_balance_status = 0;
                            } else {
                                if ($route == 'A') {
                                    $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'C') {
                                    $updated_key_balance = $special_stock_credits - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }
                                if ($route == 'D') {
                                    $updated_key_balance = $special_prtodnd_credits - $actual_balance_required;
                                    $reseller_key_balance_status = 1;
                                }

                                // $updated_key_balance = $special_pr_balance - $actual_balance_required;
                                // $reseller_key_balance_status = 1;
                            }
                        }


                        // Promotional SMS

                        if ($pro_user_group_id || $stock_user_group_id || $prtodnd_user_group_id) {

                            if ($route == 'A') {
                                $user_smsc_id = $result_user->pr_smsc;
                                $pro_user_group_id = $pro_user_group_id;
                            }
                            if ($route == 'D') {
                                $user_smsc_id = $result_user->prtodnd_smsc;
                                $pro_user_group_id = $prtodnd_user_group_id;
                            }
                            if ($route == 'C') {
                                $user_smsc_id = $result_user->stock_smsc;
                                $pro_user_group_id = $stock_user_group_id;
                            }
                            if ($route == 'I') {
                                $user_smsc_id = $result_user->international_smsc;
                                $pro_user_group_id = $international_user_group_id;
                            }
                            // If XML
                            $is_xml = 0;
                            $authentication = "";
                            $xml_url = "";
                            if ($user_smsc_id == 'XML') {
                                $result_setting = $this->sms_model->getDefaultSettings();
                                $authentication = $result_setting->xml_route_authkey;
                                $xml_url = $result_setting->xml_route_url;
                                $is_xml = 1;
                            }
                            // Check Sender Id (Open/Close)
                            if ($p_sender_id_option == 0) {
                                $from = "BLKSMS"; // random_string('numeric', 6);
                            }

                            // Insert Campaign
                            $request_by = "By API";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");

                            $deduct_balance = 0;
                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $message_category = 1;
                                // If Schedule SMS
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $campaign_status = 2;
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error,
                                    'language_status' => $language
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_black_array['user_group_id'] = $pro_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    $count_messages = 0;
                                    if ($route == "A" && $dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "A" && $dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "C" && $stock_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "C" && $stock_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "D" && $premium_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "D" && $premium_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "I") {
                                        $dnd_check = 0;
                                    }


                                    // DND Not Allowed
                                    if ($dnd_check) {
                                        if (sizeof($result_array)) {
                                            $ssms_data = array();
                                            foreach ($result_array as $ndnd_number) {
                                                $ssms_temp_array = array();
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $status = "31";
                                                // Sent SMS
                                                $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                $ssms_temp_array['campaign_id'] = $campaign_id;
                                                $ssms_temp_array['user_id'] = $user_id;
                                                $ssms_temp_array['msg_id'] = $msg_id;
                                                $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                $ssms_temp_array['message'] = $message;
                                                $ssms_temp_array['msg_length'] = $length;
                                                $ssms_temp_array['status'] = $status;
                                                $ssms_temp_array['submit_date'] = $subdate;
                                                $ssms_temp_array['temporary_status'] = $temporary_status;
                                                $ssms_temp_array['default_route'] = $user_smsc_id;
                                                $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $ssms_data[] = $ssms_temp_array;
                                                unset($ssms_temp_array);
                                            }
                                            if (sizeof($ssms_data)) {

                                                $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                            }
                                        }
                                    } else {
                                        // Custom DND Filter
                                        $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                        if ($result_dnd) {
                                            $dnd_array = $result_dnd;
                                            $dnd_array_size = sizeof($dnd_array);
                                        }

                                        // Non-DND Numbers
                                        $ndnd_result = array_diff($result_array, $dnd_array);

                                        if (sizeof($dnd_array)) {
                                            $data_dnd = array();
                                            foreach ($dnd_array as $dnd_number) {
                                                $temp_dnd_array = array();
                                                $status = "DND";
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                $temp_dnd_array['campaign_id'] = $campaign_id;
                                                $temp_dnd_array['user_id'] = $user_id;
                                                $temp_dnd_array['msg_id'] = $msg_id;
                                                $temp_dnd_array['mobile_no'] = $dnd_number;
                                                $temp_dnd_array['message'] = $message;
                                                $temp_dnd_array['msg_length'] = $length;
                                                $temp_dnd_array['status'] = $status;
                                                $temp_dnd_array['submit_date'] = $subdate;
                                                $temp_dnd_array['temporary_status'] = $temporary_status;
                                                $temp_dnd_array['default_route'] = $user_smsc_id;
                                                $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data_dnd[] = $temp_dnd_array;
                                                unset($temp_dnd_array);
                                            }
                                            if (sizeof($data_dnd)) {
                                                $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                            }
                                        }

                                        // Get White List Numbers From User Request
                                        if (sizeof($ndnd_result)) {
                                            $ssms_data = array();
                                            foreach ($ndnd_result as $ndnd_number) {
                                                $ssms_temp_array = array();
                                                $deduct_balance++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;
                                                $status = "31";
                                                // Sent SMS
                                                $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                $ssms_temp_array['campaign_id'] = $campaign_id;
                                                $ssms_temp_array['user_id'] = $user_id;
                                                $ssms_temp_array['msg_id'] = $msg_id;
                                                $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                $ssms_temp_array['message'] = $message;
                                                $ssms_temp_array['msg_length'] = $length;
                                                $ssms_temp_array['status'] = $status;
                                                $ssms_temp_array['submit_date'] = $subdate;
                                                $ssms_temp_array['temporary_status'] = $temporary_status;
                                                $ssms_temp_array['default_route'] = $user_smsc_id;
                                                $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                $ssms_data[] = $ssms_temp_array;
                                                unset($ssms_temp_array);
                                            }
                                            if (sizeof($ssms_data)) {
                                                $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                            }
                                        }
                                    }

                                    // Update User Balance
                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                        $updated_key_balance = $updated_key_balance + ($dnd_array_size * $total_credits);
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'I') {
                                        $updated_sms_balance = $international_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }

                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);

                                    // Update Actual Message
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $total_deduction = $deduct_balance * $total_credits;
                                    $total_deduction = $total_deduction - ($dnd_array_size * $total_credits);
                                    $data = array(
                                        'total_deducted' => $total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'campaign_status' => $campaign_status,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    return $campaign_uid;
                                }
                            } else {
                                $message_category = 1;
                                $campaign_status = 1;
                                if ($schtime != "") {
                                    // Schedule Array
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $pro_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error,
                                    'language_status' => $language
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);

                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_black_array['user_group_id'] = $pro_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }

                                    // Insert Rejected List Numbers                                    
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $pro_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    $count_messages = 0;

                                    if ($route == "A" && $dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "A" && $dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "C" && $stock_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "C" && $stock_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "D" && $premium_dnd_check == 0) {
                                        $dnd_check = 1;
                                    } else if ($route == "D" && $premium_dnd_check == 1) {
                                        $dnd_check = 0;
                                    } else if ($route == "I") {
                                        $dnd_check = 1;
                                    }



                                    // DND Not Allowed
                                    if ($dnd_check) {
                                        if (sizeof($result_array)) {

                                            $white_list_array = array();
                                            $result_white_list = $this->sms_model->getWhiteLists();
                                            if ($result_white_list) {
                                                $white_list_array = $result_white_list;
                                            }
                                            // Apply Ratio (Fake Delivered And Failed)
                                            if (sizeof($result_array) > 88) {
                                                $result_array1 = array_diff($result_array, $white_list_array);
                                                //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                // Apply User Ratio
                                                //----------------------------------------------------------------------------------------------------------------------------------------------//
                                                //apply spacial ratio 
                                                $spacial_deliver_fake = 0;
                                                if ($spacial_deliver_pr_ratio) {
                                                    $spacial_fake_ratio = (sizeof($result_array1) * $spacial_deliver_pr_ratio) / 100;
                                                    $spacial_deliver_fake = ROUND($spacial_fake_ratio);
                                                }
                                                if ($spacial_deliver_fake) {
                                                    $new_size = sizeof($result_array1);
                                                    $new_own_ratio = $new_size - $spacial_deliver_fake;
                                                    $user_fake = ($new_own_ratio * $pr_user_fake_ratio) / 100;
                                                    $u_fake = ROUND($user_fake);
                                                    $user_fake_sent = ($new_own_ratio * $pr_fake_sent) / 100;
                                                    $u_fake_sent = ROUND($user_fake_sent);
                                                    //$user_fail = ($new_own_ratio * $pr_user_fail_ratio) / 100;
                                                    //$u_fail = ROUND($user_fail);
                                                } else {

                                                    $user_fake = (sizeof($result_array1) * $pr_user_fake_ratio) / 100;
                                                    $u_fake = ROUND($user_fake);
                                                    $user_fail = (sizeof($result_array1) * $pr_user_fail_ratio) / 100;
                                                    $u_fail = ROUND($user_fail);
                                                    $user_fake_sent = (sizeof($result_array1) * $pr_fake_sent) / 100;
                                                    $u_fake_sent = ROUND($user_fake_sent);
                                                }
//add both ratio                                   
                                                if ($spacial_deliver_fake) {
                                                    $u_fake = $u_fake + $spacial_deliver_fake;
                                                }


                                                // Get Fake Delivered Number
                                                if ($pr_user_fake_ratio) {
                                                    if ($u_fake) {
                                                        $data_fake = array();
                                                        $fake_d_array = $this->sms_model->getRandomArray($result_array1, $u_fake);
                                                        $result_array1 = array_diff($result_array1, $fake_d_array);
                                                        foreach ($fake_d_array as $fake_number) {
                                                            $temp_fake_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 2;

                                                            $temp_fake_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_fake_array['campaign_id'] = $campaign_id;
                                                            $temp_fake_array['user_id'] = $user_id;
                                                            $temp_fake_array['msg_id'] = $msg_id;
                                                            $temp_fake_array['message'] = $message;
                                                            $temp_fake_array['msg_length'] = $length;
                                                            $temp_fake_array['mobile_no'] = $fake_number;
                                                            $temp_fake_array['status'] = $status;
                                                            $temp_fake_array['submit_date'] = $subdate;
                                                            $temp_fake_array['temporary_status'] = $temporary_status;
                                                            $temp_fake_array['default_route'] = $user_smsc_id;
                                                            $temp_fake_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                            $data_fake[] = $temp_fake_array;
                                                            unset($temp_fake_array);
                                                        }
                                                        if (sizeof($data_fake)) {
                                                            $res_fake = $this->db->insert_batch('sent_sms', $data_fake);
                                                            //$this->db->insert_batch('voice_msg_dlr', $data_fake);
                                                        }
                                                    }
                                                }

                                                // Get Fake Failed Number
                                                if ($pr_user_fail_ratio) {
                                                    if ($u_fail) {
                                                        $data_failed = array();
                                                        $fake_f_array = $this->sms_model->getRandomArray($result_array1, $u_fail);
                                                        $result_array1 = array_diff($result_array1, $fake_f_array);
                                                        foreach ($fake_f_array as $failed_number) {
                                                            $temp_failed_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "31";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 3;

                                                            $temp_failed_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_failed_array['campaign_id'] = $campaign_id;
                                                            $temp_failed_array['user_id'] = $user_id;
                                                            $temp_failed_array['msg_id'] = $msg_id;
                                                            $temp_failed_array['message'] = $message;
                                                            $temp_failed_array['msg_length'] = $length;
                                                            $temp_failed_array['mobile_no'] = $failed_number;
                                                            $temp_failed_array['status'] = $status;
                                                            $temp_failed_array['submit_date'] = $subdate;
                                                            $temp_failed_array['temporary_status'] = $temporary_status;
                                                            $temp_failed_array['default_route'] = $user_smsc_id;
                                                            $temp_failed_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                            $data_failed[] = $temp_failed_array;
                                                            unset($temp_failed_array);
                                                        }
                                                        if (sizeof($data_failed)) {
                                                            $res_failed = $this->db->insert_batch('sent_sms', $data_failed);
                                                            //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                        }
                                                    }
                                                }


                                                // Get Fake sent Number
                                                if ($pr_fake_sent) {
                                                    if ($u_fake_sent) {
                                                        $data_failed = array();
                                                        $fake_s_array = $this->sms_model->getRandomArray($result_array1, $u_fake_sent);
                                                        $result_array1 = array_diff($result_array1, $fake_s_array);
                                                        foreach ($fake_s_array as $fake_sent_number) {
                                                            $temp_sent_array = array();
                                                            $deduct_balance++;
                                                            $msg_id = strtolower(random_string('alnum', 24));
                                                            $status = "3";
                                                            $subdate = date("Y-m-d H:i:s");
                                                            $temporary_status = 4;

                                                            $temp_sent_array['user_group_id'] = $pro_user_group_id;
                                                            $temp_sent_array['campaign_id'] = $campaign_id;
                                                            $temp_sent_array['user_id'] = $user_id;
                                                            $temp_sent_array['msg_id'] = $msg_id;
                                                            $temp_sent_array['message'] = $message;
                                                            $temp_sent_array['msg_length'] = $length;
                                                            $temp_sent_array['mobile_no'] = $fake_sent_number;
                                                            $temp_sent_array['status'] = $status;
                                                            $temp_sent_array['submit_date'] = $subdate;
                                                            $temp_sent_array['temporary_status'] = $temporary_status;
                                                            $temp_sent_array['default_route'] = $user_smsc_id;
                                                            $temp_sent_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                            $data_fake_sent[] = $temp_sent_array;
                                                            unset($temp_sent_array);
                                                        }
                                                        if (sizeof($data_fake_sent)) {
                                                            $res_sent = $this->db->insert_batch('sent_sms', $data_fake_sent);
                                                            //$this->db->insert_batch('voice_msg_dlr', $data_failed);
                                                        }
                                                    }
                                                }
                                                //----------------------------------------------------------------------------------------------------------------------------------------------//

                                                $result = array_intersect($result_array, $white_list_array);
                                                $result_array = array_merge($result_array1, $result);
                                            }



// If No SMSC Route Available

                                            if ($user_smsc_id == 'XML') {
                                                $ssms_data = array();
                                                $loop = 0;
                                                // Prepare XML
                                                $xml .= "<MESSAGE>";
                                                $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                $xml .= "<SENDER>$from</SENDER>";
                                                $xml .= "<ROUTE>default</ROUTE>";
                                                $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                $xml .= "<FLASH>$flash_message</FLASH>";
                                                $xml .= "<UNICODE>$unicode</UNICODE>";
                                                $xml .= "<SMS TEXT='$message'>";
                                                foreach ($result_array as $key => $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    // Add Number Into XML File
                                                    $xml .= "<ADDRESS TO='$number'></ADDRESS>";
                                                }
                                                $xml .= "</SMS>";
                                                $xml .= "</MESSAGE>";
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    if ($reseller_key_balance_status) {
                                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                    }
                                                }
                                            } else {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($result_array as $number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $count_messages++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['mobile_no'] = $number;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $number;


                                                        $new_sms = urldecode($message);
                                                        $actual_sms = urlencode(strip_tags($new_sms));


                                                        $sqlbox_temp_array['msgdata'] = $actual_sms;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {

                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }
                                    } else {
                                        // Custom DND Filter
                                        $dnd_array = array();
                                        $result_dnd = $this->sms_model->getDNDNumbers($result_array);
                                        if ($result_dnd) {
                                            $dnd_array = $result_dnd;
                                            $dnd_array_size = sizeof($dnd_array);
                                        }

                                        // Non-DND Numbers
                                        $ndnd_result = array_diff($result_array, $dnd_array);

                                        // DND Numbers
                                        if (sizeof($dnd_array)) {
                                            $data_dnd = array();
                                            foreach ($dnd_array as $dnd_number) {
                                                $temp_dnd_array = array();
                                                $status = "DND";
                                                $deduct_balance++;
                                                $count_messages++;
                                                $msg_id = strtolower(random_string('alnum', 24));
                                                $subdate = date("Y-m-d H:i:s");
                                                $temporary_status = 1;

                                                $temp_dnd_array['user_group_id'] = $pro_user_group_id;
                                                $temp_dnd_array['campaign_id'] = $campaign_id;
                                                $temp_dnd_array['user_id'] = $user_id;
                                                $temp_dnd_array['msg_id'] = $msg_id;
                                                $temp_dnd_array['mobile_no'] = $dnd_number;
                                                $temp_dnd_array['message'] = $message;
                                                $temp_dnd_array['msg_length'] = $length;
                                                $temp_dnd_array['status'] = $status;
                                                $temp_dnd_array['submit_date'] = $subdate;
                                                $temp_dnd_array['temporary_status'] = $temporary_status;
                                                $temp_dnd_array['default_route'] = $user_smsc_id;
                                                $temp_dnd_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                                $data_dnd[] = $temp_dnd_array;
                                                unset($temp_dnd_array);
                                            }
                                            if (sizeof($data_dnd)) {
                                                $res_dnd = $this->db->insert_batch('sent_sms', $data_dnd);
                                                //$this->db->insert_batch('voice_msg_dlr', $data_dnd);
                                            }
                                        }

                                        // Non-DND Numbers
                                        if (sizeof($ndnd_result)) {

                                            // If No SMSC Route Available
                                            if ($user_smsc_id == 'XML') {
                                                $ssms_data = array();
                                                $loop = 0;
                                                // Prepare XML
                                                $xml .= "<MESSAGE>";
                                                $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                $xml .= "<SENDER>$from</SENDER>";
                                                $xml .= "<ROUTE>default</ROUTE>";
                                                $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                $xml .= "<FLASH>$flash_message</FLASH>";
                                                $xml .= "<UNICODE>$unicode</UNICODE>";
                                                $xml .= "<SMS TEXT='$message'>";
                                                foreach ($ndnd_result as $key => $ndnd_number) {
                                                    $ssms_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    // Add Number Into XML File
                                                    $xml .= "<ADDRESS TO='$ndnd_number'></ADDRESS>";
                                                }
                                                $xml .= "</SMS>";
                                                $xml .= "</MESSAGE>";
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                    if ($reseller_key_balance_status) {
                                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                    }
                                                }
                                            } else {
                                                $ssms_data = array();
                                                $sqlbox_data = array();
                                                $loop = 0;
                                                foreach ($ndnd_result as $ndnd_number) {
                                                    $ssms_temp_array = array();
                                                    $sqlbox_temp_array = array();
                                                    $deduct_balance++;
                                                    $msg_id = strtolower(random_string('alnum', 24));
                                                    $status = "31";
                                                    $subdate = date("Y-m-d H:i:s");
                                                    $temporary_status = 1;
                                                    $ssms_temp_array['user_group_id'] = $pro_user_group_id;
                                                    $ssms_temp_array['campaign_id'] = $campaign_id;
                                                    $ssms_temp_array['user_id'] = $user_id;
                                                    $ssms_temp_array['msg_id'] = $msg_id;
                                                    $ssms_temp_array['mobile_no'] = $ndnd_number;
                                                    $ssms_temp_array['message'] = $message;
                                                    $ssms_temp_array['msg_length'] = $length;
                                                    $ssms_temp_array['status'] = $status;
                                                    $ssms_temp_array['submit_date'] = $subdate;
                                                    $ssms_temp_array['temporary_status'] = $temporary_status;
                                                    $ssms_temp_array['default_route'] = $user_smsc_id;
                                                    $ssms_temp_array['reseller_key_balance_status'] = $reseller_key_balance_status;
                                                    $ssms_data[] = $ssms_temp_array;
                                                    unset($ssms_temp_array);

                                                    if ($schtime == "") {
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $ndnd_number;
                                                        $new_sms = urldecode($message);
                                                        $actual_sms = urlencode(strip_tags($new_sms));
                                                        $sqlbox_temp_array['msgdata'] = $actual_sms;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                }
                                                if (sizeof($ssms_data)) {
                                                    $res1 = $this->db->insert_batch('sent_sms', $ssms_data);
                                                    //$this->db->insert_batch('voice_msg_dlr', $ssms_data);
                                                }
                                                if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {

                                                    $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                }
                                            }
                                        }
                                    }

                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                        $updated_key_balance = $updated_key_balance + ($dnd_array_size * $total_credits);
                                    } else {
                                        if ($route == 'A') {
                                            $updated_key_balance = $special_pr_balance;
                                        }
                                        if ($route == 'C') {
                                            $updated_key_balance = $special_stock_credits;
                                        }
                                        if ($route == 'D') {
                                            $updated_key_balance = $special_prtodnd_credits;
                                        }

                                        //  $updated_key_balance = $special_pr_balance;
                                    }

                                    // Update User Balance

                                    $balance_type = "PR";
                                    if ($route == 'A') {
                                        $updated_sms_balance = $pr_sms_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'C') {
                                        $updated_sms_balance = $stock_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'D') {
                                        $updated_sms_balance = $prtodnd_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }
                                    if ($route == 'I') {
                                        $updated_sms_balance = $international_balance - ($deduct_balance * $total_credits);
                                        $updated_sms_balance = $updated_sms_balance + ($dnd_array_size * $total_credits);
                                    }


                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                    // Update Actual Message
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $total_deduction = $deduct_balance * $total_credits;
                                    $total_deduction = $total_deduction - ($dnd_array_size * $total_credits);
                                    $data = array(
                                        'total_deducted' => $total_deduction,
                                        'actual_message' => $deduct_balance,
                                        'campaign_status' => $campaign_status,
                                        'total_time' => $total_time
                                    );
                                    if ($new_campaign_uid) {
                                        $data['campaign_uid'] = $new_campaign_uid;
                                    }
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    // Return Campaign Uid
                                    if ($new_campaign_uid) {
                                        return $new_campaign_uid;
                                    } else {
                                        return $campaign_uid;
                                    }
                                }
                            }
                        } else {
                            $reason = "Promotional route is not assigned to user";
                            $log_by = "By API";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "Error: Promotional route is not assigned to user!";
                        }
                    }

                    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------//                    
                }
                // Transactional SMS
                if ($route == "B") {
                    $reseller_key_balance_status = 1;
                    $most_parent_id_reseller_status = 0;
                    $updated_key_balance = 0;
                    $spacial_deliver_fake = 0;
                    // Check Available Balance And Send Number of Message
                    if ($tr_sms_balance < $actual_balance_required) {
                        $reason = "Insufficient Transactional Balance";
                        $log_by = "By API";
                        $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                        return "Error: Not Have Sufficient Balance to Send SMS!";
                    } else {
//                        $date_status = 0;
//                        if ($user_id == 72) {
//                            $date = date('dmY');
//                            $date_status = strpos($message, $date);
//                            if ($date_status == 0) {
//                                $reason = " Invelid Message Formate And Date!";
//                                $log_by = "By API";
//                                $mobile_data  = $mobile_numbers;
//                                $message_data = $message;
//                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by,$mobile_data,$message_data);
//                                return "Error: Invelid Message Formate And Date!";
//                            } else { 
//                                
//                            }
//                        }

                        $verifySpecialReseller = $this->sms_model->varifySpecialReseller($user_id);
                        $mostParentID = $verifySpecialReseller->most_parent_id;
                        $spacial_reseller_status = $verifySpecialReseller->spacial_reseller_status;
                        if ($mostParentID != 0) {
                            $varifyMostParentId = $this->sms_model->varifyMostParentId($mostParentID);
                            $most_parent_id_reseller_status = $varifyMostParentId->spacial_reseller_status;
                        }

                        if ($spacial_reseller_status == 1 || $most_parent_id_reseller_status == 1) {
                            //check Special PR balance
                            if ($spacial_reseller_status) {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($user_id);
                            } else {
                                $special_tr_balance = $this->sms_model->checkSpecialTrBalance($mostParentID);
                            }

                            if ($special_tr_balance < $actual_balance_required) {
                                $reseller_key_balance_status = 0;
                            } else {

                                $updated_key_balance = $special_tr_balance - $actual_balance_required;
                                $reseller_key_balance_status = 1;
                            }
                        }

                        // Transactional SMS
                        if ($tr_user_group_id) {
                            $user_smsc_id = $result_user->tr_smsc;
                            //check vodafone approve sender ids

                            $check_approve_sender_id = $this->sms_model->checkApproveSenderId($sender_id_type, $sender_id_length, $from);
                            if ($check_approve_sender_id) {

                                $tr_user_group_id = $check_approve_sender_id->route;
                                $this->db->select('smsc_id');
                                $this->db->from('user_groups');
                                $this->db->where('user_group_id', $tr_user_group_id);
                                $query = $this->db->get();

                                $user_smsc_id = $query->row('smsc_id');
                            }
                            // If XML
                            $is_xml = 0;
                            $authentication = "";
                            $xml_url = "";
                            if ($user_smsc_id == 'XML') {
                                $result_setting = $this->sms_model->getDefaultSettings();
                                $authentication = $result_setting->xml_route_authkey;
                                $xml_url = $result_setting->xml_route_url;
                                $is_xml = 1;
                            }
                            // Special Case
                            // Check Numeric/Alphabetic/Alphanumeric Type
                            $check_sender_id = $this->sms_model->checkSenderIdType($sender_id_type, $sender_id_length, $from);
                            if ($check_sender_id) {
                                $reason = "Invalid Sender Id";
                                $log_by = "By API";
                                $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                                return "Error: Please check your Sender ID!";
                            }
                            // Insert Campaign
                            $request_by = "By API";
                            $campaign_uid = strtolower(random_string('alnum', 24));
                            $submit_date = date("Y-m-d H:i:s");
                            // Deduct SMS Balance
                            $deduct_balance = 0;
                            // If Message Content Blocked By Admin
                            if (sizeof($result_message_array) || $black_sender) {
                                $check_keyword = 0;
                                $check_sender = 0;
                                if (sizeof($result_message_array)) {
                                    $check_keyword = 1;
                                }
                                if ($black_sender) {
                                    $check_sender = 1;
                                }
                                $check_black_listed = $check_keyword . "|" . $check_sender;
                                $message_category = 1;
                                $campaign_status = 2;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'black_listed' => $check_black_listed,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();

                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_black_array['user_group_id'] = $tr_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }

                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Check Sender Id
                                    $sender_condition = 0;
                                    if ($t_sender_id_option) { // Open
                                        $sender_condition = 1;
                                    } else {
                                        $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                        if ($result_sender_id) {
                                            $sender_condition = 1;
                                        }
                                    }

                                    // Check Keyword
                                    $keyword_condition = 0;
                                    if ($keyword_option) { // Open
                                        $keyword_condition = 1;
                                    } else {
                                        $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                        if ($result_keyword) {
                                            $keyword_condition = 1;
                                        }
                                    }

                                    // First Insert Into Database Then Check All Conditions
                                    if (sizeof($result_array)) {
                                        $data1 = array();
                                        foreach ($result_array as $number) {
                                            $temp_array1 = array();
                                            $deduct_balance++;
                                            $status = "31";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;
                                            $temp_array1['user_group_id'] = $tr_user_group_id;
                                            $temp_array1['campaign_id'] = $campaign_id;
                                            $temp_array1['user_id'] = $user_id;
                                            $temp_array1['msg_id'] = $msg_id;
                                            $temp_array1['message'] = $message;
                                            $temp_array1['msg_length'] = $length;
                                            $temp_array1['mobile_no'] = $number;
                                            $temp_array1['status'] = $status;
                                            $temp_array1['submit_date'] = $subdate;
                                            $temp_array1['temporary_status'] = $temporary_status;
                                            $temp_array1['default_route'] = $user_smsc_id;
                                            $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $data1[] = $temp_array1;
                                            unset($temp_array1);
                                        }
                                        $res1 = $this->db->insert_batch('sent_sms', $data1);
                                        //$this->db->insert_batch('voice_msg_dlr', $data1);
                                    }

                                    // Get Unique Numbers
                                    $total_unique = 0;
                                    $exceed_numbers = 0;
                                    $db_condition = 0;
                                    $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                    if ($result_numbers) {
                                        $total_unique = $result_numbers;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                        if ($total_unique <= $number_allowed) {
                                            $db_condition = 1;
                                        }
                                    }
                                    if ($reseller_key_balance_status) {
                                        $cal = $spacial_deliver_fake * $total_credits;
                                        $updated_key_balance = $updated_key_balance + $cal;
                                    } else {
                                        $updated_key_balance = $special_tr_balance;
                                    }

                                    $balance_type = "TR";
                                    $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                    //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                    /*  $mostParentID = 0;
                                      $spacial_reseller_status = 0;
                                      $most_parent_id_reseller_status = 0;
                                      $updated_key_balance = 0; */


                                    $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance);
                                    // Update Actual Message
                                    $this->benchmark->mark('End_Time');
                                    $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                    $data = array(
                                        'total_deducted' => $deduct_balance * $total_credits,
                                        'actual_message' => $deduct_balance,
                                        'sender_status' => $sender_condition,
                                        'keyword_status' => $keyword_condition,
                                        'number_db_status' => $db_condition,
                                        'unique_numbers' => $total_unique,
                                        'exceed_numbers' => $exceed_numbers,
                                        'campaign_status' => $campaign_status,
                                        'total_time' => $total_time
                                    );
                                    $this->db->where('campaign_id', $campaign_id);
                                    $this->db->update('campaigns', $data);
                                    // Insert API Hit
                                    $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                    return $campaign_uid;
                                }
                            } else {
                                $campaign_status = 1;
                                $message_category = 1;
                                if ($schtime != "") {
                                    $message_category = 2;
                                }
                                $sch_sms_array = array(
                                    'campaign_uid' => $campaign_uid,
                                    'user_group_id' => $tr_user_group_id,
                                    'campaign_name' => $campaign_name,
                                    'user_id' => $user_id,
                                    'message_category' => $message_category,
                                    'total_messages' => $total_messages,
                                    'total_credits' => $total_credits,
                                    'sender_id' => $from,
                                    'submit_date' => $submit_date,
                                    'schedule_date' => $schtime,
                                    'request_by' => $request_by,
                                    'message_type' => $message_type,
                                    'flash_message' => $flash_message,
                                    'message' => $message,
                                    'message_length' => $length,
                                    'route' => $route,
                                    'is_xml' => $is_xml,
                                    'reseller_key_balance_status' => $reseller_key_balance_status,
                                    'pricing_error' => $pricing_error
                                );
                                $response_cm = $this->sms_model->insertSchSMS($sch_sms_array);
                                if ($response_cm) {
                                    // Get Last Campaign Id
                                    $campaign_id = $this->db->insert_id();
                                    // Insert Black List Numbers
                                    if (sizeof($bresult_array)) {
                                        $data_black = array();
                                        foreach ($bresult_array as $black_number) {
                                            $temp_black_array = array();
                                            $status = "Blocked";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;
                                            $temp_black_array['user_group_id'] = $tr_user_group_id;
                                            $temp_black_array['campaign_id'] = $campaign_id;
                                            $temp_black_array['user_id'] = $user_id;
                                            $temp_black_array['msg_id'] = $msg_id;
                                            $temp_black_array['message'] = $message;
                                            $temp_black_array['msg_length'] = $length;
                                            $temp_black_array['mobile_no'] = $black_number;
                                            $temp_black_array['status'] = $status;
                                            $temp_black_array['submit_date'] = $subdate;
                                            $temp_black_array['temporary_status'] = $temporary_status;
                                            $temp_black_array['default_route'] = $user_smsc_id;
                                            $temp_black_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_black[] = $temp_black_array;
                                            unset($temp_black_array);
                                        }
                                        if (sizeof($data_black)) {
                                            $res_black = $this->db->insert_batch('sent_sms', $data_black);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_black);
                                        }
                                    }
                                    // Insert Rejected List Numbers
                                    if (sizeof($reject_list_array)) {
                                        $data_rejected = array();
                                        foreach ($reject_list_array as $reject_number) {
                                            $temp_reject_array = array();
                                            $deduct_balance++;
                                            $status = "Rejected";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;

                                            $temp_reject_array['user_group_id'] = $tr_user_group_id;
                                            $temp_reject_array['campaign_id'] = $campaign_id;
                                            $temp_reject_array['user_id'] = $user_id;
                                            $temp_reject_array['msg_id'] = $msg_id;
                                            $temp_reject_array['message'] = $message;
                                            $temp_reject_array['msg_length'] = $length;
                                            $temp_reject_array['mobile_no'] = $reject_number;
                                            $temp_reject_array['status'] = $status;
                                            $temp_reject_array['submit_date'] = $subdate;
                                            $temp_reject_array['temporary_status'] = $temporary_status;
                                            $temp_reject_array['default_route'] = $user_smsc_id;
                                            $temp_reject_array['reseller_key_balance_status'] = $reseller_key_balance_status;

                                            $data_rejected[] = $temp_reject_array;
                                            unset($temp_reject_array);
                                        }
                                        if (sizeof($data_rejected)) {
                                            $res_rejected = $this->db->insert_batch('sent_sms', $data_rejected);
                                            //$this->db->insert_batch('voice_msg_dlr', $data_rejected);
                                        }
                                    }

                                    // Check Sender Id
                                    $sender_condition = 0;
                                    if ($t_sender_id_option) { // Open
                                        $sender_condition = 1;
                                    } else {
                                        if ($check_demo_user && $tr_sms_balance <= 20) {
                                            $sender_condition = 1;
                                        } else {
                                            $result_sender_id = $this->sms_model->checkSenderId($user_id, $from);
                                            if ($result_sender_id) {
                                                $sender_condition = 1;
                                            }
                                        }
                                    }

                                    // Check Keyword
                                    $keyword_condition = 0;
                                    if ($keyword_option) { // Open
                                        $keyword_condition = 1;
                                    } else {
                                        if ($check_demo_user && $tr_sms_balance <= 20) {
                                            $keyword_condition = 1;
                                        } else {
                                            $result_keyword = $this->sms_model->checkKeyword($user_id, $message);
                                            if ($result_keyword) {
                                                $keyword_condition = 1;
                                            }
                                        }
                                    }

                                    // First Insert Into Database Then Check All Conditions
                                    if (sizeof($result_array)) {
                                        $data1 = array();
                                        foreach ($result_array as $number) {
                                            $temp_array1 = array();
                                            $deduct_balance++;
                                            $status = "31";
                                            $msg_id = strtolower(random_string('alnum', 24));
                                            $subdate = date("Y-m-d H:i:s");
                                            $temporary_status = 1;
                                            $temp_array1['user_group_id'] = $tr_user_group_id;
                                            $temp_array1['campaign_id'] = $campaign_id;
                                            $temp_array1['user_id'] = $user_id;
                                            $temp_array1['msg_id'] = $msg_id;
                                            $temp_array1['message'] = $message;
                                            $temp_array1['msg_length'] = $length;
                                            $temp_array1['mobile_no'] = $number;
                                            $temp_array1['status'] = $status;
                                            $temp_array1['submit_date'] = $subdate;
                                            $temp_array1['temporary_status'] = $temporary_status;
                                            $temp_array1['default_route'] = $user_smsc_id;
                                            $temp_array1['reseller_key_balance_status'] = $reseller_key_balance_status;
                                            $data1[] = $temp_array1;
                                            unset($temp_array1);
                                        }
                                        if (sizeof($data1)) {
                                            $res1 = $this->db->insert_batch('sent_sms', $data1);
                                            //$this->db->insert_batch('voice_msg_dlr', $data1);
                                        }
                                    }

                                    // Get Unique Numbers
                                    $total_unique = 0;
                                    $exceed_numbers = 0;
                                    $db_condition = 0;
                                    $result_numbers = $this->sms_model->getUniqueNumbers1($user_id);
                                    if ($result_numbers) {
                                        $total_unique = $result_numbers;
                                        $exceed_numbers = $total_unique - $number_allowed;
                                        if ($total_unique <= $number_allowed) {
                                            $db_condition = 1;
                                        }
                                    }
                                    // IF SENDER ID APPROVED, KEYWORD APPROVED AND DATABASE NOT EXCEED MORE THAN GIVEN LIMIT
                                    if ($sender_condition && $keyword_condition && $db_condition) {
                                        if ($schtime == "") {
                                            $sms_status = array('DND', 'Blocked', 'Rejected');
                                            $this->db->select('mobile_no, message, status');
                                            $this->db->from('sent_sms');
                                            $this->db->where('campaign_id', $campaign_id);
                                            $this->db->where_not_in('status', $sms_status);
                                            $query = $this->db->get();
                                            if ($query->num_rows() > 0) {
                                                // If No SMSC Route Available
                                                if ($user_smsc_id == 'XML') {
                                                    // Prepare XML
                                                    $xml .= "<MESSAGE>";
                                                    $xml .= "<AUTHKEY>$authentication</AUTHKEY>";
                                                    $xml .= "<SENDER>$from</SENDER>";
                                                    $xml .= "<ROUTE>template</ROUTE>";
                                                    $xml .= "<CAMPAIGN>$campaign_name</CAMPAIGN>";
                                                    $xml .= "<FLASH>$flash_message</FLASH>";
                                                    $xml .= "<UNICODE>$unicode</UNICODE>";
                                                    foreach ($query->result() as $row) {
                                                        $xml .= "<SMS TEXT='$row->message'>";
                                                        $xml .= "<ADDRESS TO='$row->mobile_no'></ADDRESS>";
                                                        $xml .= "</SMS>";
                                                    }
                                                    $xml .= "</MESSAGE>";

                                                    if ($reseller_key_balance_status) {
                                                        $new_campaign_uid = $this->utility_model->sendSMSXML($xml_url, $xml);
                                                    }
                                                } else {
                                                    $sqlbox_data = array();
                                                    foreach ($query->result() as $row) {
                                                        $sqlbox_temp_array = array();
                                                        $momt = "MT";
                                                        $sms_type = 2;
                                                        $dlr_url = $campaign_id;
                                                        // SQLBox Send SMS
                                                        $sqlbox_temp_array['momt'] = $momt;
                                                        $sqlbox_temp_array['sender'] = $from;
                                                        $sqlbox_temp_array['receiver'] = $row->mobile_no;
                                                        $sqlbox_temp_array['msgdata'] = $row->message;
                                                        $sqlbox_temp_array['smsc_id'] = $user_smsc_id;
                                                        $sqlbox_temp_array['id'] = $campaign_id;
                                                        $sqlbox_temp_array['sms_type'] = $sms_type;
                                                        $sqlbox_temp_array['dlr_mask'] = $dlr_mask;
                                                        $sqlbox_temp_array['dlr_url'] = $dlr_url;
                                                        $sqlbox_temp_array['mclass'] = $mclass;
                                                        $sqlbox_temp_array['coding'] = $coding;
                                                        $sqlbox_temp_array['charset'] = $charset;
                                                        $sqlbox_data[] = $sqlbox_temp_array;
                                                        unset($sqlbox_temp_array);
                                                    }
                                                    if (sizeof($sqlbox_data) && $reseller_key_balance_status && $approval_status) {
                                                        $res2 = $this->db->insert_batch('sqlbox_send_sms', $sqlbox_data);
                                                    }
                                                }
                                            }
                                        }



                                        if ($reseller_key_balance_status) {
                                            $cal = $spacial_deliver_fake * $total_credits;
                                            $updated_key_balance = $updated_key_balance + $cal;
                                        } else {
                                            $updated_key_balance = $special_tr_balance;
                                        }

                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                        //$response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        /*  $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                        // Update Actual Message
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $deduct_balance * $total_credits,
                                            'actual_message' => $deduct_balance,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'campaign_status' => $campaign_status,
                                            'total_time' => $total_time
                                        );
                                        if ($new_campaign_uid) {
                                            $data['campaign_uid'] = $new_campaign_uid;
                                        }
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        // Insert API Hit
                                        $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                        // Return Campaign Uid
                                        if ($new_campaign_uid) {
                                            return $new_campaign_uid;
                                        } else {
                                            return $campaign_uid;
                                        }
                                    } else {
                                        $balance_type = "TR";
                                        $updated_sms_balance = $tr_sms_balance - ($deduct_balance * $total_credits);
                                        //  $response_bal = $this->sms_model->updateBalance($user_id, $updated_sms_balance, $balance_type);
                                        /* $mostParentID = 0;
                                          $spacial_reseller_status = 0;
                                          $most_parent_id_reseller_status = 0;
                                          $updated_key_balance = 0; */


                                        $response_bal = $this->sms_model->updateBalance($user_id, $mostParentID, $updated_sms_balance, $balance_type, $spacial_reseller_status, $most_parent_id_reseller_status, $updated_key_balance, $route);
                                        // Update Actual Message
                                        $this->benchmark->mark('End_Time');
                                        $total_time = $this->benchmark->elapsed_time('Start_Time', 'End_Time');
                                        $data = array(
                                            'total_deducted' => $deduct_balance * $total_credits,
                                            'actual_message' => $deduct_balance,
                                            'campaign_status' => 2,
                                            'sender_status' => $sender_condition,
                                            'keyword_status' => $keyword_condition,
                                            'number_db_status' => $db_condition,
                                            'unique_numbers' => $total_unique,
                                            'exceed_numbers' => $exceed_numbers,
                                            'total_time' => $total_time
                                        );
                                        $this->db->where('campaign_id', $campaign_id);
                                        $this->db->update('campaigns', $data);
                                        // Insert API Hit
                                        $this->sms_model->insertAPIHit($user_id, $client_ip_address);
                                        return $campaign_uid;
                                    }
                                }
                            }
                        } else {
                            $reason = "Transactional route is not assigned to user";
                            $log_by = "By API";
                            $response_log = $this->sms_model->insertSMSLog($user_id, $reason, $log_by);
                            return "Error: Transactional route is not assigned to user!";
                        }
                    }
                }
            } else {
                return "Error: Please provide valid mobile number(s)!";
            }
        } else {
            return "Error: Something wrong! Please check your account!";
        }
    }

    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Manual Resend SMS (From Admin & User Panel)
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------//
    // Re-Send SMS- User
}
